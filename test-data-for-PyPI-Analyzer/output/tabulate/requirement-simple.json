{
  "name": "tabulate",
  "description": "python-tabulate\n===============\n\nPretty-print tabular data in Python, a library and a command-line\nutility.\n\nThe main use cases of the library are:\n\n-   printing small tables without hassle: just one function call,\n    formatting is guided by the data itself\n-   authoring tabular data for lightweight plain-text markup: multiple\n    output formats suitable for further editing or transformation\n-   readable presentation of mixed textual and numeric data: smart\n    column alignment, configurable number formatting, alignment by a\n    decimal point\n\nInstallation\n------------\n\nTo install the Python library and the command line utility, run:\n\n    pip install tabulate\n\nThe command line utility will be installed as `tabulate` to `bin` on\nLinux (e.g. `/usr/bin`); or as `tabulate.exe` to `Scripts` in your\nPython installation on Windows (e.g.\n`C:\\Python27\\Scripts\\tabulate.exe`).\n\nYou may consider installing the library only for the current user:\n\n    pip install tabulate --user\n\nIn this case the command line utility will be installed to\n`~/.local/bin/tabulate` on Linux and to\n`%APPDATA%\\Python\\Scripts\\tabulate.exe` on Windows.\n\nTo install just the library on Unix-like operating systems:\n\n    TABULATE_INSTALL=lib-only pip install tabulate\n\nOn Windows:\n\n    set TABULATE_INSTALL=lib-only\n    pip install tabulate\n\nThe module provides just one function, `tabulate`, which takes a list of\nlists or another tabular data type as the first argument, and outputs a\nnicely formatted plain-text table:\n\n    >>> from tabulate import tabulate\n\n    >>> table = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],\n    ...          [\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\n    >>> print(tabulate(table))\n    -----  ------  -------------\n    Sun    696000     1.9891e+09\n    Earth    6371  5973.6\n    Moon     1737    73.5\n    Mars     3390   641.85\n    -----  ------  -------------\n\nThe following tabular data types are supported:\n\n-   list of lists or another iterable of iterables\n-   list or another iterable of dicts (keys as columns)\n-   dict of iterables (keys as columns)\n-   two-dimensional NumPy array\n-   NumPy record arrays (names as columns)\n-   pandas.DataFrame\n\nExamples in this file use Python2. Tabulate supports Python3 too.\n\n### Headers\n\nThe second optional argument named `headers` defines a list of column\nheaders to be used:\n\n    >>> print(tabulate(table, headers=[\"Planet\",\"R (km)\", \"mass (x 10^29 kg)\"]))\n    Planet      R (km)    mass (x 10^29 kg)\n    --------  --------  -------------------\n    Sun         696000           1.9891e+09\n    Earth         6371        5973.6\n    Moon          1737          73.5\n    Mars          3390         641.85\n\nIf `headers=\"firstrow\"`, then the first row of data is used:\n\n    >>> print(tabulate([[\"Name\",\"Age\"],[\"Alice\",24],[\"Bob\",19]],\n    ...                headers=\"firstrow\"))\n    Name      Age\n    ------  -----\n    Alice      24\n    Bob        19\n\nIf `headers=\"keys\"`, then the keys of a dictionary/dataframe, or column\nindices are used. It also works for NumPy record arrays and lists of\ndictionaries or named tuples:\n\n    >>> print(tabulate({\"Name\": [\"Alice\", \"Bob\"],\n    ...                 \"Age\": [24, 19]}, headers=\"keys\"))\n      Age  Name\n    -----  ------\n       24  Alice\n       19  Bob\n\n### Row Indices\n\nBy default, only pandas.DataFrame tables have an additional column\ncalled row index. To add a similar column to any other type of table,\npass `showindex=\"always\"` or `showindex=True` argument to `tabulate()`.\nTo suppress row indices for all types of data, pass `showindex=\"never\"`\nor `showindex=False`. To add a custom row index column, pass\n`showindex=rowIDs`, where `rowIDs` is some iterable:\n\n    >>> print(tabulate([[\"F\",24],[\"M\",19]], showindex=\"always\"))\n    -  -  --\n    0  F  24\n    1  M  19\n    -  -  --\n\n### Table format\n\nThere is more than one way to format a table in plain text. The third\noptional argument named `tablefmt` defines how the table is formatted.\n\nSupported table formats are:\n\n-   \"plain\"\n-   \"simple\"\n-   \"github\"\n-   \"grid\"\n-   \"fancy\\_grid\"\n-   \"pipe\"\n-   \"orgtbl\"\n-   \"jira\"\n-   \"presto\"\n-   \"pretty\"\n-   \"psql\"\n-   \"rst\"\n-   \"mediawiki\"\n-   \"moinmoin\"\n-   \"youtrack\"\n-   \"html\"\n-   \"unsafehtml\"\n-   \"latex\"\n-   \"latex\\_raw\"\n-   \"latex\\_booktabs\"\n-   \"latex\\_longtable\"\n-   \"textile\"\n-   \"tsv\"\n\n`plain` tables do not use any pseudo-graphics to draw lines:\n\n    >>> table = [[\"spam\",42],[\"eggs\",451],[\"bacon\",0]]\n    >>> headers = [\"item\", \"qty\"]\n    >>> print(tabulate(table, headers, tablefmt=\"plain\"))\n    item      qty\n    spam       42\n    eggs      451\n    bacon       0\n\n`simple` is the default format (the default may change in future\nversions). It corresponds to `simple_tables` in [Pandoc Markdown\nextensions](http://johnmacfarlane.net/pandoc/README.html#tables):\n\n    >>> print(tabulate(table, headers, tablefmt=\"simple\"))\n    item      qty\n    ------  -----\n    spam       42\n    eggs      451\n    bacon       0\n\n`github` follows the conventions of GitHub flavored Markdown. It\ncorresponds to the `pipe` format without alignment colons:\n\n    >>> print(tabulate(table, headers, tablefmt=\"github\"))\n    | item   | qty   |\n    |--------|-------|\n    | spam   | 42    |\n    | eggs   | 451   |\n    | bacon  | 0     |\n\n`grid` is like tables formatted by Emacs'\n[table.el](http://table.sourceforge.net/) package. It corresponds to\n`grid_tables` in Pandoc Markdown extensions:\n\n    >>> print(tabulate(table, headers, tablefmt=\"grid\"))\n    +--------+-------+\n    | item   |   qty |\n    +========+=======+\n    | spam   |    42 |\n    +--------+-------+\n    | eggs   |   451 |\n    +--------+-------+\n    | bacon  |     0 |\n    +--------+-------+\n\n`fancy_grid` draws a grid using box-drawing characters:\n\n    >>> print(tabulate(table, headers, tablefmt=\"fancy_grid\"))\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n    \u2502 item   \u2502   qty \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 spam   \u2502    42 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 eggs   \u2502   451 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 bacon  \u2502     0 \u2502\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n\n`presto` is like tables formatted by Presto cli:\n\n    >>> print(tabulate(table, headers, tablefmt=\"presto\"))\n     item   |   qty\n    --------+-------\n     spam   |    42\n     eggs   |   451\n     bacon  |     0\n\n`pretty` attempts to be close to the format emitted by the PrettyTables\nlibrary:\n\n    >>> print(tabulate(table, headers, tablefmt=\"pretty\"))\n    +-------+-----+\n    | item  | qty |\n    +-------+-----+\n    | spam  | 42  |\n    | eggs  | 451 |\n    | bacon |  0  |\n    +-------+-----+\n\n`psql` is like tables formatted by Postgres' psql cli:\n\n    >>> print(tabulate(table, headers, tablefmt=\"psql\"))\n    +--------+-------+\n    | item   |   qty |\n    |--------+-------|\n    | spam   |    42 |\n    | eggs   |   451 |\n    | bacon  |     0 |\n    +--------+-------+\n\n`pipe` follows the conventions of [PHP Markdown\nExtra](http://michelf.ca/projects/php-markdown/extra/#table) extension.\nIt corresponds to `pipe_tables` in Pandoc. This format uses colons to\nindicate column alignment:\n\n    >>> print(tabulate(table, headers, tablefmt=\"pipe\"))\n    | item   |   qty |\n    |:-------|------:|\n    | spam   |    42 |\n    | eggs   |   451 |\n    | bacon  |     0 |\n\n`orgtbl` follows the conventions of Emacs\n[org-mode](http://orgmode.org/manual/Tables.html), and is editable also\nin the minor orgtbl-mode. Hence its name:\n\n    >>> print(tabulate(table, headers, tablefmt=\"orgtbl\"))\n    | item   |   qty |\n    |--------+-------|\n    | spam   |    42 |\n    | eggs   |   451 |\n    | bacon  |     0 |\n\n`jira` follows the conventions of Atlassian Jira markup language:\n\n    >>> print(tabulate(table, headers, tablefmt=\"jira\"))\n    || item   ||   qty ||\n    | spam   |    42 |\n    | eggs   |   451 |\n    | bacon  |     0 |\n\n`rst` formats data like a simple table of the\n[reStructuredText](http://docutils.sourceforge.net/docs/user/rst/quickref.html#tables)\nformat:\n\n    >>> print(tabulate(table, headers, tablefmt=\"rst\"))\n    ======  =====\n    item      qty\n    ======  =====\n    spam       42\n    eggs      451\n    bacon       0\n    ======  =====\n\n`mediawiki` format produces a table markup used in\n[Wikipedia](http://www.mediawiki.org/wiki/Help:Tables) and on other\nMediaWiki-based sites:\n\n    >>> print(tabulate(table, headers, tablefmt=\"mediawiki\"))\n    {| class=\"wikitable\" style=\"text-align: left;\"\n    |+ <!-- caption -->\n    |-\n    ! item   !! align=\"right\"|   qty\n    |-\n    | spam   || align=\"right\"|    42\n    |-\n    | eggs   || align=\"right\"|   451\n    |-\n    | bacon  || align=\"right\"|     0\n    |}\n\n`moinmoin` format produces a table markup used in\n[MoinMoin](https://moinmo.in/) wikis:\n\n    >>> print(tabulate(table, headers, tablefmt=\"moinmoin\"))\n    || ''' item   ''' || ''' quantity   ''' ||\n    ||  spam    ||  41.999      ||\n    ||  eggs    ||  451         ||\n    ||  bacon   ||              ||\n\n`youtrack` format produces a table markup used in Youtrack tickets:\n\n    >>> print(tabulate(table, headers, tablefmt=\"youtrack\"))\n    ||  item    ||  quantity   ||\n    |   spam    |  41.999      |\n    |   eggs    |  451         |\n    |   bacon   |              |\n\n`textile` format produces a table markup used in\n[Textile](http://redcloth.org/hobix.com/textile/) format:\n\n    >>> print(tabulate(table, headers, tablefmt=\"textile\"))\n    |_.  item   |_.   qty |\n    |<. spam    |>.    42 |\n    |<. eggs    |>.   451 |\n    |<. bacon   |>.     0 |\n\n`html` produces standard HTML markup as an html.escape'd str\nwith a ._repr_html_ method so that Jupyter Lab and Notebook display the HTML\nand a .str property so that the raw HTML remains accessible.\n`unsafehtml` table format can be used if an unescaped HTML is required:\n\n    >>> print(tabulate(table, headers, tablefmt=\"html\"))\n    <table>\n    <tbody>\n    <tr><th>item  </th><th style=\"text-align: right;\">  qty</th></tr>\n    <tr><td>spam  </td><td style=\"text-align: right;\">   42</td></tr>\n    <tr><td>eggs  </td><td style=\"text-align: right;\">  451</td></tr>\n    <tr><td>bacon </td><td style=\"text-align: right;\">    0</td></tr>\n    </tbody>\n    </table>\n\n`latex` format creates a `tabular` environment for LaTeX markup,\nreplacing special characters like `_` or `\\` to their LaTeX\ncorrespondents:\n\n    >>> print(tabulate(table, headers, tablefmt=\"latex\"))\n    \\begin{tabular}{lr}\n    \\hline\n     item   &   qty \\\\\n    \\hline\n     spam   &    42 \\\\\n     eggs   &   451 \\\\\n     bacon  &     0 \\\\\n    \\hline\n    \\end{tabular}\n\n`latex_raw` behaves like `latex` but does not escape LaTeX commands and\nspecial characters.\n\n`latex_booktabs` creates a `tabular` environment for LaTeX markup using\nspacing and style from the `booktabs` package.\n\n`latex_longtable` creates a table that can stretch along multiple pages,\nusing the `longtable` package.\n\n### Column alignment\n\n`tabulate` is smart about column alignment. It detects columns which\ncontain only numbers, and aligns them by a decimal point (or flushes\nthem to the right if they appear to be integers). Text columns are\nflushed to the left.\n\nYou can override the default alignment with `numalign` and `stralign`\nnamed arguments. Possible column alignments are: `right`, `center`,\n`left`, `decimal` (only for numbers), and `None` (to disable alignment).\n\nAligning by a decimal point works best when you need to compare numbers\nat a glance:\n\n    >>> print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]]))\n    ----------\n        1.2345\n      123.45\n       12.345\n    12345\n     1234.5\n    ----------\n\nCompare this with a more common right alignment:\n\n    >>> print(tabulate([[1.2345],[123.45],[12.345],[12345],[1234.5]], numalign=\"right\"))\n    ------\n    1.2345\n    123.45\n    12.345\n     12345\n    1234.5\n    ------\n\nFor `tabulate`, anything which can be parsed as a number is a number.\nEven numbers represented as strings are aligned properly. This feature\ncomes in handy when reading a mixed table of text and numbers from a\nfile:\n\n    >>> import csv ; from StringIO import StringIO\n    >>> table = list(csv.reader(StringIO(\"spam, 42\\neggs, 451\\n\")))\n    >>> table\n    [['spam', ' 42'], ['eggs', ' 451']]\n    >>> print(tabulate(table))\n    ----  ----\n    spam    42\n    eggs   451\n    ----  ----\n\n\nTo disable this feature use `disable_numparse=True`.\n\n    >>> print(tabulate.tabulate([[\"Ver1\", \"18.0\"], [\"Ver2\",\"19.2\"]], tablefmt=\"simple\", disable_numparse=True))\n    ----  ----\n    Ver1  18.0\n    Ver2  19.2\n    ----  ----\n\n\n### Custom column alignment\n\n`tabulate` allows a custom column alignment to override the above. The\n`colalign` argument can be a list or a tuple of `stralign` named\narguments. Possible column alignments are: `right`, `center`, `left`,\n`decimal` (only for numbers), and `None` (to disable alignment).\nOmitting an alignment uses the default. For example:\n\n    >>> print(tabulate([[\"one\", \"two\"], [\"three\", \"four\"]], colalign=(\"right\",))\n    -----  ----\n      one  two\n    three  four\n    -----  ----\n\n### Number formatting\n\n`tabulate` allows to define custom number formatting applied to all\ncolumns of decimal numbers. Use `floatfmt` named argument:\n\n    >>> print(tabulate([[\"pi\",3.141593],[\"e\",2.718282]], floatfmt=\".4f\"))\n    --  ------\n    pi  3.1416\n    e   2.7183\n    --  ------\n\n`floatfmt` argument can be a list or a tuple of format strings, one per\ncolumn, in which case every column may have different number formatting:\n\n    >>> print(tabulate([[0.12345, 0.12345, 0.12345]], floatfmt=(\".1f\", \".3f\")))\n    ---  -----  -------\n    0.1  0.123  0.12345\n    ---  -----  -------\n\n### Text formatting\n\nBy default, `tabulate` removes leading and trailing whitespace from text\ncolumns. To disable whitespace removal, set the global module-level flag\n`PRESERVE_WHITESPACE`:\n\n    import tabulate\n    tabulate.PRESERVE_WHITESPACE = True\n\n### Wide (fullwidth CJK) symbols\n\nTo properly align tables which contain wide characters (typically\nfullwidth glyphs from Chinese, Japanese or Korean languages), the user\nshould install `wcwidth` library. To install it together with\n`tabulate`:\n\n    pip install tabulate[widechars]\n\nWide character support is enabled automatically if `wcwidth` library is\nalready installed. To disable wide characters support without\nuninstalling `wcwidth`, set the global module-level flag\n`WIDE_CHARS_MODE`:\n\n    import tabulate\n    tabulate.WIDE_CHARS_MODE = False\n\n### Multiline cells\n\nMost table formats support multiline cell text (text containing newline\ncharacters). The newline characters are honored as line break\ncharacters.\n\nMultiline cells are supported for data rows and for header rows.\n\nFurther automatic line breaks are not inserted. Of course, some output\nformats such as latex or html handle automatic formatting of the cell\ncontent on their own, but for those that don't, the newline characters\nin the input cell text are the only means to break a line in cell text.\n\nNote that some output formats (e.g. simple, or plain) do not represent\nrow delimiters, so that the representation of multiline cells in such\nformats may be ambiguous to the reader.\n\nThe following examples of formatted output use the following table with\na multiline cell, and headers with a multiline cell:\n\n    >>> table = [[\"eggs\",451],[\"more\\nspam\",42]]\n    >>> headers = [\"item\\nname\", \"qty\"]\n\n`plain` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"plain\"))\n    item      qty\n    name\n    eggs      451\n    more       42\n    spam\n\n`simple` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"simple\"))\n    item      qty\n    name\n    ------  -----\n    eggs      451\n    more       42\n    spam\n\n`grid` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"grid\"))\n    +--------+-------+\n    | item   |   qty |\n    | name   |       |\n    +========+=======+\n    | eggs   |   451 |\n    +--------+-------+\n    | more   |    42 |\n    | spam   |       |\n    +--------+-------+\n\n`fancy_grid` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"fancy_grid\"))\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n    \u2502 item   \u2502   qty \u2502\n    \u2502 name   \u2502       \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 eggs   \u2502   451 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 more   \u2502    42 \u2502\n    \u2502 spam   \u2502       \u2502\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n\n`pipe` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"pipe\"))\n    | item   |   qty |\n    | name   |       |\n    |:-------|------:|\n    | eggs   |   451 |\n    | more   |    42 |\n    | spam   |       |\n\n`orgtbl` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"orgtbl\"))\n    | item   |   qty |\n    | name   |       |\n    |--------+-------|\n    | eggs   |   451 |\n    | more   |    42 |\n    | spam   |       |\n\n`jira` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"jira\"))\n    | item   |   qty |\n    | name   |       |\n    |:-------|------:|\n    | eggs   |   451 |\n    | more   |    42 |\n    | spam   |       |\n\n`presto` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"presto\"))\n     item   |   qty\n     name   |\n    --------+-------\n     eggs   |   451\n     more   |    42\n     spam   |\n\n`pretty` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"pretty\"))\n    +------+-----+\n    | item | qty |\n    | name |     |\n    +------+-----+\n    | eggs | 451 |\n    | more | 42  |\n    | spam |     |\n    +------+-----+\n\n`psql` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"psql\"))\n    +--------+-------+\n    | item   |   qty |\n    | name   |       |\n    |--------+-------|\n    | eggs   |   451 |\n    | more   |    42 |\n    | spam   |       |\n    +--------+-------+\n\n`rst` tables:\n\n    >>> print(tabulate(table, headers, tablefmt=\"rst\"))\n    ======  =====\n    item      qty\n    name\n    ======  =====\n    eggs      451\n    more       42\n    spam\n    ======  =====\n\nMultiline cells are not well supported for the other table formats.\n\nUsage of the command line utility\n---------------------------------\n\n    Usage: tabulate [options] [FILE ...]\n\n    FILE                      a filename of the file with tabular data;\n                              if \"-\" or missing, read data from stdin.\n\n    Options:\n\n    -h, --help                show this message\n    -1, --header              use the first row of data as a table header\n    -o FILE, --output FILE    print table to FILE (default: stdout)\n    -s REGEXP, --sep REGEXP   use a custom column separator (default: whitespace)\n    -F FPFMT, --float FPFMT   floating point number format (default: g)\n    -f FMT, --format FMT      set output table format; supported formats:\n                              plain, simple, github, grid, fancy_grid, pipe,\n                              orgtbl, rst, mediawiki, html, latex, latex_raw,\n                              latex_booktabs, latex_longtable, tsv\n                              (default: simple)\n\nPerformance considerations\n--------------------------\n\nSuch features as decimal point alignment and trying to parse everything\nas a number imply that `tabulate`:\n\n-   has to \"guess\" how to print a particular tabular data type\n-   needs to keep the entire table in-memory\n-   has to \"transpose\" the table twice\n-   does much more work than it may appear\n\nIt may not be suitable for serializing really big tables (but who's\ngoing to do that, anyway?) or printing tables in performance sensitive\napplications. `tabulate` is about two orders of magnitude slower than\nsimply joining lists of values with a tab, comma, or other separator.\n\nAt the same time, `tabulate` is comparable to other table\npretty-printers. Given a 10x10 table (a list of lists) of mixed text and\nnumeric data, `tabulate` appears to be slower than `asciitable`, and\nfaster than `PrettyTable` and `texttable` The following mini-benchmark\nwas run in Python 3.8.3 in Windows 10 x64:\n\n    =================================  ==========  ===========\n    Table formatter                      time, \u03bcs    rel. time\n    =================================  ==========  ===========\n    csv to StringIO                          12.5          1.0\n    join with tabs and newlines              15.6          1.3\n    asciitable (0.8.0)                      191.4         15.4\n    tabulate (0.8.9)                        472.8         38.0\n    tabulate (0.8.9, WIDE_CHARS_MODE)       789.6         63.4\n    PrettyTable (0.7.2)                     879.1         70.6\n    texttable (1.6.2)                      1352.2        108.6\n    =================================  ==========  ===========\n\n\nVersion history\n---------------\n\nThe full version history can be found at the [changelog](https://github.com/astanin/python-tabulate/blob/master/CHANGELOG).\n\nHow to contribute\n-----------------\n\nContributions should include tests and an explanation for the changes\nthey propose. Documentation (examples, docstrings, README.md) should be\nupdated accordingly.\n\nThis project uses [pytest](https://docs.pytest.org/) testing\nframework and [tox](https://tox.readthedocs.io/) to automate testing in\ndifferent environments. Add tests to one of the files in the `test/`\nfolder.\n\nTo run tests on all supported Python versions, make sure all Python\ninterpreters, `pytest` and `tox` are installed, then run `tox` in the root\nof the project source tree.\n\nOn Linux `tox` expects to find executables like `python2.6`,\n`python2.7`, `python3.4` etc. On Windows it looks for\n`C:\\Python26\\python.exe`, `C:\\Python27\\python.exe` and\n`C:\\Python34\\python.exe` respectively.\n\nTo test only some Python environments, use `-e` option. For example, to\ntest only against Python 2.7 and Python 3.8, run:\n\n    tox -e py27,py38\n\nin the root of the project source tree.\n\nTo enable NumPy and Pandas tests, run:\n\n    tox -e py27-extra,py38-extra\n\n(this may take a long time the first time, because NumPy and Pandas will\nhave to be installed in the new virtual environments)\n\nTo fix code formatting:\n\n    tox -e lint\n\nSee `tox.ini` file to learn how to use to test\nindividual Python versions.\n\nContributors\n------------\n\nSergey Astanin, Pau Tallada Cresp\u00ed, Erwin Marsi, Mik Kocikowski, Bill\nRyder, Zach Dwiel, Frederik Rietdijk, Philipp Bogensberger, Greg\n(anonymous), Stefan Tatschner, Emiel van Miltenburg, Brandon Bennett,\nAmjith Ramanujam, Jan Schulz, Simon Percivall, Javier Santacruz\nL\u00f3pez-Cepero, Sam Denton, Alexey Ziyangirov, acaird, Cesar Sanchez,\nnaught101, John Vandenberg, Zack Dever, Christian Clauss, Benjamin\nMaier, Andy MacKinlay, Thomas Roten, Jue Wang, Joe King, Samuel Phan,\nNick Satterly, Daniel Robbins, Dmitry B, Lars Butler, Andreas Maier,\nDick Marinus, S\u00e9bastien Celles, Yago Gonz\u00e1lez, Andrew Gaul, Wim Glenn,\nJean Michel Rouly, Tim Gates, John Vandenberg, Sorin Sbarnea,\nWes Turner, Andrew Tija, Marco Gorelli, Sean McGinnis, danja100,\nendolith, Dominic Davis-Foster, pavlocat, Daniel Aslau, paulc,\nFelix Yan, Shane Loretz, Frank Busse, Harsh Singh, Derek Weitzel,\nVladimir Vrzi\u0107, \uc11c\uc2b9\uc6b0 (chrd5273), Georgy Frolov, Christian Cwienk,\nBart Broere, Vilhelm Prytz.\n\n\n",
  "requires_dist": [
    "wcwidth ; extra == 'widechars'"
  ],
  "requires_python": "",
  "current_version": "0.8.9",
  "released_versions": [
    "0.3",
    "0.4.2",
    "0.4.3",
    "0.4.4",
    "0.5",
    "0.5.1",
    "0.6",
    "0.7",
    "0.7.1",
    "0.7.2",
    "0.7.3",
    "0.7.4",
    "0.7.5",
    "0.7.6",
    "0.7.7",
    "0.8.0",
    "0.8.1",
    "0.8.2",
    "0.8.3",
    "0.8.4",
    "0.8.5",
    "0.8.6",
    "0.8.7",
    "0.8.8",
    "0.8.9"
  ]
}