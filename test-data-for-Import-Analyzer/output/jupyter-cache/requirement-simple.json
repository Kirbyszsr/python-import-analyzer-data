{
  "name": "jupyter-cache",
  "description": "[Install](#install) | [Example](#example-cli-usage) | [Contributing](#contributing)\n\n# jupyter-cache\n\n[![CI Status][travis-badge]][travis-link]\n[![Coverage][coveralls-badge]][coveralls-link]\n[![Documentation Status][rtd-badge]][rtd-link]\n[![Code style: black][black-badge]][black-link]\n[![PyPI][pypi-badge]][pypi-link]\n\nA defined interface for working with a cache of jupyter notebooks.\n\nNOTE: This package is in an Alpha stage and liable to change.\n\nSome desired requirements (not yet all implemented):\n\n- Persistent\n- Separates out \"edits to content\" from \"edits to code cells\". Cell\n  rearranges and code cell changes should require a re-execution. Content changes should not.\n- Allow parallel access to notebooks (for execution)\n- Store execution statistics/reports\n- Store external assets: Notebooks being executed often require external assets: importing scripts/data/etc. These are prepared by the users.\n- Store execution artifacts: created during exeution\n- A transparent and robust cache invalidation: imagine the user updating an external dependency or a Python module, or checking out a different git branch.\n\n[travis-badge]: https://travis-ci.org/ExecutableBookProject/jupyter-cache.svg?branch=master\n[travis-link]: https://travis-ci.org/ExecutableBookProject/jupyter-cache\n[coveralls-badge]: https://coveralls.io/repos/github/ExecutableBookProject/jupyter-cache/badge.svg?branch=master\n[coveralls-link]: https://coveralls.io/github/ExecutableBookProject/jupyter-cache?branch=master\n[rtd-badge]: https://readthedocs.org/projects/jupyter-cache/badge/?version=latest\n[rtd-link]: https://jupyter-cache.readthedocs.io/en/latest/?badge=latest\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[pypi-badge]: https://img.shields.io/pypi/v/jupyter-cache.svg\n[pypi-link]: https://pypi.org/project/jupyter-cache\n[black-link]: https://github.com/ambv/black\n\n## Install\n\n```bash\npip install jupyter-cache[cli]\n```\n\nFor development:\n\n```bash\ngit clone https://github.com/ExecutableBookProject/jupyter-cache\ncd jupyter-cache\ngit checkout develop\npip install -e .[cli,code_style,testing]\n```\n\n## Example API usage\n\nto come ...\n\n## Example CLI usage\n\n<!-- This section was auto-generated on 2020-03-12 17:31 by: /Users/cjs14/GitHub/jupyter-cache/tests/make_cli_readme.py -->\n\nFrom the checked-out repository folder:\n\n```console\n$ jcache --help\nUsage: jcache [OPTIONS] COMMAND [ARGS]...\n\n  The command line interface of jupyter-cache.\n\nOptions:\n  -v, --version       Show the version and exit.\n  -p, --cache-path    Print the current cache path and exit.\n  -a, --autocomplete  Print the autocompletion command and exit.\n  -h, --help          Show this message and exit.\n\nCommands:\n  cache    Commands for adding to and inspecting the cache.\n  clear    Clear the cache completely.\n  config   Commands for configuring the cache.\n  execute  Execute staged notebooks that are outdated.\n  stage    Commands for staging notebooks to be executed.\n```\n\n**Important**: Execute this in the terminal for auto-completion:\n\n```console\neval \"$(_JCACHE_COMPLETE=source jcache)\"\n```\n\n### Caching Executed Notebooks\n\n```console\n$ jcache cache --help\nUsage: cache [OPTIONS] COMMAND [ARGS]...\n\n  Commands for adding to and inspecting the cache.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add                 Cache notebook(s) that have already been executed.\n  add-with-artefacts  Cache a notebook, with possible artefact files.\n  cat-artifact        Print the contents of a cached artefact.\n  diff-nb             Print a diff of a notebook to one stored in the cache.\n  list                List cached notebook records in the cache.\n  remove              Remove notebooks stored in the cache.\n  show                Show details of a cached notebook in the cache.\n```\n\nThe first time the cache is required, it will be lazily created:\n\n```console\n$ jcache cache list\nCache path: ../.jupyter_cache\nThe cache does not yet exist, do you want to create it? [y/N]: y\nNo Cached Notebooks\n\n```\n\nYou can add notebooks straight into the cache.\nWhen caching, a check will be made that the notebooks look to have been executed\ncorrectly, i.e. the cell execution counts go sequentially up from 1.\n\n```console\n$ jcache cache add tests/notebooks/basic.ipynb\nCaching: ../tests/notebooks/basic.ipynb\nValidity Error: Expected cell 1 to have execution_count 1 not 2\nThe notebook may not have been executed, continue caching? [y/N]: y\nSuccess!\n```\n\nOr to skip validation:\n\n```console\n$ jcache cache add --no-validate tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\nCaching: ../tests/notebooks/basic.ipynb\nCaching: ../tests/notebooks/basic_failing.ipynb\nCaching: ../tests/notebooks/basic_unrun.ipynb\nCaching: ../tests/notebooks/complex_outputs.ipynb\nCaching: ../tests/notebooks/external_output.ipynb\nSuccess!\n```\n\nOnce you've cached some notebooks, you can look at the 'cache records'\nfor what has been cached.\n\nEach notebook is hashed (code cells and kernel spec only),\nwhich is used to compare against 'staged' notebooks.\nMultiple hashes for the same URI can be added\n(the URI is just there for inspetion) and the size of the cache is limited\n(current default 1000) so that, at this size,\nthe last accessed records begin to be deleted.\nYou can remove cached records by their ID.\n\n```console\n$ jcache cache list\n  ID  Origin URI                             Created           Accessed\n----  -------------------------------------  ----------------  ----------------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31  2020-03-12 17:31\n   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31  2020-03-12 17:31\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31  2020-03-12 17:31\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31  2020-03-12 17:31\n```\n\nTip: Use the `--latest-only` option, to only show the latest versions of cached notebooks.\n\nYou can also cache notebooks with artefacts\n(external outputs of the notebook execution).\n\n```console\n$ jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\nCaching: ../tests/notebooks/basic.ipynb\nValidity Error: Expected cell 1 to have execution_count 1 not 2\nThe notebook may not have been executed, continue caching? [y/N]: y\nSuccess!\n```\n\nShow a full description of a cached notebook by referring to its ID\n\n```console\n$ jcache cache show 6\nID: 6\nOrigin URI: ../tests/notebooks/basic.ipynb\nCreated: 2020-03-12 17:31\nAccessed: 2020-03-12 17:31\nHashkey: 818f3412b998fcf4fe9ca3cca11a3fc3\nArtifacts:\n- artifact_folder/artifact.txt\n```\n\nNote artefact paths must be 'upstream' of the notebook folder:\n\n```console\n$ jcache cache add-with-artefacts -nb tests/notebooks/basic.ipynb tests/test_db.py\nCaching: ../tests/notebooks/basic.ipynb\nArtifact Error: Path '../tests/test_db.py' is not in folder '../tests/notebooks''\n```\n\nTo view the contents of an execution artefact:\n\n```console\n$ jcache cache cat-artifact 6 artifact_folder/artifact.txt\nAn artifact\n\n```\n\nYou can directly remove a cached notebook by its ID:\n\n```console\n$ jcache cache remove 4\nRemoving Cache ID = 4\nSuccess!\n```\n\nYou can also diff any of the cached notebooks with any (external) notebook:\n\n```console\n$ jcache cache diff-nb 2 tests/notebooks/basic.ipynb\nnbdiff\n--- cached pk=2\n+++ other: ../tests/notebooks/basic.ipynb\n## inserted before nb/cells/0:\n+  code cell:\n+    execution_count: 2\n+    source:\n+      a=1\n+      print(a)\n+    outputs:\n+      output 0:\n+        output_type: stream\n+        name: stdout\n+        text:\n+          1\n\n## deleted nb/cells/0:\n-  code cell:\n-    source:\n-      raise Exception('oopsie!')\n\n\nSuccess!\n```\n\n### Staging Notebooks for execution\n\n```console\n$ jcache stage --help\nUsage: stage [OPTIONS] COMMAND [ARGS]...\n\n  Commands for staging notebooks to be executed.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add              Stage notebook(s) for execution.\n  add-with-assets  Stage a notebook, with possible asset files.\n  list             List notebooks staged for possible execution.\n  remove-ids       Un-stage notebook(s), by ID.\n  remove-uris      Un-stage notebook(s), by URI.\n  show             Show details of a staged notebook.\n```\n\nStaged notebooks are recorded as pointers to their URI,\ni.e. no physical copying takes place until execution time.\n\nIf you stage some notebooks for execution, then\nyou can list them to see which have existing records in the cache (by hash),\nand which will require execution:\n\n```console\n$ jcache stage add tests/notebooks/basic.ipynb tests/notebooks/basic_failing.ipynb tests/notebooks/basic_unrun.ipynb tests/notebooks/complex_outputs.ipynb tests/notebooks/external_output.ipynb\nStaging: ../tests/notebooks/basic.ipynb\nStaging: ../tests/notebooks/basic_failing.ipynb\nStaging: ../tests/notebooks/basic_unrun.ipynb\nStaging: ../tests/notebooks/complex_outputs.ipynb\nStaging: ../tests/notebooks/external_output.ipynb\nSuccess!\n```\n\n```console\n$ jcache stage list\n  ID  URI                                    Created             Assets    Cache ID\n----  -------------------------------------  ----------------  --------  ----------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5\n   4  tests/notebooks/complex_outputs.ipynb  2020-03-12 17:31         0\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0           2\n   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6\n```\n\nYou can remove a staged notebook by its URI or ID:\n\n```console\n$ jcache stage remove-ids 4\nUnstaging ID: 4\nSuccess!\n```\n\nYou can then run a basic execution of the required notebooks:\n\n```console\n$ jcache cache remove 6 2\nRemoving Cache ID = 6\nRemoving Cache ID = 2\nSuccess!\n```\n\n```console\n$ jcache execute\nExecuting: ../tests/notebooks/basic.ipynb\nExecution Succeeded: ../tests/notebooks/basic.ipynb\nExecuting: ../tests/notebooks/basic_failing.ipynb\nerror: Execution Failed: ../tests/notebooks/basic_failing.ipynb\nExecuting: ../tests/notebooks/basic_unrun.ipynb\nExecution Succeeded: ../tests/notebooks/basic_unrun.ipynb\nFinished! Successfully executed notebooks have been cached.\nsucceeded:\n- ../tests/notebooks/basic.ipynb\n- ../tests/notebooks/basic_unrun.ipynb\nexcepted:\n- ../tests/notebooks/basic_failing.ipynb\nerrored: []\n\n```\n\nSuccessfully executed notebooks will be cached to the cache,\nalong with any 'artefacts' created by the execution,\nthat are inside the notebook folder, and data supplied by the executor.\n\n```console\n$ jcache stage list\n  ID  URI                                    Created             Assets    Cache ID\n----  -------------------------------------  ----------------  --------  ----------\n   5  tests/notebooks/external_output.ipynb  2020-03-12 17:31         0           5\n   3  tests/notebooks/basic_unrun.ipynb      2020-03-12 17:31         0           6\n   2  tests/notebooks/basic_failing.ipynb    2020-03-12 17:31         0\n   1  tests/notebooks/basic.ipynb            2020-03-12 17:31         0           6\n```\n\nExecution data (such as execution time) will be stored in the cache record:\n\n```console\n$ jcache cache show 6\nID: 6\nOrigin URI: ../tests/notebooks/basic_unrun.ipynb\nCreated: 2020-03-12 17:31\nAccessed: 2020-03-12 17:31\nHashkey: 818f3412b998fcf4fe9ca3cca11a3fc3\nData:\n  execution_seconds: 1.0559415130000005\n\n```\n\nFailed notebooks will not be cached, but the exception traceback will be added to the stage record:\n\n```console\n$ jcache stage show 2\nID: 2\nURI: ../tests/notebooks/basic_failing.ipynb\nCreated: 2020-03-12 17:31\nFailed Last Execution!\nTraceback (most recent call last):\n  File \"../jupyter_cache/executors/basic.py\", line 152, in execute\n    executenb(nb_bundle.nb, cwd=tmpdirname)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 737, in executenb\n    return ep.preprocess(nb, resources, km=km)[0]\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 405, in preprocess\n    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/base.py\", line 69, in preprocess\n    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)\n  File \"/anaconda/envs/mistune/lib/python3.7/site-packages/nbconvert/preprocessors/execute.py\", line 448, in preprocess_cell\n    raise CellExecutionError.from_cell_and_msg(cell, out)\nnbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:\n------------------\nraise Exception('oopsie!')\n------------------\n\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-1-714b2b556897> in <module>\n----> 1 raise Exception('oopsie!')\n\nException: oopsie!\nException: oopsie!\n\n\n```\n\nOnce executed you may leave staged notebooks, for later re-execution, or remove them:\n\n```console\n$ jcache stage remove-ids --all\nAre you sure you want to remove all? [y/N]: y\nUnstaging ID: 1\nUnstaging ID: 2\nUnstaging ID: 3\nUnstaging ID: 5\nSuccess!\n```\n\nYou can also stage notebooks with assets;\nexternal files that are required by the notebook during execution.\nAs with artefacts, these files must be in the same folder as the notebook,\nor a sub-folder.\n\n```console\n$ jcache stage add-with-assets -nb tests/notebooks/basic.ipynb tests/notebooks/artifact_folder/artifact.txt\nSuccess!\n```\n\n```console\n$ jcache stage show 1\nID: 1\nURI: ../tests/notebooks/basic.ipynb\nCreated: 2020-03-12 17:31\nCache ID: 6\nAssets:\n- ../tests/notebooks/artifact_folder/artifact.txt\n```\n\n## Contributing\n\njupyter-cache follows the [Executable Book Contribution Guide](https://executablebooks.org/en/latest/contributing.html). We'd love your help!\n\n### Code Style\n\nCode style is tested using [flake8](http://flake8.pycqa.org),\nwith the configuration set in `.flake8`,\nand code formatted with [black](https://github.com/ambv/black).\n\nInstalling with `jupyter-cache[code_style]` makes the [pre-commit](https://pre-commit.com/)\npackage available, which will ensure this style is met before commits are submitted, by reformatting the code\nand testing for lint errors.\nIt can be setup by:\n\n```shell\n>> cd jupyter-cache\n>> pre-commit install\n```\n\nOptionally you can run `black` and `flake8` separately:\n\n```shell\n>> black .\n>> flake8 .\n```\n\nEditors like VS Code also have automatic code reformat utilities, which can adhere to this standard.\n\n\n",
  "requires_dist": [
    "attrs",
    "nbformat",
    "nbdime",
    "nbclient (<0.6,>=0.2)",
    "sqlalchemy (~=1.3.12)",
    "click ; extra == 'cli'",
    "click-completion ; extra == 'cli'",
    "click-log ; extra == 'cli'",
    "tabulate ; extra == 'cli'",
    "pyyaml ; extra == 'cli'",
    "flake8 (<3.8.0,>=3.7.0) ; extra == 'code_style'",
    "black ; extra == 'code_style'",
    "pre-commit (==1.17.0) ; extra == 'code_style'",
    "myst-nb (~=0.7) ; extra == 'rtd'",
    "sphinx-copybutton ; extra == 'rtd'",
    "pydata-sphinx-theme ; extra == 'rtd'",
    "coverage ; extra == 'testing'",
    "pytest (<4,>=3.6) ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-regressions ; extra == 'testing'",
    "matplotlib ; extra == 'testing'",
    "numpy ; extra == 'testing'",
    "sympy ; extra == 'testing'",
    "pandas ; extra == 'testing'",
    "nbformat (>=5.1) ; extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.4.2",
  "released_versions": [
    "0.1.0",
    "0.1.0a1",
    "0.2.0",
    "0.2.1",
    "0.2.2",
    "0.3.0",
    "0.4.0",
    "0.4.1",
    "0.4.2",
    "0.4.2a1"
  ]
}