{
  "name": "astunparse",
  "description": "============\nAST Unparser\n============\n\n.. image:: https://badge.fury.io/py/astunparse.png\n    :target: http://badge.fury.io/py/astunparse\n\n.. image:: https://travis-ci.org/simonpercivall/astunparse.png?branch=master\n    :target: https://travis-ci.org/simonpercivall/astunparse\n\n.. image:: https://readthedocs.org/projects/astunparse/badge/\n    :target: https://astunparse.readthedocs.org/\n\nAn AST unparser for Python.\n\nThis is a factored out version of ``unparse`` found in the Python\nsource distribution; under Demo/parser in Python 2 and under Tools/parser\nin Python 3.\n\nBasic example::\n\n    import inspect\n    import ast\n    import astunparse\n\n    # get back the source code\n    astunparse.unparse(ast.parse(inspect.getsource(ast)))\n\n    # get a pretty-printed dump of the AST\n    astunparse.dump(ast.parse(inspect.getsource(ast)))\n\n\nThis library is single-source compatible with Python 2.6 through Python 3.5. It\nis authored by the Python core developers; I have simply merged the Python 2.7\nand the Python 3.5 source and test suites, and added a wrapper. This factoring\nout is to provide a library implementation that supports both versions.\n\nAdded to this is a pretty-printing ``dump`` utility function.\n\nThe test suite both runs specific tests and also roundtrips much of the\nstandard library.\n\nExtensions and Alternatives\n---------------------------\n\nSimilar projects include:\n\n    * codegen_\n    * astor_\n    * astmonkey_\n    * astprint_\n\nNone of these roundtrip much of the standard library and fail several of the basic\ntests in the ``test_unparse`` test suite.\n\nThis library uses mature and core maintained code instead of trying to patch\nexisting libraries. The ``unparse`` and the ``test_unparse`` modules\nare under the PSF license.\n\nExtensions include:\n\n    * typed-astunparse: extends astunparse to support type annotations.\n\n* Documentation: http://astunparse.rtfd.org.\n\nFeatures\n--------\n\n* unparses Python AST.\n* pretty-prints AST.\n\n\n.. _codegen: https://github.com/andreif/codegen\n.. _astor: https://github.com/berkerpeksag/astor\n.. _astmonkey: https://github.com/konradhalas/astmonkey\n.. _astprint: https://github.com/Manticore/astprint\n\n\nChangelog\n=========\n\nHere's the recent changes to AST Unparser.\n\n1.6.3 - 2019-12-22\n~~~~~~~~~~~~~~~~~~\n\n* Add full support for Python 3.8\n\n1.6.2 - 2019-01-19\n~~~~~~~~~~~~~~~~~~\n\n* Add support for the Constant node in Python 3.8\n* Add tests to the sdist\n\n1.6.1 - 2018-10-03\n~~~~~~~~~~~~~~~~~~\n\n* Fix the roundtripping of very complex f-strings.\n\n1.6.0 - 2018-09-30\n~~~~~~~~~~~~~~~~~~\n\n* Python 3.7 compatibility\n\n1.5.0 - 2017-02-05\n~~~~~~~~~~~~~~~~~~\n\n* Python 3.6 compatibility\n* bugfix: correct argparser option type\n\n1.4.0 - 2016-06-24\n~~~~~~~~~~~~~~~~~~\n\n* Support for the ``async`` keyword\n* Support for unparsing \"Interactive\" and \"Expression\" nodes\n\n1.3.0 - 2016-01-17\n~~~~~~~~~~~~~~~~~~\n\n* Python 3.5 compatibility\n\n1.2.0 - 2014-04-03\n~~~~~~~~~~~~~~~~~~\n\n* Python 2.6 through 3.4 compatibility\n* A new function ``dump`` is added to return a pretty-printed version\n  of the AST. It's also available when running ``python -m astunparse``\n  as the ``--dump`` argument.\n\n1.1.0 - 2014-04-01\n~~~~~~~~~~~~~~~~~~\n\n* ``unparse`` will return the source code for an AST. It is pretty\n  feature-complete, and round-trips the stdlib, and is compatible with\n  Python 2.7 and Python 3.4.\n\n  Running ``python -m astunparse`` will print the round-tripped source\n  for any python files given as argument.\n\n\n",
  "requires_dist": [
    "wheel (<1.0,>=0.23.0)",
    "six (<2.0,>=1.6.1)"
  ],
  "requires_python": "",
  "current_version": "1.6.3",
  "released_versions": [
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.3.0",
    "1.4.0",
    "1.5.0",
    "1.6.0",
    "1.6.1",
    "1.6.2",
    "1.6.3"
  ]
}