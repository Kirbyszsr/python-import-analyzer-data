{
  "name": "attrs",
  "description": "======================================\n``attrs``: Classes Without Boilerplate\n======================================\n\n\n``attrs`` is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka `dunder <https://nedbatchelder.com/blog/200605/dunder.html>`_ methods).\n`Trusted by NASA <https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-badge>`_ for Mars missions since 2020!\n\nIts main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n.. teaser-end\n\nFor that, it gives you a class decorator and a way to declaratively define the attributes on that class:\n\n.. -code-begin-\n\n.. code-block:: pycon\n\n   >>> import attr\n\n   >>> @attr.s\n   ... class SomeClass(object):\n   ...     a_number = attr.ib(default=42)\n   ...     list_of_numbers = attr.ib(factory=list)\n   ...\n   ...     def hard_math(self, another_number):\n   ...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n   >>> sc = SomeClass(1, [1, 2, 3])\n   >>> sc\n   SomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n   >>> sc.hard_math(3)\n   19\n   >>> sc == SomeClass(1, [1, 2, 3])\n   True\n   >>> sc != SomeClass(2, [3, 2, 1])\n   True\n\n   >>> attr.asdict(sc)\n   {'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n   >>> SomeClass()\n   SomeClass(a_number=42, list_of_numbers=[])\n\n   >>> C = attr.make_class(\"C\", [\"a\", \"b\"])\n   >>> C(\"foo\", \"bar\")\n   C(a='foo', b='bar')\n\n\nAfter *declaring* your attributes ``attrs`` gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable ``__repr__``,\n- a complete set of comparison methods (equality and ordering),\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\nOn Python 3.6 and later, you can often even drop the calls to ``attr.ib()`` by using `type annotations <https://www.attrs.org/en/latest/types.html>`_.\n\nThis gives you the power to use actual classes with actual types in your code instead of confusing ``tuple``\\ s or `confusingly behaving <https://www.attrs.org/en/stable/why.html#namedtuples>`_ ``namedtuple``\\ s.\nWhich in turn encourages you to write *small classes* that do `one thing well <https://www.destroyallsoftware.com/talks/boundaries>`_.\nNever again violate the `single responsibility principle <https://en.wikipedia.org/wiki/Single_responsibility_principle>`_ just because implementing ``__init__`` et al is a painful drag.\n\n\n.. -getting-help-\n\nGetting Help\n============\n\nPlease use the ``python-attrs`` tag on `StackOverflow <https://stackoverflow.com/questions/tagged/python-attrs>`_ to get help.\n\nAnswering questions of your fellow developers is also a great way to help the project!\n\n\n.. -project-information-\n\nProject Information\n===================\n\n``attrs`` is released under the `MIT <https://choosealicense.com/licenses/mit/>`_ license,\nits documentation lives at `Read the Docs <https://www.attrs.org/>`_,\nthe code on `GitHub <https://github.com/python-attrs/attrs>`_,\nand the latest release on `PyPI <https://pypi.org/project/attrs/>`_.\nIt\u2019s rigorously tested on Python 2.7, 3.5+, and PyPy.\n\nWe collect information on **third-party extensions** in our `wiki <https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs>`_.\nFeel free to browse and add your own!\n\nIf you'd like to contribute to ``attrs`` you're most welcome and we've written `a little guide <https://www.attrs.org/en/latest/contributing.html>`_ to get you started!\n\n\n``attrs`` for Enterprise\n------------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of ``attrs`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\n\nRelease Information\n===================\n\n21.2.0 (2021-05-07)\n-------------------\n\nBackward-incompatible Changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- We had to revert the recursive feature for ``attr.evolve()`` because it broke some use-cases -- sorry!\n  `#806 <https://github.com/python-attrs/attrs/issues/806>`_\n- Python 3.4 is now blocked using packaging metadata because ``attrs`` can't be imported on it anymore.\n  To ensure that 3.4 users can keep installing  ``attrs`` easily, we will `yank <https://pypi.org/help/#yanked>`_ 21.1.0 from PyPI.\n  This has **no** consequences if you pin ``attrs`` to 21.1.0.\n  `#807 <https://github.com/python-attrs/attrs/issues/807>`_\n\n`Full changelog <https://www.attrs.org/en/stable/changelog.html>`_.\n\nCredits\n=======\n\n``attrs`` is written and maintained by `Hynek Schlawack <https://hynek.me/>`_.\n\nThe development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nA full list of contributors can be found in `GitHub's overview <https://github.com/python-attrs/attrs/graphs/contributors>`_.\n\nIt\u2019s the spiritual successor of `characteristic <https://characteristic.readthedocs.io/>`_ and aspires to fix some of it clunkiness and unfortunate decisions.\nBoth were inspired by Twisted\u2019s `FancyEqMixin <https://twistedmatrix.com/documents/current/api/twisted.python.util.FancyEqMixin.html>`_ but both are implemented using class decorators because `subclassing is bad for you <https://www.youtube.com/watch?v=3MNVP9-hglc>`_, m\u2019kay?\n\n\n",
  "requires_dist": [
    "coverage[toml] (>=5.0.2) ; extra == 'dev'",
    "hypothesis ; extra == 'dev'",
    "pympler ; extra == 'dev'",
    "pytest (>=4.3.0) ; extra == 'dev'",
    "six ; extra == 'dev'",
    "mypy ; extra == 'dev'",
    "pytest-mypy-plugins ; extra == 'dev'",
    "zope.interface ; extra == 'dev'",
    "furo ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "sphinx-notfound-page ; extra == 'dev'",
    "pre-commit ; extra == 'dev'",
    "furo ; extra == 'docs'",
    "sphinx ; extra == 'docs'",
    "zope.interface ; extra == 'docs'",
    "sphinx-notfound-page ; extra == 'docs'",
    "coverage[toml] (>=5.0.2) ; extra == 'tests'",
    "hypothesis ; extra == 'tests'",
    "pympler ; extra == 'tests'",
    "pytest (>=4.3.0) ; extra == 'tests'",
    "six ; extra == 'tests'",
    "mypy ; extra == 'tests'",
    "pytest-mypy-plugins ; extra == 'tests'",
    "zope.interface ; extra == 'tests'",
    "coverage[toml] (>=5.0.2) ; extra == 'tests_no_zope'",
    "hypothesis ; extra == 'tests_no_zope'",
    "pympler ; extra == 'tests_no_zope'",
    "pytest (>=4.3.0) ; extra == 'tests_no_zope'",
    "six ; extra == 'tests_no_zope'",
    "mypy ; extra == 'tests_no_zope'",
    "pytest-mypy-plugins ; extra == 'tests_no_zope'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
  "current_version": "21.2.0",
  "released_versions": [
    "15.0.0",
    "15.0.0a1",
    "15.1.0",
    "15.2.0",
    "16.0.0",
    "16.1.0",
    "16.2.0",
    "16.3.0",
    "17.1.0",
    "17.2.0",
    "17.3.0",
    "17.4.0",
    "18.1.0",
    "18.2.0",
    "19.1.0",
    "19.2.0",
    "19.3.0",
    "20.1.0",
    "20.2.0",
    "20.3.0",
    "21.1.0",
    "21.2.0"
  ]
}