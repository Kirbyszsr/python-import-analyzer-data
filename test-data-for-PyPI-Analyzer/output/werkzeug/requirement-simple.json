{
  "name": "Werkzeug",
  "description": "Werkzeug\n========\n\n*werkzeug* German noun: \"tool\". Etymology: *werk* (\"work\"), *zeug* (\"stuff\")\n\nWerkzeug is a comprehensive `WSGI`_ web application library. It began as\na simple collection of various utilities for WSGI applications and has\nbecome one of the most advanced WSGI utility libraries.\n\nIt includes:\n\n-   An interactive debugger that allows inspecting stack traces and\n    source code in the browser with an interactive interpreter for any\n    frame in the stack.\n-   A full-featured request object with objects to interact with\n    headers, query args, form data, files, and cookies.\n-   A response object that can wrap other WSGI applications and handle\n    streaming data.\n-   A routing system for matching URLs to endpoints and generating URLs\n    for endpoints, with an extensible system for capturing variables\n    from URLs.\n-   HTTP utilities to handle entity tags, cache control, dates, user\n    agents, cookies, files, and more.\n-   A threaded WSGI server for use while developing applications\n    locally.\n-   A test client for simulating HTTP requests during testing without\n    requiring running a server.\n\nWerkzeug is Unicode aware and doesn't enforce any dependencies. It is up\nto the developer to choose a template engine, database adapter, and even\nhow to handle requests. It can be used to build all sorts of end user\napplications such as blogs, wikis, or bulletin boards.\n\n`Flask`_ wraps Werkzeug, using it to handle the details of WSGI while\nproviding more structure and patterns for defining powerful\napplications.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    pip install -U Werkzeug\n\n\nA Simple Example\n----------------\n\n.. code-block:: python\n\n    from werkzeug.wrappers import Request, Response\n\n    @Request.application\n    def application(request):\n        return Response('Hello, World!')\n\n    if __name__ == '__main__':\n        from werkzeug.serving import run_simple\n        run_simple('localhost', 4000, application)\n\n\nLinks\n-----\n\n-   Website: https://palletsprojects.com/p/werkzeug/\n-   Documentation: https://werkzeug.palletsprojects.com/\n-   Releases: https://pypi.org/project/Werkzeug/\n-   Code: https://github.com/pallets/werkzeug\n-   Issue tracker: https://github.com/pallets/werkzeug/issues\n-   Test status: https://dev.azure.com/pallets/werkzeug/_build\n-   Official chat: https://discord.gg/t6rrQZH\n\n.. _WSGI: https://wsgi.readthedocs.io/en/latest/\n.. _Flask: https://www.palletsprojects.com/p/flask/\n.. _pip: https://pip.pypa.io/en/stable/quickstart/\n\n\n",
  "requires_dist": [
    "pytest ; extra == 'dev'",
    "pytest-timeout ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "sphinx ; extra == 'dev'",
    "pallets-sphinx-themes ; extra == 'dev'",
    "sphinx-issues ; extra == 'dev'",
    "watchdog ; extra == 'watchdog'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
  "current_version": "1.0.1",
  "released_versions": [
    "0.1",
    "0.10",
    "0.10.1",
    "0.10.2",
    "0.10.3",
    "0.10.4",
    "0.11",
    "0.11.1",
    "0.11.10",
    "0.11.11",
    "0.11.12",
    "0.11.13",
    "0.11.14",
    "0.11.15",
    "0.11.2",
    "0.11.3",
    "0.11.4",
    "0.11.5",
    "0.11.6",
    "0.11.7",
    "0.11.8",
    "0.11.9",
    "0.12",
    "0.12.1",
    "0.12.2",
    "0.13",
    "0.14",
    "0.14.1",
    "0.15.0",
    "0.15.1",
    "0.15.2",
    "0.15.3",
    "0.15.4",
    "0.15.5",
    "0.15.6",
    "0.16.0",
    "0.16.1",
    "0.2",
    "0.3",
    "0.3.1",
    "0.4",
    "0.4.1",
    "0.5",
    "0.5.1",
    "0.6",
    "0.6.1",
    "0.6.2",
    "0.7",
    "0.7.1",
    "0.7.2",
    "0.8",
    "0.8.1",
    "0.8.2",
    "0.8.3",
    "0.9",
    "0.9.1",
    "0.9.2",
    "0.9.3",
    "0.9.4",
    "0.9.5",
    "0.9.6",
    "1.0.0",
    "1.0.0rc1",
    "1.0.1",
    "2.0.0rc1",
    "2.0.0rc2",
    "2.0.0rc3",
    "2.0.0rc4",
    "2.0.0rc5"
  ]
}