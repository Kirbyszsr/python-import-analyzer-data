{
  "name": "cftime",
  "description": "# cftime\nTime-handling functionality from netcdf4-python\n\n[![Build status](https://github.com/Unidata/cftime/workflows/cftime%20test/badge.svg)](https://github.com/Unidata/cftime/actions)\n[![PyPI package](https://badge.fury.io/py/cftime.svg)](http://python.org/pypi/cftime)\n[![Coverage Status](https://coveralls.io/repos/github/Unidata/cftime/badge.svg?branch=master)](https://coveralls.io/github/Unidata/cftime?branch=master)\n[![Tag Status](https://img.shields.io/github/tag/UniData/cftime.svg)](https://github.com/Unidata/cftime/tags)\n[![Release Status](https://img.shields.io/github/release/UniData/cftime.svg)](https://github.com/Unidata/cftime/releases)\n[![Commits Status](https://img.shields.io/github/commits-since/UniData/cftime/latest.svg)](https://github.com/UniData/cftime/commits/master)\n\n## News\nFor details on the latest updates, see the [Changelog](https://github.com/Unidata/cftime/blob/master/Changelog).\n\n2/2/2021:  Version 1.4.1 released. Restore use of calendar-specific subclasses\nin `cftime.num2date`, `cftime.datetime.__add__`, and `cftime.datetime.__sub__`.\nThe use of this will be removed in a later release.\nAdd 'fromordinal' static method to create a cftime.datetime instance\nfrom a julian day ordinal and calendar (inverse of 'toordinal').\n\n2/1/2021:  Version 1.4.0 released.  License changed to MIT (GPL'ed code replaced).\nRoundtrip accuracy improved for units other than microseconds. Added \ncftime.datetime.toordinal method, returns integer julian day number.\n\n1/17/2021: Version 1.3.1 released.\n\n11/16/2020:  Version 1.3.0 released. **API change**: The `cftime.datetime` constructor now creates \n 'calendar-aware' instances (default is `'standard'` calendar, if `calendar=''` or `None` the instance\n is not calendar aware and some methods, like `dayofwk`, `dayofyr`, `__add__` and `__sub__`, will not work)\n See discussion for issue [#198](https://github.com/Unidata/cftime/issues/198).\n The calendar specific sub-classes are now deprecated, but remain for now\n as stubs that just instantiate the base class and override `__repr__`.\n The default calendar in `cftime.date2num` has been changed from `'standard'` to `None`\n (the calendar associated with first input datetime object is used to define the calendar).\n\n07/20/2020: Version 1.2.1 released.  Fixes a couple of regressions introduced in 1.2.0. See Changelog for details.\n\n7/06/2020:  version 1.2.0 released. New microsecond accurate algorithm for date2num/num2date contributed by [spencerkclark](https://github.com/spencerkclark). Bugs fixed in masked array handling.\n\n5/12/2020:  version 1.1.3 released.  Add isoformat method for compatibility with python datetime (issue #152).\n Make 'standard' default calendar for cftime.datetime so that dayofwk,dayofyr methods don't fail (issue #169).\n\n4/20/2020:  version 1.1.2 released.  Code optimization, fix logic so `only_use_cftime_datetimes=False` works as \n expected (issues [#158](https://github.com/Unidata/cftime/issues/158) and [#165](https://github.com/Unidata/cftime/issues/165)).\n\n3/16/2020:  version 1.1.1 released.  Fix bug in microsecond formatting, ensure identical num2date results if input is an array of times, or a single scalar ([issue #143](https://github.com/Unidata/cftime/issues/143)).\n\n2/12/2020:  version 1.1.0 released.  `cftime.datetime` instances are returned by default from `num2date`\n(instead of returning python datetime instances where possible ([issue #136](https://github.com/Unidata/cftime/issues/136))).  `num2pydate`\nconvenience function added (always returns python datetime instances, [issue #134](https://github.com/Unidata/cftime/issues/134)). Fix for\nfraction seconds in reference date string ([issue #140](https://github.com/Unidata/cftime/issues/140)). Added `daysinmonth` attribute \n([issue #137](https://github.com/Unidata/cftime/issues/137)).\n\n10/25/2019:  version 1.0.4.2 released (fix for [issue #126](https://github.com/Unidata/cftime/issues/126)).\n\n10/21/2019:  version 1.0.4 released.\n\n12/05/2018:  version 1.0.3.4 released (just to fix a problem with the source \ntarball on pypi).\n\n12/05/2018:  version 1.0.3.1 released.  Bugfix release (fixed issue with installation\nwhen cython not installed, regression on 32-bit platforms, workaround for pandas \ncompatibility).\n\n12/01/2018:  version 1.0.3 released. Test coverage with coveralls.io, improved round-tripping accuracy for non-real world calendars (like `360_day`).\n\n10/27/2018:  version 1.0.2 released. Improved accuracy (from approximately 1000 microseconds to 10 microseconds on x86\nplatforms). Refactored calendar calculations now allow for negative reference years. num2date function now more than an\norder of magnitude faster. `months since` units now allowed, but only for `360_day` calendar.\n\n08/15/2018:  version 1.0.1 released.\n\n11/8/2016: `cftime` was split out of the [netcdf4-python](https://github.com/Unidata/netcdf4-python) package.\n\n## Quick Start\n* Clone GitHub repository (`git clone https://github.com/Unidata/cftime.git`), or get source tarball from [PyPI](https://pypi.python.org/pypi/cftime). Links to Windows and OS X precompiled binary packages are also available on [PyPI](https://pypi.python.org/pypi/cftime).\n\n* Make sure [numpy](http://www.numpy.org/) and [Cython](http://cython.org/) are\n  installed and you have [Python](https://www.python.org) 2.7 or newer.\n\n* Run `python setup.py build`, then `python setup.py install` (with `sudo` if necessary).\n\n* To run all the tests, execute `py.test`.\n\n## Documentation\nSee the online [docs](http://unidata.github.io/cftime) for more details.\n\n\n",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": "",
  "current_version": "1.4.1",
  "released_versions": [
    "1.0.0",
    "1.0.0a2",
    "1.0.0a3",
    "1.0.0b1",
    "1.0.1",
    "1.0.2",
    "1.0.2.1",
    "1.0.3",
    "1.0.3.1",
    "1.0.3.3",
    "1.0.3.4",
    "1.0.4",
    "1.0.4.2",
    "1.1.0",
    "1.1.1",
    "1.1.1.1",
    "1.1.1.2",
    "1.1.2",
    "1.1.3",
    "1.2.0",
    "1.2.1",
    "1.3.0",
    "1.3.1",
    "1.4.0",
    "1.4.1"
  ]
}