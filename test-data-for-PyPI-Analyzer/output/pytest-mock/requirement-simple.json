{
  "name": "pytest-mock",
  "description": "===========\npytest-mock\n===========\n\nThis plugin provides a ``mocker`` fixture which is a thin-wrapper around the patching API\nprovided by the `mock package <http://pypi.python.org/pypi/mock>`_:\n\n.. code-block:: python\n\n    import os\n\n    class UnixFS:\n\n        @staticmethod\n        def rm(filename):\n            os.remove(filename)\n\n    def test_unix_fs(mocker):\n        mocker.patch('os.remove')\n        UnixFS.rm('file')\n        os.remove.assert_called_once_with('file')\n\n\nBesides undoing the mocking automatically after the end of the test, it also provides other\nnice utilities such as ``spy`` and ``stub``, and uses pytest introspection when\ncomparing calls.\n\n|python| |version| |anaconda| |ci| |coverage| |black| |pre-commit|\n\n.. |version| image:: http://img.shields.io/pypi/v/pytest-mock.svg\n  :target: https://pypi.python.org/pypi/pytest-mock\n\n.. |anaconda| image:: https://img.shields.io/conda/vn/conda-forge/pytest-mock.svg\n    :target: https://anaconda.org/conda-forge/pytest-mock\n\n.. |ci| image:: https://github.com/pytest-dev/pytest-mock/workflows/build/badge.svg\n  :target: https://github.com/pytest-dev/pytest-mock/actions\n\n.. |coverage| image:: https://coveralls.io/repos/github/pytest-dev/pytest-mock/badge.svg?branch=master\n  :target: https://coveralls.io/github/pytest-dev/pytest-mock?branch=master\n\n.. |python| image:: https://img.shields.io/pypi/pyversions/pytest-mock.svg\n  :target: https://pypi.python.org/pypi/pytest-mock/\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n  :target: https://github.com/ambv/black\n\n.. |pre-commit| image:: https://results.pre-commit.ci/badge/github/pytest-dev/pytest-mock/master.svg\n   :target: https://results.pre-commit.ci/latest/github/pytest-dev/pytest-mock/master\n\n`Professionally supported pytest-mock is now available <https://tidelift.com/subscription/pkg/pypi-pytest_mock?utm_source=pypi-pytest-mock&utm_medium=referral&utm_campaign=readme>`_\n\nUsage\n=====\n\nThe ``mocker`` fixture has the same API as\n`mock.patch <https://docs.python.org/3/library/unittest.mock.html#patch>`_,\nsupporting the same arguments:\n\n.. code-block:: python\n\n    def test_foo(mocker):\n        # all valid calls\n        mocker.patch('os.remove')\n        mocker.patch.object(os, 'listdir', autospec=True)\n        mocked_isfile = mocker.patch('os.path.isfile')\n\nThe supported methods are:\n\n* `mocker.patch <https://docs.python.org/3/library/unittest.mock.html#patch>`_\n* `mocker.patch.object <https://docs.python.org/3/library/unittest.mock.html#patch-object>`_\n* `mocker.patch.multiple <https://docs.python.org/3/library/unittest.mock.html#patch-multiple>`_\n* `mocker.patch.dict <https://docs.python.org/3/library/unittest.mock.html#patch-dict>`_\n* `mocker.stopall <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.stopall>`_\n* ``mocker.resetall()``: calls `reset_mock() <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.reset_mock>`_ in all mocked objects up to this point.\n\nAlso, as a convenience, these names from the ``mock`` module are accessible directly from ``mocker``:\n\n* `Mock <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock>`_\n* `MagicMock <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock>`_\n* `PropertyMock <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock>`_\n* `ANY <https://docs.python.org/3/library/unittest.mock.html#any>`_\n* `DEFAULT <https://docs.python.org/3/library/unittest.mock.html#default>`_ *(Version 1.4)*\n* `call <https://docs.python.org/3/library/unittest.mock.html#call>`_ *(Version 1.1)*\n* `sentinel <https://docs.python.org/3/library/unittest.mock.html#sentinel>`_ *(Version 1.2)*\n* `mock_open <https://docs.python.org/3/library/unittest.mock.html#mock-open>`_\n* `seal <https://docs.python.org/3/library/unittest.mock.html#unittest.mock.seal>`_ *(Version 3.4)*\n\nIt is also possible to use mocking functionality from fixtures of other scopes using\nthe appropriate mock fixture:\n\n* ``class_mocker``\n* ``module_mocker``\n* ``package_mocker``\n* ``session_mocker``\n\nType Annotations\n----------------\n\n*New in version 3.3.0.*\n\n``pytest-mock`` is fully type annotated, letting users use static type checkers to\ntest their code.\n\nThe ``mocker`` fixture returns ``pytest_mock.MockerFixture`` which can be used\nto annotate test functions:\n\n.. code-block:: python\n\n    from pytest_mock import MockerFixture\n\n    def test_foo(mocker: MockerFixture) -> None:\n        ...\n\nThe type annotations have been checked with ``mypy``, which is the only\ntype checker supported at the moment; other type-checkers might work\nbut are not currently tested.\n\nSpy\n---\n\nThe ``mocker.spy`` object acts exactly like the original method in all cases, except the spy\nalso tracks function/method calls, return values and exceptions raised.\n\n.. code-block:: python\n\n    def test_spy_method(mocker):\n        class Foo(object):\n            def bar(self, v):\n                return v * 2\n\n        foo = Foo()\n        spy = mocker.spy(foo, 'bar')\n        assert foo.bar(21) == 42\n\n        spy.assert_called_once_with(21)\n        assert spy.spy_return == 42\n\n    def test_spy_function(mocker):\n        # mymodule declares `myfunction` which just returns 42\n        import mymodule\n\n        spy = mocker.spy(mymodule, \"myfunction\")\n        assert mymodule.myfunction() == 42\n        assert spy.call_count == 1\n        assert spy.spy_return == 42\n\nThe object returned by ``mocker.spy`` is a ``MagicMock`` object, so all standard checking functions\nare available (like ``assert_called_once_with`` or ``call_count`` in the examples above).\n\nIn addition, spy objects contain two extra attributes:\n\n* ``spy_return``: contains the returned value of the spied function.\n* ``spy_exception``: contain the last exception value raised by the spied function/method when\n  it was last called, or ``None`` if no exception was raised.\n\nBesides functions and normal methods, ``mocker.spy`` also works for class and static methods.\n\nAs of version 3.0.0, ``mocker.spy`` also works with ``async def`` functions.\n\n.. note::\n\n    In versions earlier than ``2.0``, the attributes were called ``return_value`` and\n    ``side_effect`` respectively, but due to incompatibilities with ``unittest.mock``\n    they had to be renamed (see `#175`_ for details).\n\n    .. _#175: https://github.com/pytest-dev/pytest-mock/issues/175\n\nStub\n----\n\nThe stub is a mock object that accepts any arguments and is useful to test callbacks.\nIt may receive an optional name that is shown in its ``repr``, useful for debugging.\n\n.. code-block:: python\n\n    def test_stub(mocker):\n        def foo(on_something):\n            on_something('foo', 'bar')\n\n        stub = mocker.stub(name='on_something_stub')\n\n        foo(stub)\n        stub.assert_called_once_with('foo', 'bar')\n\n\nImproved reporting of mock call assertion errors\n------------------------------------------------\n\nThis plugin monkeypatches the mock library to improve pytest output for failures\nof mock call assertions like ``Mock.assert_called_with()`` by hiding internal traceback\nentries from the ``mock`` module.\n\nIt also adds introspection information on differing call arguments when\ncalling the helper methods. This features catches `AssertionError` raised in\nthe method, and uses pytest's own `advanced assertions`_ to return a better\ndiff::\n\n\n    mocker = <pytest_mock.MockerFixture object at 0x0381E2D0>\n\n        def test(mocker):\n            m = mocker.Mock()\n            m('fo')\n    >       m.assert_called_once_with('', bar=4)\n    E       AssertionError: Expected call: mock('', bar=4)\n    E       Actual call: mock('fo')\n    E\n    E       pytest introspection follows:\n    E\n    E       Args:\n    E       assert ('fo',) == ('',)\n    E         At index 0 diff: 'fo' != ''\n    E         Use -v to get the full diff\n    E       Kwargs:\n    E       assert {} == {'bar': 4}\n    E         Right contains more items:\n    E         {'bar': 4}\n    E         Use -v to get the full diff\n\n\n    test_foo.py:6: AssertionError\n    ========================== 1 failed in 0.03 seconds ===========================\n\n\nThis is useful when asserting mock calls with many/nested arguments and trying\nto quickly see the difference.\n\nThis feature is probably safe, but if you encounter any problems it can be disabled in\nyour ``pytest.ini`` file:\n\n.. code-block:: ini\n\n    [pytest]\n    mock_traceback_monkeypatch = false\n\nNote that this feature is automatically disabled with the ``--tb=native`` option. The underlying\nmechanism used to suppress traceback entries from ``mock`` module does not work with that option\nanyway plus it generates confusing messages on Python 3.5 due to exception chaining\n\n.. _advanced assertions: http://docs.pytest.org/en/stable/assert.html\n\n\nUse standalone \"mock\" package\n-----------------------------\n\n*New in version 1.4.0.*\n\nPython 3 users might want to use a newest version of the ``mock`` package as published on PyPI\nthan the one that comes with the Python distribution.\n\n.. code-block:: ini\n\n    [pytest]\n    mock_use_standalone_module = true\n\nThis will force the plugin to import ``mock`` instead of the ``unittest.mock`` module bundled with\nPython 3.4+. Note that this option is only used in Python 3+, as Python 2 users only have the option\nto use the ``mock`` package from PyPI anyway.\n\nNote about usage as context manager\n-----------------------------------\n\nAlthough mocker's API is intentionally the same as ``mock.patch``'s, its use\nas context manager and function decorator is **not** supported through the\nfixture:\n\n.. code-block:: python\n\n    def test_context_manager(mocker):\n        a = A()\n        with mocker.patch.object(a, 'doIt', return_value=True, autospec=True):  # DO NOT DO THIS\n            assert a.doIt() == True\n\nThe purpose of this plugin is to make the use of context managers and\nfunction decorators for mocking unnecessary, so it will emit a warning when used as such.\n\nIf you really intend to mock a context manager, ``mocker.patch.context_manager`` exists\nwhich won't issue the above warning.\n\n\nInstall\n=======\n\nInstall using `pip <http://pip-installer.org/>`_:\n\n.. code-block:: console\n\n    $ pip install pytest-mock\n\nChangelog\n=========\n\nPlease consult the `changelog page`_.\n\n.. _changelog page: https://github.com/pytest-dev/pytest-mock/blob/master/CHANGELOG.rst\n\nWhy bother with a plugin?\n=========================\n\nThere are a number of different ``patch`` usages in the standard ``mock`` API,\nbut IMHO they don't scale very well when you have more than one or two\npatches to apply.\n\nIt may lead to an excessive nesting of ``with`` statements, breaking the flow\nof the test:\n\n.. code-block:: python\n\n    import mock\n\n    def test_unix_fs():\n        with mock.patch('os.remove'):\n            UnixFS.rm('file')\n            os.remove.assert_called_once_with('file')\n\n            with mock.patch('os.listdir'):\n                assert UnixFS.ls('dir') == expected\n                # ...\n\n        with mock.patch('shutil.copy'):\n            UnixFS.cp('src', 'dst')\n            # ...\n\n\nOne can use ``patch`` as a decorator to improve the flow of the test:\n\n.. code-block:: python\n\n    @mock.patch('os.remove')\n    @mock.patch('os.listdir')\n    @mock.patch('shutil.copy')\n    def test_unix_fs(mocked_copy, mocked_listdir, mocked_remove):\n        UnixFS.rm('file')\n        os.remove.assert_called_once_with('file')\n\n        assert UnixFS.ls('dir') == expected\n        # ...\n\n        UnixFS.cp('src', 'dst')\n        # ...\n\nBut this poses a few disadvantages:\n\n- test functions must receive the mock objects as parameter, even if you don't plan to\n  access them directly; also, order depends on the order of the decorated ``patch``\n  functions;\n- receiving the mocks as parameters doesn't mix nicely with pytest's approach of\n  naming fixtures as parameters, or ``pytest.mark.parametrize``;\n- you can't easily undo the mocking during the test execution;\n\nAn alternative is to use ``contextlib.ExitStack`` to stack the context managers in a single level of indentation\nto improve the flow of the test:\n\n.. code-block:: python\n\n    import contextlib\n    import mock\n\n    def test_unix_fs():\n        with contextlib.ExitStack() as stack:\n            stack.enter_context(mock.patch('os.remove'))\n            UnixFS.rm('file')\n            os.remove.assert_called_once_with('file')\n\n            stack.enter_context(mock.patch('os.listdir'))\n            assert UnixFS.ls('dir') == expected\n            # ...\n\n            stack.enter_context(mock.patch('shutil.copy'))\n            UnixFS.cp('src', 'dst')\n            # ...\n\nBut this is arguably a little more complex than using ``pytest-mock``.\n\nContributing\n============\n\nContributions are welcome! After cloning the repository, create a virtual env\nand install ``pytest-mock`` in editable mode with ``dev`` extras:\n\n.. code-block:: console\n\n    $ pip install --editable .[dev]\n    $ pre-commit install\n\nTests are run with ``tox``, you can run the baseline environments before submitting a PR:\n\n.. code-block:: console\n\n    $ tox -e py38,linting\n\nStyle checks and formatting are done automatically during commit courtesy of\n`pre-commit <https://pre-commit.com>`_.\n\nLicense\n=======\n\nDistributed under the terms of the `MIT`_ license.\n\nSecurity contact information\n============================\n\nTo report a security vulnerability, please use the `Tidelift security contact <https://tidelift.com/security>`__. Tidelift will coordinate the fix and disclosure.\n\n.. _MIT: https://github.com/pytest-dev/pytest-mock/blob/master/LICENSE\n\n\n",
  "requires_dist": [
    "pytest (>=5.0)",
    "pre-commit ; extra == 'dev'",
    "tox ; extra == 'dev'",
    "pytest-asyncio ; extra == 'dev'"
  ],
  "requires_python": ">=3.6",
  "current_version": "3.6.1",
  "released_versions": [
    "0.1.0",
    "0.10.0",
    "0.10.1",
    "0.11.0",
    "0.2.0",
    "0.3.0",
    "0.4.0",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.5.0",
    "0.6.0",
    "0.7.0",
    "0.8.1",
    "0.9.0",
    "1.0",
    "1.1",
    "1.10.0",
    "1.10.1",
    "1.10.2",
    "1.10.3",
    "1.10.4",
    "1.11.0",
    "1.11.1",
    "1.11.2",
    "1.12.0",
    "1.12.1",
    "1.13.0",
    "1.2",
    "1.3.0",
    "1.4.0",
    "1.5.0",
    "1.6.0",
    "1.6.1",
    "1.6.2",
    "1.6.3",
    "1.7.0",
    "1.7.1",
    "1.8.0",
    "1.9.0",
    "2.0.0",
    "3.0.0",
    "3.1.0",
    "3.1.1",
    "3.2.0",
    "3.3.0",
    "3.3.1",
    "3.4.0",
    "3.5.0",
    "3.5.1",
    "3.6.0",
    "3.6.1"
  ]
}