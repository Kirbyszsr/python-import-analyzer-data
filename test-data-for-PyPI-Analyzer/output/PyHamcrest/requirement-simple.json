{
  "name": "PyHamcrest",
  "description": "PyHamcrest\n==========\n\n| |docs| |travis| |coveralls| |landscape| |scrutinizer|\n| |version| |downloads| |wheel| |supported-versions| |supported-implementations|\n| |GitHub forks| |GitHub stars| |GitHub watchers| |GitHub contributors| |Lines of Code|\n| |GitHub issues| |GitHub issues-closed| |GitHub pull-requests| |GitHub pull-requests closed|\n\n.. |docs| image:: https://readthedocs.org/projects/pyhamcrest/badge/\n    :target: https://pyhamcrest.readthedocs.org/\n    :alt: Documentation Status\n\n.. |travis| image:: http://img.shields.io/travis/hamcrest/PyHamcrest/master.svg\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/hamcrest/PyHamcrest\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/hamcrest/PyHamcrest?branch=master&svg=true\n    :alt: AppVeyor Build Status\n    :target: https://ci.appveyor.com/project/hamcrest/PyHamcrest\n\n.. |coveralls| image:: http://img.shields.io/coveralls/hamcrest/PyHamcrest/master.svg?style=flat\n    :alt: Coverage Status\n    :target: https://coveralls.io/r/hamcrest/PyHamcrest\n\n.. |landscape| image:: https://landscape.io/github/hamcrest/PyHamcrest/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/hamcrest/PyHamcrest/master\n    :alt: Code Quality Status\n\n.. |version| image:: http://img.shields.io/pypi/v/PyHamcrest.svg?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/PyHamcrest\n\n.. |downloads| image:: http://img.shields.io/pypi/dm/PyHamcrest.svg?style=flat\n    :alt: PyPI Package monthly downloads\n    :target: https://pypi.python.org/pypi/PyHamcrest\n\n.. |wheel| image:: https://pypip.in/wheel/PyHamcrest/badge.svg?style=flat\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/PyHamcrest\n\n.. |supported-versions| image:: https://pypip.in/py_versions/PyHamcrest/badge.svg?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/PyHamcrest\n\n.. |GitHub forks| image:: https://img.shields.io/github/forks/hamcrest/PyHamcrest.svg?label=Fork&logo=github\n    :alt: GitHub forks\n    :target: https://github.com/hamcrest/PyHamcrest/network/members\n\n.. |GitHub stars| image:: https://img.shields.io/github/stars/hamcrest/PyHamcrest.svg?label=Star&logo=github\n    :alt: GitHub stars\n    :target: https://github.com/hamcrest/PyHamcrest/stargazers/\n\n.. |GitHub watchers| image:: https://img.shields.io/github/watchers/hamcrest/PyHamcrest.svg?label=Watch&logo=github\n    :alt: GitHub watchers\n    :target: https://github.com/hamcrest/PyHamcrest/watchers/\n\n.. |GitHub contributors| image:: https://img.shields.io/github/contributors/hamcrest/PyHamcrest.svg?logo=github\n    :alt: GitHub contributors\n    :target: https://github.com/hamcrest/PyHamcrest/graphs/contributors/\n\n.. |GitHub issues| image:: https://img.shields.io/github/issues/hamcrest/PyHamcrest.svg?logo=github\n    :alt: GitHub issues\n    :target: https://github.com/hamcrest/PyHamcrest/issues/\n\n.. |GitHub issues-closed| image:: https://img.shields.io/github/issues-closed/hamcrest/PyHamcrest.svg?logo=github\n    :alt: GitHub issues-closed\n    :target: https://github.com/hamcrest/PyHamcrest/issues?q=is%3Aissue+is%3Aclosed\n\n.. |GitHub pull-requests| image:: https://img.shields.io/github/issues-pr/hamcrest/PyHamcrest.svg?logo=github\n    :alt: GitHub pull-requests\n    :target: https://github.com/hamcrest/PyHamcrest/pulls\n\n.. |GitHub pull-requests closed| image:: https://img.shields.io/github/issues-pr-closed/hamcrest/PyHamcrest.svg?logo=github\n    :alt: GitHub pull-requests closed\n    :target: https://github.com/hamcrest/PyHamcrest/pulls?utf8=%E2%9C%93&q=is%3Apr+is%3Aclosed\n\n.. |Lines of Code| image:: https://tokei.rs/b1/github/hamcrest/PyHamcrest\n    :alt: Lines of Code\n    :target: https://github.com/hamcrest/PyHamcrest\n\n.. |supported-implementations| image:: https://pypip.in/implementation/PyHamcrest/badge.svg?style=flat\n    :alt: Supported implementations\n    :target: https://pypi.python.org/pypi/PyHamcrest\n\n.. |scrutinizer| image:: https://img.shields.io/scrutinizer/g/hamcrest/PyHamcrest/master.svg?style=flat\n    :alt: Scrtinizer Status\n    :target: https://scrutinizer-ci.com/g/hamcrest/PyHamcrest/\n\n\nIntroduction\n============\n\nPyHamcrest is a framework for writing matcher objects, allowing you to\ndeclaratively define \"match\" rules. There are a number of situations where\nmatchers are invaluable, such as UI validation, or data filtering, but it is in\nthe area of writing flexible tests that matchers are most commonly used. This\ntutorial shows you how to use PyHamcrest for unit testing.\n\nWhen writing tests it is sometimes difficult to get the balance right between\noverspecifying the test (and making it brittle to changes), and not specifying\nenough (making the test less valuable since it continues to pass even when the\nthing being tested is broken). Having a tool that allows you to pick out\nprecisely the aspect under test and describe the values it should have, to a\ncontrolled level of precision, helps greatly in writing tests that are \"just\nright.\" Such tests fail when the behavior of the aspect under test deviates\nfrom the expected behavior, yet continue to pass when minor, unrelated changes\nto the behaviour are made.\n\nInstallation\n============\n\nHamcrest can be installed using the usual Python packaging tools. It depends on\ndistribute, but as long as you have a network connection when you install, the\ninstallation process will take care of that for you.\n\nMy first PyHamcrest test\n========================\n\nWe'll start by writing a very simple PyUnit test, but instead of using PyUnit's\n``assertEqual`` method, we'll use PyHamcrest's ``assert_that`` construct and\nthe standard set of matchers:\n\n.. code:: python\n\n from hamcrest import *\n import unittest\n\n class BiscuitTest(unittest.TestCase):\n     def testEquals(self):\n         theBiscuit = Biscuit('Ginger')\n         myBiscuit = Biscuit('Ginger')\n         assert_that(theBiscuit, equal_to(myBiscuit))\n\n if __name__ == '__main__':\n     unittest.main()\n\nThe ``assert_that`` function is a stylized sentence for making a test\nassertion. In this example, the subject of the assertion is the object\n``theBiscuit``, which is the first method parameter. The second method\nparameter is a matcher for ``Biscuit`` objects, here a matcher that checks one\nobject is equal to another using the Python ``==`` operator. The test passes\nsince the ``Biscuit`` class defines an ``__eq__`` method.\n\nIf you have more than one assertion in your test you can include an identifier\nfor the tested value in the assertion:\n\n.. code:: python\n\n assert_that(theBiscuit.getChocolateChipCount(), equal_to(10), 'chocolate chips')\n assert_that(theBiscuit.getHazelnutCount(), equal_to(3), 'hazelnuts')\n\nAs a convenience, assert_that can also be used to verify a boolean condition:\n\n.. code:: python\n\n assert_that(theBiscuit.isCooked(), 'cooked')\n\nThis is equivalent to the ``assert_`` method of unittest.TestCase, but because\nit's a standalone function, it offers greater flexibility in test writing.\n\n\nPredefined matchers\n===================\n\nPyHamcrest comes with a library of useful matchers:\n\n* Object\n\n  * ``equal_to`` - match equal object\n  * ``has_length`` - match ``len()``\n  * ``has_property`` - match value of property with given name\n  * ``has_properties`` - match an object that has all of the given properties.\n  * ``has_string`` - match ``str()``\n  * ``instance_of`` - match object type\n  * ``none``, ``not_none`` - match ``None``, or not ``None``\n  * ``same_instance`` - match same object\n  * ``calling, raises`` - wrap a method call and assert that it raises an exception\n\n* Number\n\n  * ``close_to`` - match number close to a given value\n  * ``greater_than``, ``greater_than_or_equal_to``, ``less_than``,\n    ``less_than_or_equal_to`` - match numeric ordering\n\n* Text\n\n  * ``contains_string`` - match part of a string\n  * ``ends_with`` - match the end of a string\n  * ``equal_to_ignoring_case`` - match the complete string but ignore case\n  * ``equal_to_ignoring_whitespace`` - match the complete string but ignore extra whitespace\n  * ``matches_regexp`` - match a regular expression in a string\n  * ``starts_with`` - match the beginning of a string\n  * ``string_contains_in_order`` - match parts of a string, in relative order\n\n* Logical\n\n  * ``all_of`` - ``and`` together all matchers\n  * ``any_of`` - ``or`` together all matchers\n  * ``anything`` - match anything, useful in composite matchers when you don't care about a particular value\n  * ``is_not``, ``not_`` - negate the matcher\n\n* Sequence\n\n  * ``contains`` - exactly match the entire sequence\n  * ``contains_inanyorder`` - match the entire sequence, but in any order\n  * ``has_item`` - match if given item appears in the sequence\n  * ``has_items`` - match if all given items appear in the sequence, in any order\n  * ``is_in`` - match if item appears in the given sequence\n  * ``only_contains`` - match if sequence's items appear in given list\n  * ``empty`` - match if the sequence is empty\n\n* Dictionary\n\n  * ``has_entries`` - match dictionary with list of key-value pairs\n  * ``has_entry`` - match dictionary containing a key-value pair\n  * ``has_key`` - match dictionary with a key\n  * ``has_value`` - match dictionary with a value\n\n* Decorator\n\n  * ``calling`` - wrap a callable in a deferred object, for subsequent matching on calling behaviour\n  * ``raises`` - Ensure that a deferred callable raises as expected\n  * ``described_as`` - give the matcher a custom failure description\n  * ``is_`` - decorator to improve readability - see `Syntactic sugar` below\n\nThe arguments for many of these matchers accept not just a matching value, but\nanother matcher, so matchers can be composed for greater flexibility. For\nexample, ``only_contains(less_than(5))`` will match any sequence where every\nitem is less than 5.\n\n\nSyntactic sugar\n===============\n\nPyHamcrest strives to make your tests as readable as possible. For example, the\n``is_`` matcher is a wrapper that doesn't add any extra behavior to the\nunderlying matcher. The following assertions are all equivalent:\n\n.. code:: python\n\n assert_that(theBiscuit, equal_to(myBiscuit))\n assert_that(theBiscuit, is_(equal_to(myBiscuit)))\n assert_that(theBiscuit, is_(myBiscuit))\n\nThe last form is allowed since ``is_(value)`` wraps most non-matcher arguments\nwith ``equal_to``. But if the argument is a type, it is wrapped with\n``instance_of``, so the following are also equivalent:\n\n.. code:: python\n\n assert_that(theBiscuit, instance_of(Biscuit))\n assert_that(theBiscuit, is_(instance_of(Biscuit)))\n assert_that(theBiscuit, is_(Biscuit))\n\n*Note that PyHamcrest's ``is_`` matcher is unrelated to Python's ``is``\noperator. The matcher for object identity is ``same_instance``.*\n\n\nWriting custom matchers\n=======================\n\nPyHamcrest comes bundled with lots of useful matchers, but you'll probably find\nthat you need to create your own from time to time to fit your testing needs.\nThis commonly occurs when you find a fragment of code that tests the same set\nof properties over and over again (and in different tests), and you want to\nbundle the fragment into a single assertion. By writing your own matcher you'll\neliminate code duplication and make your tests more readable!\n\nLet's write our own matcher for testing if a calendar date falls on a Saturday.\nThis is the test we want to write:\n\n.. code:: python\n\n def testDateIsOnASaturday(self):\n     d = datetime.date(2008, 4, 26)\n     assert_that(d, is_(on_a_saturday()))\n\nAnd here's the implementation:\n\n.. code:: python\n\n from hamcrest.core.base_matcher import BaseMatcher\n from hamcrest.core.helpers.hasmethod import hasmethod\n\n class IsGivenDayOfWeek(BaseMatcher):\n\n     def __init__(self, day):\n         self.day = day  # Monday is 0, Sunday is 6\n\n     def _matches(self, item):\n         if not hasmethod(item, 'weekday'):\n             return False\n         return item.weekday() == self.day\n\n     def describe_to(self, description):\n         day_as_string = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\n                          'Friday', 'Saturday', 'Sunday']\n         description.append_text('calendar date falling on ')    \\\n                    .append_text(day_as_string[self.day])\n\n def on_a_saturday():\n     return IsGivenDayOfWeek(5)\n\nFor our Matcher implementation we implement the ``_matches`` method - which\ncalls the ``weekday`` method after confirming that the argument (which may not\nbe a date) has such a method - and the ``describe_to`` method - which is used\nto produce a failure message when a test fails. Here's an example of how the\nfailure message looks:\n\n.. code:: python\n\n assert_that(datetime.date(2008, 4, 6), is_(on_a_saturday()))\n\nfails with the message::\n\n    AssertionError:\n    Expected: is calendar date falling on Saturday\n         got: <2008-04-06>\n\nLet's say this matcher is saved in a module named ``isgivendayofweek``. We\ncould use it in our test by importing the factory function ``on_a_saturday``:\n\n.. code:: python\n\n from hamcrest import *\n import unittest\n from isgivendayofweek import on_a_saturday\n\n class DateTest(unittest.TestCase):\n     def testDateIsOnASaturday(self):\n         d = datetime.date(2008, 4, 26)\n         assert_that(d, is_(on_a_saturday()))\n\n if __name__ == '__main__':\n     unittest.main()\n\nEven though the ``on_a_saturday`` function creates a new matcher each time it\nis called, you should not assume this is the only usage pattern for your\nmatcher. Therefore you should make sure your matcher is stateless, so a single\ninstance can be reused between matches.\n\n\nMore resources\n==============\n\n* Documentation_\n* Package_\n* Sources_\n* Hamcrest_\n\n.. _Documentation: https://pyhamcrest.readthedocs.io/\n.. _Package: http://pypi.python.org/pypi/PyHamcrest\n.. _Sources: https://github.com/hamcrest/PyHamcrest\n.. _Hamcrest: http://hamcrest.org\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.5",
  "current_version": "2.0.2",
  "released_versions": [
    "1.0",
    "1.1",
    "1.10.1",
    "1.2.1",
    "1.3",
    "1.4",
    "1.5",
    "1.6",
    "1.7",
    "1.7.1",
    "1.7.2",
    "1.8.0",
    "1.8.1",
    "1.8.2",
    "1.8.3",
    "1.8.4",
    "1.8.5",
    "1.9.0",
    "2.0.0",
    "2.0.1",
    "2.0.2"
  ]
}