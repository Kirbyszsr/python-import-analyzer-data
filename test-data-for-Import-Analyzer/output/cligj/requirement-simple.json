{
  "name": "cligj",
  "description": "cligj\n======\n\n.. image:: https://travis-ci.com/mapbox/cligj.svg\n   :target: https://travis-ci.com/mapbox/cligj\n\n.. image:: https://coveralls.io/repos/mapbox/cligj/badge.png?branch=master\n   :target: https://coveralls.io/r/mapbox/cligj?branch=master\n\nCommon arguments and options for GeoJSON processing commands, using Click.\n\n`cligj` is for Python developers who create command line interfaces for geospatial data.\n`cligj` allows you to quickly build consistent, well-tested and interoperable CLIs for handling GeoJSON.\n\n\nArguments\n---------\n\n``files_in_arg``\nMultiple files\n\n``files_inout_arg``\nMultiple files, last of which is an output file.\n\n``features_in_arg``\nGeoJSON Features input which accepts multiple representations of GeoJSON features\nand returns the input data as an iterable of GeoJSON Feature-like dictionaries\n\nOptions\n--------\n\n``verbose_opt``\n\n``quiet_opt``\n\n``format_opt``\n\nJSON formatting options\n~~~~~~~~~~~~~~~~~~~~~~~\n\n``indent_opt``\n\n``compact_opt``\n\nCoordinate precision option\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``precision_opt``\n\nGeographic (default), projected, or Mercator switch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``projection_geographic_opt``\n\n``projection_projected_opt``\n\n``projection_mercator_opt``\n\nFeature collection or feature sequence switch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n``sequence_opt``\n\n``use_rs_opt``\n\nGeoJSON output mode option\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n``geojson_type_collection_opt``\n\n``geojson_type_feature_opt``\n\n``def geojson_type_bbox_opt``\n\nExample\n-------\n\nHere's an example of a command that writes out GeoJSON features as a collection\nor, optionally, a sequence of individual features. Since most software that\nreads and writes GeoJSON expects a text containing a single feature collection,\nthat's the default, and a LF-delimited sequence of texts containing one GeoJSON\nfeature each is a feature that is turned on using the ``--sequence`` option.\nTo write sequences of feature texts that conform to the `GeoJSON Text Sequences\nstandard <https://tools.ietf.org/html/rfc8142>`__ (and might contain\npretty-printed JSON) with the ASCII Record Separator (0x1e) as a delimiter, use\nthe ``--rs`` option\n\n.. warning:: Future change warning\n   GeoJSON sequences (`--sequence`), not collections (`--no-sequence`), will be\n   the default in version 1.0.0.\n\n\n.. code-block:: python\n\n    import click\n    import cligj\n    import json\n\n    def process_features(features):\n        for feature in features:\n            # TODO process feature here\n            yield feature\n\n    @click.command()\n    @cligj.features_in_arg\n    @cligj.sequence_opt\n    @cligj.use_rs_opt\n    def pass_features(features, sequence, use_rs):\n        if sequence:\n            for feature in process_features(features):\n                if use_rs:\n                    click.echo(u'\\x1e', nl=False)\n                click.echo(json.dumps(feature))\n        else:\n            click.echo(json.dumps(\n                {'type': 'FeatureCollection',\n                 'features': list(process_features(features))}))\n\nOn the command line, the generated help text explains the usage\n\n.. code-block:: console\n\n    Usage: pass_features [OPTIONS] FEATURES...\n\n    Options:\n    --sequence / --no-sequence  Write a LF-delimited sequence of texts\n                                containing individual objects or write a single\n                                JSON text containing a feature collection object\n                                (the default).\n    --rs / --no-rs              Use RS (0x1E) as a prefix for individual texts\n                                in a sequence as per http://tools.ietf.org/html\n                                /draft-ietf-json-text-sequence-13 (default is\n                                False).\n    --help                      Show this message and exit.\n\nAnd can be used like this\n\n.. code-block:: console\n\n    $ cat data.geojson\n    {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'id': '1'}, {'type': 'Feature', 'id': '2'}]}\n\n    $ pass_features data.geojson\n    {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'id': '1'}, {'type': 'Feature', 'id': '2'}]}\n\n    $ cat data.geojson | pass_features\n    {'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'id': '1'}, {'type': 'Feature', 'id': '2'}]}\n\n    $ cat data.geojson | pass_features --sequence\n    {'type': 'Feature', 'id': '1'}\n    {'type': 'Feature', 'id': '2'}\n\n    $ cat data.geojson | pass_features --sequence --rs\n    ^^{'type': 'Feature', 'id': '1'}\n    ^^{'type': 'Feature', 'id': '2'}\n\nIn this example, ``^^`` represents 0x1e.\n\n\n",
  "requires_dist": [
    "click (<8,>=4.0)",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4",
  "current_version": "0.7.1",
  "released_versions": [
    "0.1.0",
    "0.2.0",
    "0.3.0",
    "0.4.0",
    "0.5.0",
    "0.6.0",
    "0.6b1",
    "0.7.0",
    "0.7.1"
  ]
}