{
  "name": "apipkg",
  "description": "Welcome to apipkg!\n------------------------\n\nWith apipkg you can control the exported namespace of a Python package and\ngreatly reduce the number of imports for your users.\nIt is a `small pure Python module`_ that works on CPython 2.7 and 3.4+,\nJython and PyPy. It cooperates well with Python's ``help()`` system,\ncustom importers (PEP302) and common command-line completion tools.\n\nUsage is very simple: you can require 'apipkg' as a dependency or you\ncan copy paste the ~200 lines of code into your project.\n\n\nTutorial example\n-------------------\n\nHere is a simple ``mypkg`` package that specifies one namespace\nand exports two objects imported from different modules::\n\n    # mypkg/__init__.py\n    import apipkg\n    apipkg.initpkg(__name__, {\n        'path': {\n            'Class1': \"_mypkg.somemodule:Class1\",\n            'clsattr': \"_mypkg.othermodule:Class2.attr\",\n        }\n    }\n\nThe package is initialized with a dictionary as namespace.\n\nYou need to create a ``_mypkg`` package with a ``somemodule.py``\nand ``othermodule.py`` containing the respective classes.\nThe ``_mypkg`` is not special - it's a completely\nregular Python package.\n\nNamespace dictionaries contain ``name: value`` mappings\nwhere the value may be another namespace dictionary or\na string specifying an import location.  On accessing\nan namespace attribute an import will be performed::\n\n    >>> import mypkg\n    >>> mypkg.path\n    <ApiModule 'mypkg.path'>\n    >>> mypkg.path.Class1   # '_mypkg.somemodule' gets imported now\n    <class _mypkg.somemodule.Class1 at 0xb7d428fc>\n    >>> mypkg.path.clsattr  # '_mypkg.othermodule' gets imported now\n    4 # the value of _mypkg.othermodule.Class2.attr\n\nThe ``mypkg.path`` namespace and its two entries are\nloaded when they are accessed.   This means:\n\n* lazy loading - only what is actually needed is ever loaded\n\n* only the root \"mypkg\" ever needs to be imported to get\n  access to the complete functionality\n\n* the underlying modules are also accessible, for example::\n\n    from mypkg.sub import Class1\n\n\nIncluding apipkg in your package\n--------------------------------------\n\nIf you don't want to add an ``apipkg`` dependency to your package you\ncan copy the `apipkg.py`_ file somewhere to your own package,\nfor example ``_mypkg/apipkg.py`` in the above example.  You\nthen import the ``initpkg`` function from that new place and\nare good to go.\n\n.. _`small pure Python module`:\n.. _`apipkg.py`: https://github.com/pytest-dev/apipkg/blob/master/src/apipkg/__init__.py\n\nFeedback?\n-----------------------\n\nIf you have questions you are welcome to\n\n* join the #pylib channel on irc.freenode.net\n* create an issue on https://github.com/pytest-dev/apipkg/issues\n\nhave fun,\nholger krekel\n\n\n",
  "requires_dist": null,
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "current_version": "1.5",
  "released_versions": [
    "1.0",
    "1.0b1",
    "1.0b4",
    "1.0b5",
    "1.0b6",
    "1.2",
    "1.3",
    "1.4",
    "1.5"
  ]
}