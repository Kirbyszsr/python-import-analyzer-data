{
  "name": "hypothesmith",
  "description": "# hypothesmith\nHypothesis strategies for generating Python programs, something like CSmith.\n\nThis is definitely pre-alpha, but if you want to play with it feel free!\nYou can even keep the shiny pieces when - not if - it breaks.\n\nGet it today with [`pip install hypothesmith`](https://pypi.org/project/hypothesmith/),\nor by cloning [the GitHub repo](https://github.com/Zac-HD/hypothesmith).\n\nYou can run the tests, such as they are, with `tox` on Python 3.6 or later.\nUse `tox -va` to see what environments are available.\n\n## Usage\nThis package provides two Hypothesis strategies for generating Python source code.\n\nThe generated code will always be syntatically valid, and is useful for testing\nparsers, linters, auto-formatters, and other tools that operate on source code.\n\n> DO NOT EXECUTE CODE GENERATED BY THESE STRATEGIES.\n>\n> It could do literally anything that running Python code is able to do,\n> including changing, deleting, or uploading important data.  Arbitrary\n> code can be useful, but \"arbitrary code execution\" can be very, very bad.\n\n#### `hypothesmith.from_grammar(start=\"file_input\", *, auto_target=True)`\n\nGenerates syntactically-valid Python source code based on the grammar.\n\nValid values for ``start`` are ``\"single_input\"``, ``\"file_input\"``, or\n``\"eval_input\"``; respectively a single interactive statement, a module or\nsequence of commands read from a file, and input for the eval() function.\n\nIf ``auto_target`` is ``True``, this strategy uses ``hypothesis.target()``\ninternally to drive towards larger and more complex examples.  We recommend\nleaving this enabled, as the grammar is quite complex and only simple examples\ntend to be generated otherwise.\n\n#### `hypothesmith.from_node(node=libcst.Module, *, auto_target=True)`\n\nGenerates syntactically-valid Python source code based on the node types\ndefined by the [`LibCST`](https://libcst.readthedocs.io/en/latest/) project.\n\nYou can pass any subtype of `libcst.CSTNode`.  Alternatively, you can use\nHypothesis' built-in `from_type(node_type).map(lambda n: libcst.Module([n]).code`,\nafter Hypothesmith has registered the required strategies.  However, this does\nnot include automatic targeting and limitations of LibCST may lead to invalid\ncode being generated.\n\n## Notable bugs found with Hypothesmith\n- [BPO-40661, a segfault in the new parser](https://bugs.python.org/issue40661),\n  was given maximum priority and blocked the planned release of CPython 3.9 beta1.\n- [BPO-38953](https://bugs.python.org/issue38953) `tokenize` -> `untokenize` roundtrip bugs.\n- [BPO-42218](https://bugs.python.org/issue42218) mishandled error case in new PEG parser.\n- [`lib2to3` errors on \\r in comment](https://github.com/psf/black/issues/970)\n- [Black fails on files ending in a backslash](https://github.com/psf/black/issues/1012)\n- [At least three round-trip bugs in LibCST](https://github.com/Instagram/LibCST#acknowledgements)\n  (search commits for \"hypothesis\")\n- [Invalid code generated by LibCST](https://github.com/Instagram/LibCST/issues/287)\n\n### Changelog\n\nPatch notes [can be found in `CHANGELOG.md`](https://github.com/Zac-HD/hypothesmith/blob/master/CHANGELOG.md).\n\n\n",
  "requires_dist": [
    "hypothesis (>=5.41.0)",
    "lark-parser (>=0.7.2)",
    "libcst (>=0.3.8)"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.1.8",
  "released_versions": [
    "0.0.1",
    "0.0.2",
    "0.0.3",
    "0.0.4",
    "0.0.5",
    "0.0.6",
    "0.0.7",
    "0.0.8",
    "0.1.0",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.1.6",
    "0.1.7",
    "0.1.8"
  ]
}