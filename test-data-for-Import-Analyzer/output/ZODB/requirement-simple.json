{
  "name": "ZODB",
  "description": "=======================================\nZODB, a Python object-oriented database\n=======================================\n\n.. image:: https://img.shields.io/pypi/v/ZODB.svg\n   :target: https://pypi.org/project/ZODB/\n   :alt: Latest release\n\n.. image:: https://img.shields.io/pypi/pyversions/ZODB.svg\n   :target: https://pypi.org/project/ZODB/\n   :alt: Supported Python versions\n\n.. image:: https://travis-ci.org/zopefoundation/ZODB.svg?branch=master\n   :target: https://travis-ci.org/zopefoundation/ZODB\n   :alt: Build status\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/ZODB/badge.svg\n   :target: https://coveralls.io/github/zopefoundation/ZODB\n   :alt: Coverage status\n\n.. image:: https://readthedocs.org/projects/zodb-docs/badge/?version=latest\n   :target: https://zodb-docs.readthedocs.io/en/latest/\n   :alt: Documentation status\n\nZODB provides an object-oriented database for Python that provides a\nhigh-degree of transparency. ZODB runs on Python 2.7 or Python 3.4 and\nabove. It also runs on PyPy.\n\n- no separate language for database operations\n\n- very little impact on your code to make objects persistent\n\n- no database mapper that partially hides the database.\n\n  Using an object-relational mapping **is not** like using an\n  object-oriented database.\n\n- almost no seam between code and database.\n\nZODB is an ACID Transactional database.\n\nTo learn more, visit: https://zodb-docs.readthedocs.io\n\nThe github repository is: at https://github.com/zopefoundation/zodb\n\nIf you're interested in contributing to ZODB itself, see the\n`developer notes\n<https://github.com/zopefoundation/ZODB/blob/master/DEVELOPERS.rst>`_.\n\n\n================\n Change History\n================\n\n5.6.0 (2020-06-11)\n==================\n\n- Fix race with invalidations when starting a new transaction. The bug\n  affected Storage implementations that rely on mvccadapter, and could result\n  in data corruption (oid loaded at wrong serial after a concurrent commit).\n  See `issue 290 <https://github.com/zopefoundation/ZODB/issues/290>`_.\n  As mentionned in pull request #307, interfaces are clarified about the fact\n  that storage implementations must update at a precise moment the value that\n  is returned by lastTransaction(): just after invalidate() or\n  tpc_finish callback.\n\n- Improve volatile attribute ``_v_`` documentation.\n\n- Make repozo's recover mode atomic by recovering the backup in a\n  temporary file which is then moved to the expected output file.\n\n- Add a new option to repozo in recover mode which allows to verify\n  backups integrity on the fly.\n\n- Drop support for Python 3.4.\n\n- Add support for Python 3.8.\n\n- Fix ``DB.undo()`` and ``DB.undoMultiple()`` to close the storage\n  they open behind the scenes when the transaction is committed or\n  rolled back. See `issue 268\n  <https://github.com/zopefoundation/ZODB/issues/268>`_.\n\n- Make TransactionMetaData in charge of (de)serializing extension data.\n  A new ``extension_bytes`` attribute converts automatically from\n  ``extension``, or vice-versa. During storage iteration, ``extension_bytes``\n  holds bytes as they are stored (i.e. no deserialization happens).\n  See `issue 207 <https://github.com/zopefoundation/ZODB/pull/207>`_.\n\n- Make a connection's savepoint storage implement its own\n  (approximate) ``getSize`` method instead of relying on the original\n  storage. Previously, this produced confusing DEBUG logging. See\n  `issue 282 <https://github.com/zopefoundation/ZODB/issues/282>`_.\n\n- Fix tests with transaction 3.0.\n\n- Fix inconsistent resolution order with zope.interface v5.\n\n5.5.1 (2018-10-25)\n==================\n\n- Fix KeyError on releasing resources of a Connection when closing the DB.\n  This requires at least version 2.4 of the ``transaction`` package.\n  See `issue 208 <https://github.com/zopefoundation/ZODB/issues/208>`_.\n\n5.5.0 (2018-10-13)\n==================\n\n- Add support for Python 3.7.\n\n- Bump the dependency on zodbpickle to at least 1.0.1. This is\n  required to avoid a memory leak on Python 2.7. See `issue 203\n  <https://github.com/zopefoundation/ZODB/issues/203>`_.\n\n- Bump the dependency on persistent to at least 4.4.0.\n\n- Make the internal support functions for dealing with OIDs (``p64``\n  and ``u64``) somewhat faster and raise more informative\n  exceptions on certain types of bad input. See `issue 216\n  <https://github.com/zopefoundation/ZODB/issues/216>`_.\n\n- Remove support for ``python setup.py test``. It hadn't been working\n  for some time. See `issue #218\n  <https://github.com/zopefoundation/ZODB/issues/218>`_.\n\n- Make the tests run faster by avoiding calls to ``time.sleep()``.\n\n5.4.0 (2018-03-26)\n==================\n\n- ZODB now uses pickle protocol 3 for both Python 2 and Python 3.\n\n  (Previously, protocol 2 was used for Python 2.)\n\n  The zodbpickle package provides a `zodbpickle.binary` string type\n  that should be used in Python 2 to cause binary strings to be saved\n  in a pickle binary format, so they can be loaded correctly in\n  Python 3.  Pickle protocol 3 is needed for this to work correctly.\n\n- Object identifiers in persistent references are saved as\n  `zodbpickle.binary` strings in Python 2, so that they are loaded\n  correctly in Python 3.\n\n- If an object is missing from the index while packing a ``FileStorage``,\n  report its full ``oid``.\n\n- Storage imports are a bit faster.\n\n- Storages can be important from non-seekable sources, like\n  file-wrapped pipes.\n\n5.3.0 (2017-08-30)\n==================\n\n- Add support for Python 3.6.\n\n- Drop support for Python 3.3.\n\n- Ensure that the ``HistoricalStorageAdapter`` forwards the ``release`` method to\n  its base instance. See `issue 78 <https://github.com/zopefoundation/ZODB/issues/788>`_.\n\n- Use a higher pickle protocol (2) for serializing objects on Python\n  2; previously protocol 1 was used. This is *much* more efficient for\n  new-style classes (all persistent objects are new-style), at the\n  cost of being very slightly less efficient for old-style classes.\n\n  .. note:: On Python 2, this will now allow open ``file`` objects\n            (but **not** open blobs or sockets) to be pickled (loading\n            the object will result in a closed file); previously this\n            would result in a ``TypeError``. Doing so is not\n            recommended as they cannot be loaded in Python 3.\n\n  See `issue 179 <https://github.com/zopefoundation/ZODB/pull/179>`_.\n\n5.2.4 (2017-05-17)\n==================\n\n- ``DB.close`` now explicitly frees internal resources.  This is\n  helpful to avoid false positives in tests that check for leaks.\n\n- Optimize getting the path to a blob file. See\n  `issue 161 <https://github.com/zopefoundation/ZODB/pull/161>`_.\n\n- All classes are new-style classes on Python 2 (they were already\n  new-style on Python 3). This improves performance on PyPy. See\n  `issue 160 <https://github.com/zopefoundation/ZODB/pull/160>`_.\n\n5.2.3 (2017-04-11)\n==================\n\n- Fix an import error. See `issue 158 <https://github.com/zopefoundation/ZODB/issues/158>`_.\n\n5.2.2 (2017-04-11)\n==================\n\n- Fixed: A blob misfeature set blob permissions so that blobs and blob\n  directories were only readable by the database process owner, rather\n  than honoring user-controlled permissions (e.g. ``umask``).\n  See `issue 155 <https://github.com/zopefoundation/ZODB/issues/155>`_.\n\n5.2.1 (2017-04-08)\n==================\n\n- Fixed: When opening FileStorages in read-only mode, non-existent\n  files were silently created.  Creating a read-only file-storage\n  against a non-existent file errors.\n\n5.2.0 (2017-02-09)\n==================\n\n- Call new afterCompletion API on storages to allow them to free\n  resources after transaction complete.\n  See `issue 147 <https://github.com/zodb/relstorage/issues/147>`__.\n- Take advantage of the new transaction-manager explicit mode to avoid\n  starting transactions unnecessarily when transactions end.\n\n- ``Connection.new_oid`` delegates to its storage, not the DB. This is\n  helpful for improving concurrency in MVCC storages like RelStorage.\n  See `issue 139 <https://github.com/zopefoundation/ZODB/issues/139>`_.\n\n- ``persistent`` is no longer required at setup time.\n  See `issue 119 <https://github.com/zopefoundation/ZODB/issues/119>`_.\n\n- ``Connection.close`` and ``Connection.open`` no longer race on\n  ``self.transaction_manager``, which could lead to\n  ``AttributeError``. This was a bug introduced in 5.0.1. See `issue\n  142 <https://github.com/zopefoundation/ZODB/pull/143>`_.\n\n\n5.1.1 (2016-11-18)\n==================\n\n- Fixed: ``ZODB.Connection.TransactionMetaData`` didn't support custom data\n  storage that some storages rely on.\n\n5.1.0 (2016-11-17)\n==================\n\n- ZODB now translates transaction meta data, ``user`` and\n  ``description`` from text to bytes before passing them to storages,\n  and converts them back to text when retrieving them from storages in\n  the ``history``, ``undoLog`` and ``undoInfo`` methods.\n\n  The ``IDatabase`` interface was updated to reflect that ``history``,\n  ``undoLog`` and ``undoInfo`` are available on database objects.\n  (They were always available, but not documented in the interface.)\n\n5.0.1 (2016-11-17)\n==================\n\n- Fix an AttributeError that DemoStorage could raise if it was asked\n  to store a blob into a temporary changes before reading a blob. See\n  `issue 103 <https://github.com/zopefoundation/ZODB/issues/103>`_.\n\n- Call _p_resolveConflict() even if a conflicting change doesn't change the\n  state. This reverts to the behaviour of 3.10.3 and older.\n\n- Closing a Connection now reverts its ``transaction_manager`` to\n  None. This helps prevent errors and release resources when the\n  ``transaction_manager`` was the (default) thread-local manager. See\n  `issue 114 <https://github.com/zopefoundation/ZODB/issues/114>`_.\n\n- Many docstrings have been improved.\n\n5.0.0 (2016-09-06)\n==================\n\nMajor internal improvements and cleanups plus:\n\n- Added a connection ``prefetch`` method that can be used to request\n  that a storage prefetch data an application will need::\n\n    conn.prefetch(obj, ...)\n\n  Where arguments can be objects, object ids, or iterables of objects\n  or object ids.\n\n  Added optional ``prefetch`` methods to the storage APIs. If a\n  storage doesn't support prefetch, then the connection prefetch\n  method is a noop.\n\n- fstail: print the txn offset and header size, instead of only the data offset.\n  fstail can now be used to truncate a DB at the right offset.\n\n- Drop support for old commit protocol.  All of the build-in storages\n  implement the new protocol.  This new protocol allows storages to\n  provide better write performance by allowing multiple commits to\n  execute in parallel.\n\n5.0.0b1 (2016-08-04)\n====================\n\n- fstail: print the txn offset and header size, instead of only the data offset.\n  fstail can now be used to truncate a DB at the right offset.\n\nNumerous internal cleanups, including:\n\n- Changed the way the root object was created.  Now the root object is\n  created using a database connection, rather than by making low-level\n  storage calls.\n\n- Drop support for the old commit protocol.\n\n- Internal FileStorage-undo fixes that should allow undo in some cases\n  where it didn't work before.\n\n- Drop the ``version`` argument to some methods where it was the last\n  argument and optional.\n\n5.0.0a6 (2016-07-21)\n====================\n\n- Added a connection ``prefetch`` method that can be used to request\n  that a storage prefect data an application will need::\n\n    conn.prefetch(obj, ...)\n\n  Where arguments can be objects, object ids, or iterables of objects\n  or object ids.\n\n  Added optional ``prefetch`` methods to the storage APIs. If a\n  storage doesn't support prefetch, then the connection prefetch\n  method is a noop.\n\n5.0.0a5 (2016-07-06)\n====================\n\nDrop support for old commit protocol.  All of the build-in storages\nimplement the new protocol.  This new protocol allows storages to\nprovide better write performance by allowing multiple commits to\nexecute in parallel.\n\n5.0.0a4 (2016-07-05)\n====================\n\nSee 4.4.2.\n\n5.0.0a3 (2016-07-01)\n====================\n\nSee 4.4.1.\n\n5.0.0a2 (2016-07-01)\n====================\n\nSee 4.4.0.\n\n5.0.0a1 (2016-06-20)\n====================\n\nMajor **internal** implementation changes to the Multi Version\nConcurrency Control (MVCC) implementation:\n\n- For storages that implement IMVCCStorage (RelStorage), no longer\n  implement MVCC in ZODB.\n\n- For other storages, MVCC is implemented using an additional storage\n  layer. This underlying layer works by calling ``loadBefore``. The\n  low-level storage ``load`` method isn't used any more.\n\n  This change allows server-based storages like ZEO and NEO to be\n  implemented more simply and cleanly.\n\n4.4.3 (2016-08-04)\n==================\n\n- Internal FileStorage-undo fixes that should allow undo in some cases\n  where it didn't work before.\n\n- fstail: print the txn offset and header size, instead of only the data offset.\n  fstail can now be used to truncate a DB at the right offset.\n\n4.4.2 (2016-07-08)\n==================\n\nBetter support of the new commit protocol. This fixes issues with blobs and\nundo. See pull requests #77, #80, #83\n\n4.4.1 (2016-07-01)\n==================\n\nAdded IMultiCommitStorage to directly represent the changes in the 4.4.0\nrelease and to make complient storages introspectable.\n\n4.4.0 (2016-06-30)\n==================\n\nThis release begins evolution to a more effcient commit protocol that\nallows storage implementations, like `NEO <http://www.neoppod.org/>`_,\nto support multiple transactions committing at the same time, for\ngreater write parallelism.\n\nThis release updates IStorage:\n\n- The committed transaction's ID is returned by ``tpc_finish``, rather\n  than being returned in response store and tpc_vote results.\n\n- ``tpc_vote`` is now expected to return ``None`` or a list of object\n  ids for objects for which conflicts were resolved.\n\nThis release works with storages that implemented the older version of\nthe storage interface, but also supports storages that implement the\nupdated interface.\n\n4.3.1 (2016-06-06)\n==================\n\n- Fixed: FileStorage loadBefore didn't handle deleted/undone data correctly.\n\n4.3.0 (2016-05-31)\n==================\n\n- Drop support for Python 2.6 and 3.2.\n\n- Make the ``zodbpickle`` dependency required and not conditional.\n  This fixes various packaging issues involving pip and its wheel\n  cache. zodbpickle was only optional under Python 2.6 so this change\n  only impacts users of that version.  See\n  https://github.com/zopefoundation/ZODB/pull/42.\n\n- Add support for Python 3.5.\n\n- Avoid failure during cleanup of nested databases that provide MVCC\n  on storage level (Relstorage).\n  https://github.com/zopefoundation/ZODB/issues/45\n\n- Remove useless dependency to `zdaemon` in setup.py. Remove ZEO documentation.\n  Both were leftovers from the time where ZEO was part of this repository.\n\n- Fix possible data corruption after FileStorage is truncated to roll back a\n  transaction.\n  https://github.com/zopefoundation/ZODB/pull/52\n\n- DemoStorage: add support for conflict resolution and fix history()\n  https://github.com/zopefoundation/ZODB/pull/58\n\n- Fixed a test that depended on implementation-specific behavior in tpc_finish\n\n4.2.0 (2015-06-02)\n==================\n\n- Declare conditional dependencies using PEP-426 environment markers\n  (fixing interation between pip 7's wheel cache and tox).  See\n  https://github.com/zopefoundation/ZODB/issues/36.\n\n4.2.0b1 (2015-05-22)\n====================\n\n- Log failed conflict resolution attempts at ``DEBUG`` level.  See:\n  https://github.com/zopefoundation/ZODB/pull/29.\n\n- Fix command-line parsing of ``--verbose`` and ``--verify`` arguments.\n  (The short versions, ``-v`` and ``-V``, were parsed correctly.)\n\n- Add support for PyPy.\n\n- Fix the methods in ``ZODB.serialize`` that find object references\n  under Python 2.7 (used in scripts like ``referrers``, ``netspace``,\n  and ``fsrecover`` among others). This requires the addition of the\n  ``zodbpickle`` dependency.\n\n- FileStorage: fix an edge case when disk space runs out while packing,\n  do not leave the ``.pack`` file around. That would block any write to the\n  to-be-packed ``Data.fs``, because the disk would stay at 0 bytes free.\n  See https://github.com/zopefoundation/ZODB/pull/21.\n\n4.1.0 (2015-01-11)\n==================\n\n- Fix registration of custom logging level names (\"BLATHER\", \"TRACE\").\n\n  We have been registering them in the wrong order since 2004.  Before\n  Python 3.4, the stdlib ``logging`` module masked the error by registering\n  them in *both* directions.\n\n- Add support for Python 3.4.\n\n4.0.1 (2014-07-13)\n==================\n\n- Fix ``POSKeyError`` during ``transaction.commit`` when after\n  ``savepoint.rollback``.  See\n  https://github.com/zopefoundation/ZODB/issues/16\n\n- Ensure that the pickler used in PyPy always has a ``persistent_id``\n  attribute (``inst_persistent_id`` is not present on the pure-Python\n  pickler). (PR #17)\n\n- Provide better error reporting when trying to load an object on a\n  closed connection.\n\n4.0.0 (2013-08-18)\n==================\n\nFinally released.\n\n4.0.0b3 (2013-06-11)\n====================\n\n- Switch to using non-backward-compatible pickles (protocol 3, without\n  storing bytes as strings) under Python 3.  Updated the magic number\n  for file-storage files under Python3 to indicate the incompatibility.\n\n- Fixed: A ``UnicodeDecodeError`` could happen for non-ASCII OIDs\n  when using bushy blob layout.\n\n4.0.0b2 (2013-05-14)\n====================\n\n- Extended the filename renormalizer used for blob doctests to support\n  the filenames used by ZEO in non-shared mode.\n\n- Added ``url`` parameter to ``setup()`` (PyPI says it is required).\n\n4.0.0b1 (2013-05-10)\n=====================\n\n- Skipped non-unit tests in ``setup.py test``.  Use the buildout to run tests\n  requiring \"layer\" support.\n\n- Included the filename in the exception message to support debugging in case\n  ``loadBlob`` does not find the file.\n\n- Added support for Python 3.2 / 3.3.\n\n.. note::\n\n   ZODB 4.0.x is supported on Python 3.x for *new* applications only.\n   Due to changes in the standard library's pickle support, the Python3\n   support does **not** provide forward- or backward-compatibility\n   at the data level with Python2.  A future version of ZODB may add\n   such support.\n\n   Applications which need migrate data from Python2 to Python3 should\n   plan to script this migration using separte databases, e.g. via a\n   \"dump-and-reload\" approach, or by providing explicit fix-ups of the\n   pickled values as transactions are copied between storages.\n\n\n4.0.0a4 (2012-12-17)\n=====================\n\n- Enforced usage of bytes for ``_p_serial`` of persistent objects (fixes\n  compatibility with recent persistent releases).\n\n4.0.0a3 (2012-12-01)\n=====================\n\n- Fixed: An elaborate test for trvial logic corrupted module state in a\n        way that made other tests fail spuriously.\n\n4.0.0a2 (2012-11-13)\n=====================\n\nBugs Fixed\n----------\n\n- An unneeded left-over setting in setup.py caused installation with\n  pip to fail.\n\n4.0.0a1 (2012-11-07)\n=====================\n\nNew Features\n------------\n\n- The ``persistent`` and ``BTrees`` packages are now released as separate\n  distributions, on which ZODB now depends.\n\n- ZODB no longer depends on zope.event.  It now uses ZODB.event, which\n  uses zope.event if it is installed.  You can override\n  ZODB.event.notify to provide your own event handling, although\n  zope.event is recommended.\n\n- BTrees allowed object keys with insane comparison. (Comparison\n  inherited from object, which compares based on in-process address.)\n  Now BTrees raise TypeError if an attempt is made to save a key with\n  comparison inherited from object. (This doesn't apply to old-style\n  class instances.)\n\nBugs Fixed\n----------\n\n- Ensured that the export file and index file created by ``repozo`` share\n  the same timestamp.\n\n  https://bugs.launchpad.net/zodb/+bug/993350\n\n- Pinned the ``transaction`` and ``manuel`` dependencies to Python 2.5-\n  compatible versions when installing under Python 2.5.\n\n\n.. note::\n   Please see https://github.com/zopefoundation/ZODB/blob/master/HISTORY.rst\n   for older versions of ZODB.\n\n\n",
  "requires_dist": [
    "BTrees (>=4.2.0)",
    "ZConfig",
    "persistent (>=4.4.0)",
    "six",
    "transaction (>=2.4)",
    "zc.lockfile",
    "zodbpickle (>=1.0.1)",
    "zope.interface",
    "manuel ; extra == 'test'",
    "zope.testing ; extra == 'test'",
    "zope.testrunner (>=4.4.6) ; extra == 'test'",
    "mock ; (python_version == \"2.7\") and extra == 'test'"
  ],
  "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*",
  "current_version": "5.6.0",
  "released_versions": [
    "4.0.0",
    "4.0.0a1",
    "4.0.0a2",
    "4.0.0a3",
    "4.0.0a4",
    "4.0.0b1",
    "4.0.0b2",
    "4.0.0b3",
    "4.0.1",
    "4.1.0",
    "4.2.0",
    "4.2.0b1",
    "4.3.0",
    "4.3.1",
    "4.4.0",
    "4.4.1",
    "4.4.2",
    "4.4.3",
    "4.4.4",
    "4.4.5",
    "5.0.0",
    "5.0.0a1",
    "5.0.0a2",
    "5.0.0a3",
    "5.0.0a4",
    "5.0.0a5",
    "5.0.0a6",
    "5.0.0b1",
    "5.0.1",
    "5.1.0",
    "5.1.1",
    "5.2.0",
    "5.2.1",
    "5.2.2",
    "5.2.3",
    "5.2.4",
    "5.3.0",
    "5.4.0",
    "5.5.0",
    "5.5.1",
    "5.6.0"
  ]
}