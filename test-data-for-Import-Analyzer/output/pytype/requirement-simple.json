{
  "name": "pytype",
  "description": "[![CI](https://github.com/google/pytype/workflows/CI/badge.svg?branch=master)](https://github.com/google/pytype/actions)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/pytype)](https://pypi.org/project/pytype/#files)\n\n# pytype - \ud83e\udd86\u2714\n\nPytype checks and infers types for your Python code - without requiring type\nannotations. Pytype can:\n\n* Lint plain Python code, flagging common mistakes such as misspelled attribute\nnames, incorrect function calls, and [much more][error-classes], even across\nfile boundaries.\n* Enforce user-provided [type annotations][pep-484]. While annotations are\noptional for pytype, it will check and apply them where present.\n* Generate type annotations in standalone files (\"[pyi files][pyi-stub-files]\"),\nwhich can be merged back into the Python source with a provided\n[merge-pyi][merge-pyi] tool.\n\nPytype is a static analyzer; it does not execute the code it runs on.\n\nThousands of projects at Google rely on pytype to keep their Python code\nwell-typed and error-free.\n\nFor more information, check out the [user guide][user-guide], [FAQ][faq], or\n[supported features][supported-features].\n\n## How is pytype different from other type checkers?\n\n1. Pytype uses **inference** instead of gradual typing. This means it will\ninfer types on code even when the code has no type hints on it. So it can\ndetect issues with code like this, which other type checkers would miss:\n\n    ```python\n    def f():\n        return \"PyCon\"\n    def g():\n        return f() + 2019\n\n    # pytype: line 4, in g: unsupported operand type(s) for +: 'str'\n    # and 'int' [unsupported-operands]\n    ```\n\n1. Pytype is **lenient** instead of strict. That means it allows all\noperations that succeed at runtime and don't contradict annotations. For\ninstance, this code will pass as safe in pytype, but fail in other type\ncheckers, which assign types to variables as soon as they are initialized:\n\n    ```python\n    from typing import List\n    def get_list() -> List[str]:\n        lst = [\"PyCon\"]\n        lst.append(2019)\n        return [str(x) for x in lst]\n\n    # mypy: line 4: error: Argument 1 to \"append\" of \"list\" has\n    # incompatible type \"int\"; expected \"str\"\n    ```\n\nAlso see the corresponding [FAQ entry][faq-diff].\n\n## Quickstart\n\nTo quickly get started with type-checking a file or directory, run the\nfollowing, replacing `file_or_directory` with your input:\n\n```shell\npip install pytype\npytype file_or_directory\n```\n\nTo set up pytype on an entire package, add the following to a `setup.cfg` file\nin the directory immediately above the package, replacing `package_name` with\nthe package name:\n\n```\n[pytype]\ninputs = package_name\n```\n\nNow you can run the no-argument command `pytype` to type-check the package. It's\nalso easy to add pytype to your automated testing; see this\n[example][importlab-travis] of a GitHub project that runs pytype on Travis.\n\nFinally, pytype generates files of inferred type information, located by default\nin `.pytype/pyi`. You can use this information to type-annotate the\ncorresponding source file:\n\n```shell\nmerge-pyi -i <filepath>.py .pytype/pyi/<filename>.pyi\n```\n\n## Requirements\n\nYou need a Python 3.6-3.8 interpreter to run pytype, as well as an\ninterpreter in `$PATH` for the Python version of the code you're analyzing\n(supported: 2.7, 3.5-3.8).\n\nPlatform support:\n\n* Pytype is currently developed and tested on Linux\\*, which is the main supported\n  platform.\n* Installation on MacOSX requires OSX 10.7 or higher and Xcode v8 or higher.\n* Windows is currently not supported unless you use [WSL][wsl].\n\n<sub>\\*\nNote: On Alpine Linux, installing may fail due to issues with upstream\ndependencies.  See the details of [this issue][scikit-build-issue] for a\npossible fix.\n</sub>\n\n## Installing\n\nPytype can be installed via pip. Note that the installation requires `wheel`\nand `setuptools`. (If you're working in a virtualenv, these two packages should\nalready be present.)\n\n```shell\npip install pytype\n```\n\nOr from the source code [on GitHub][github].\n\n```shell\ngit clone --recurse-submodules https://github.com/google/pytype.git\ncd pytype\npip install .\n```\n\nInstead of using `--recurse-submodules`, you could also have run\n\n```shell\ngit submodule init\ngit submodule update\n```\n\nin the `pytype` directory. To edit the code and have your edits tracked live,\nreplace the pip install command with:\n\n```shell\npip install -e .\n```\n\n### Installing on WSL\n\nFollow the steps above, but make sure you have the correct libraries first:\n\n```shell\nsudo apt install build-essential python3-dev libpython3-dev\n```\n\n## Usage\n\n```\nusage: pytype [options] input [input ...]\n\npositional arguments:\n  input                 file or directory to process\n```\n\nCommon options:\n\n* `-V, --python-version`: Python version (major.minor) of the target code.\n  Defaults to the version that pytype is running under.\n* `-o, --output`: The directory into which all pytype output goes, including\n  generated .pyi files. Defaults to `.pytype`.\n* `-d, --disable`. Comma or space separated list of error names to ignore.\n  Detailed explanations of pytype's error names are in\n  [this doc][error-classes]. Defaults to empty.\n\nFor a full list of options, run `pytype --help`.\n\nIn addition to the above, you can direct pytype to use a custom typeshed\ninstallation instead of its own bundled copy by setting `$TYPESHED_HOME`.\n\n### Config File\n\nFor convenience, you can save your pytype configuration in a file. The config\nfile is an INI-style file with a `[pytype]` section; if an explicit config file\nis not supplied, pytype will look for a `[pytype]` section in the first\n`setup.cfg` file found by walking upwards from the current working directory.\n\nStart off by generating a sample config file:\n\n```shell\n$ pytype --generate-config pytype.cfg\n```\n\nNow customize the file based on your local setup, keeping only the sections you\nneed. Directories may be relative to the location of the config file, which is\nuseful if you want to check in the config file as part of your project.\n\nFor example, suppose you have the following directory structure and want to\nanalyze package `~/repo1/foo`, which depends on package `~/repo2/bar`:\n\n```\n~/\n\u251c\u2500\u2500 repo1\n\u2502   \u2514\u2500\u2500 foo\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 file_to_check.py\n\u2514\u2500\u2500 repo2\n    \u2514\u2500\u2500 bar\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 dependency.py\n```\n\nHere is the filled-in config file, which instructs pytype to type-check\n`~/repo1/foo` as Python 3.6 code, look for packages in `~/repo1` and `~/repo2`,\nand ignore attribute errors. Notice that the path to a package does not include\nthe package itself.\n\n```\n$ cat ~/repo1/pytype.cfg\n\n# NOTE: All relative paths are relative to the location of this file.\n\n[pytype]\n\n# Space-separated list of files or directories to process.\ninputs =\n    foo\n\n# Python version (major.minor) of the target code.\npython_version = 3.6\n\n# Paths to source code directories, separated by ':'.\npythonpath =\n    .:\n    ~/repo2\n\n# Comma or space separated list of error names to ignore.\ndisable =\n    attribute-error\n```\n\nWe could've discovered that `~/repo2` needed to be added to the pythonpath by\nrunning pytype's broken dependency checker:\n\n```\n$ pytype --config=~/repo1/pytype.cfg ~/repo1/foo/*.py --unresolved\n\nUnresolved dependencies:\n  bar.dependency\n```\n\n### Subtools\n\nPytype ships with a few scripts in addition to `pytype` itself:\n\n* `annotate-ast`, an in-progress type annotator for ASTs.\n* [`merge-pyi`][merge-pyi], for merging type information from a .pyi file into a\nPython file.\n* `pytd-tool`, a parser for .pyi files.\n* `pytype-single`, a debugging tool for pytype developers, which analyzes a\nsingle Python file assuming that .pyi files have already been generated for all\nof its dependencies.\n* `pyxref`, a cross references generator.\n\n## 2021 Roadmap\n\n* Python 3.9 support\n* Better performance on large files\n* Support for numerical libraries\n\n## License\n[Apache 2.0][license]\n\n## Disclaimer\nThis is not an official Google product.\n\n[error-classes]: https://github.com/google/pytype/blob/master/docs/errors.md\n[faq]: https://github.com/google/pytype/blob/master/docs/faq.md\n[faq-diff]: https://github.com/google/pytype/blob/master/docs/faq.md#how-is-pytype-different-from-other-type-checkers\n[github]: https://github.com/google/pytype/\n[importlab-travis]: https://github.com/google/importlab/blob/master/.travis.yml\n[license]: https://github.com/google/pytype/blob/master/LICENSE\n[merge-pyi]: https://github.com/google/pytype/tree/master/pytype/tools/merge_pyi\n[pep-484]: https://www.python.org/dev/peps/pep-0484\n[pyi-stub-files]: https://github.com/google/pytype/blob/master/docs/user_guide.md#pyi-stub-files\n[scikit-build-issue]: https://github.com/scikit-build/ninja-python-distributions/issues/27\n[supported-features]: https://github.com/google/pytype/blob/master/docs/support.md\n[user-guide]: https://github.com/google/pytype/blob/master/docs/user_guide.md\n[wsl]: https://docs.microsoft.com/en-us/windows/wsl/faq",
  "requires_dist": null,
  "requires_python": "<3.10,>=3.6",
  "current_version": "2021.5.19",
  "released_versions": [
    "0.2",
    "2018.10.30",
    "2018.11.6",
    "2018.12.11",
    "2018.12.21",
    "2018.5.14",
    "2018.5.15",
    "2018.5.22",
    "2018.5.22.1",
    "2018.6.15",
    "2018.6.18",
    "2018.6.19",
    "2018.6.5",
    "2018.7.13",
    "2018.8.10",
    "2018.9.18",
    "2018.9.19",
    "2018.9.25",
    "2018.9.26",
    "2018.9.7",
    "2018.9.7.1",
    "2019.1.18",
    "2019.1.30",
    "2019.10.17",
    "2019.11.27",
    "2019.12.17",
    "2019.12.6",
    "2019.2.13",
    "2019.3.1",
    "2019.3.15",
    "2019.3.21",
    "2019.3.27",
    "2019.3.8",
    "2019.4.12",
    "2019.4.19",
    "2019.4.2",
    "2019.4.2.1",
    "2019.4.26",
    "2019.4.5",
    "2019.5.15",
    "2019.5.24",
    "2019.5.31",
    "2019.5.6",
    "2019.5.8",
    "2019.6.21",
    "2019.6.28",
    "2019.7.11",
    "2019.7.26",
    "2019.7.30",
    "2019.8.29",
    "2019.8.9",
    "2019.9.17",
    "2019.9.6",
    "2020.1.24",
    "2020.1.7",
    "2020.1.8",
    "2020.10.8",
    "2020.11.12",
    "2020.11.23",
    "2020.11.3",
    "2020.12.16",
    "2020.12.2",
    "2020.12.23",
    "2020.2.20",
    "2020.2.6",
    "2020.3.19",
    "2020.4.1",
    "2020.4.22",
    "2020.5.13",
    "2020.5.7",
    "2020.6.1",
    "2020.6.26",
    "2020.7.14",
    "2020.7.20",
    "2020.7.24",
    "2020.7.30",
    "2020.8.10",
    "2020.8.17",
    "2020.8.28",
    "2020.9.14",
    "2020.9.16",
    "2020.9.24",
    "2020.9.29",
    "2021.1.14",
    "2021.1.21",
    "2021.1.28",
    "2021.1.8",
    "2021.2.19",
    "2021.2.23",
    "2021.2.9",
    "2021.3.10",
    "2021.3.22",
    "2021.3.3",
    "2021.4.1",
    "2021.4.15",
    "2021.4.26",
    "2021.4.9",
    "2021.5.11",
    "2021.5.14",
    "2021.5.19",
    "2021.5.4",
    "2021.5.6"
  ]
}