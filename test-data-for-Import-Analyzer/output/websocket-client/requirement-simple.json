{
  "name": "websocket-client",
  "description": "[![docs](https://readthedocs.org/projects/websocket-client/badge/?style=flat)](https://websocket-client.readthedocs.io/)\n[![Build Status](https://github.com/websocket-client/websocket-client/actions/workflows/build.yml/badge.svg)](https://github.com/websocket-client/websocket-client/actions/workflows/build.yml)\n[![codecov](https://codecov.io/gh/websocket-client/websocket-client/branch/master/graph/badge.svg?token=pcXhUQwiL3)](https://codecov.io/gh/websocket-client/websocket-client)\n[![PyPI Downloads](https://pepy.tech/badge/websocket-client)](https://pepy.tech/project/websocket-client)\n[![PyPI version](https://img.shields.io/pypi/v/websocket_client)](https://pypi.org/project/websocket_client/)\n\n# websocket-client\n\nwebsocket-client is a WebSocket client for Python. It provides access\nto low level APIs for WebSockets. websocket-client implements version\n[hybi-13](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-13)\nof the WebSocket procotol. This client does not currently support the\npermessage-deflate extension from\n[RFC 7692](https://tools.ietf.org/html/rfc7692).\n\n## Documentation\n\nThis project's documentation can be found at\n[https://websocket-client.readthedocs.io/](https://websocket-client.readthedocs.io/)\n\n## Contributing\n\nPlease see the [contribution guidelines](https://github.com/websocket-client/websocket-client/blob/master/CONTRIBUTING.md)\n\n## Installation\n\nYou can use either `python3 setup.py install` or `pip3 install websocket-client`\nto install. This module is tested on Python 3.6+.\n\n## Usage Tips\n\nCheck out the documentation's FAQ for additional guidelines:\n[https://websocket-client.readthedocs.io/en/latest/faq.html](https://websocket-client.readthedocs.io/en/latest/faq.html)\n\nKnown issues with this library include lack of WebSocket Compression\nsupport (RFC 7692) and [minimal threading documentation/support](https://websocket-client.readthedocs.io/en/latest/threading.html).\n\n## Performance\n\nThe `send` and `validate_utf8` methods are very slow in pure Python. You can\ndisable UTF8 validation in this library (and receive a performance enhancement)\nwith the `skip_utf8_validation` parameter. If you want to get better\nperformance, please install both numpy and wsaccel, and import them into your\nproject files - these other libraries will automatically be used when available.\nNote that wsaccel can sometimes cause other issues.\n\n## Examples\n\nMany more examples are found in the\n[examples documentation](https://websocket-client.readthedocs.io/en/latest/examples.html).\n\n### Long-lived Connection\n\nMost real-world WebSockets situations involve longer-lived connections.\nThe WebSocketApp `run_forever` loop automatically tries to reconnect when a\nconnection is lost, and provides a variety of event-based connection controls.\n\n```python\nimport websocket\ntry:\n    import thread\nexcept ImportError:\n    import _thread as thread\nimport time\n\ndef on_message(ws, message):\n    print(message)\n\ndef on_error(ws, error):\n    print(error)\n\ndef on_close(ws):\n    print(\"### closed ###\")\n\ndef on_open(ws):\n    def run(*args):\n        for i in range(3):\n            time.sleep(1)\n            ws.send(\"Hello %d\" % i)\n        time.sleep(1)\n        ws.close()\n        print(\"thread terminating...\")\n    thread.start_new_thread(run, ())\n\nif __name__ == \"__main__\":\n    websocket.enableTrace(True)\n    ws = websocket.WebSocketApp(\"ws://echo.websocket.org/\",\n                              on_open = on_open,\n                              on_message = on_message,\n                              on_error = on_error,\n                              on_close = on_close)\n\n    ws.run_forever()\n```\n\n### Short-lived Connection\n\nThis is if you want to communicate a short message and disconnect\nimmediately when done. For example, if you want to confirm that a WebSocket\nserver is running and responds properly to a specific request.\n\n```python\nfrom websocket import create_connection\nws = create_connection(\"ws://echo.websocket.org/\")\nprint(\"Sending 'Hello, World'...\")\nws.send(\"Hello, World\")\nprint(\"Sent\")\nprint(\"Receiving...\")\nresult =  ws.recv()\nprint(\"Received '%s'\" % result)\nws.close()\n```\n\nIf you want to customize socket options, set sockopt, as seen below:\n\n```python\nfrom websocket import create_connection\nws = create_connection(\"ws://echo.websocket.org/\",\n                        sockopt=((socket.IPPROTO_TCP, socket.TCP_NODELAY),))\n```\n\n### Acknowledgements\n\nThanks to @battlemidget and @ralphbean for helping migrate this project to\nPython 3.\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.6",
  "current_version": "1.0.1",
  "released_versions": [
    "0.10.0",
    "0.11.0",
    "0.12.0",
    "0.13.0",
    "0.14.0",
    "0.14.1",
    "0.15.0",
    "0.16.0",
    "0.16.0a",
    "0.17.0",
    "0.18.0",
    "0.19.0",
    "0.20.0",
    "0.21.0",
    "0.22.0",
    "0.23.0",
    "0.24.0",
    "0.25.0",
    "0.26.0",
    "0.27.0",
    "0.28.0",
    "0.29.0",
    "0.3",
    "0.30.0",
    "0.31.0",
    "0.32.0",
    "0.33.0",
    "0.34.0",
    "0.35.0",
    "0.36.0",
    "0.37.0",
    "0.39.0",
    "0.4",
    "0.4.1",
    "0.40.0",
    "0.42.0",
    "0.42.1",
    "0.43.0",
    "0.44.0",
    "0.45.0",
    "0.46.0",
    "0.47.0",
    "0.48.0",
    "0.49.0",
    "0.5.0",
    "0.5.0a",
    "0.5.1",
    "0.50.0",
    "0.51.0",
    "0.52.0",
    "0.53.0",
    "0.54.0",
    "0.55.0",
    "0.56.0",
    "0.57.0",
    "0.58.0",
    "0.59.0",
    "0.6.0",
    "0.7.0",
    "0.8.0",
    "0.9.0",
    "1.0.0",
    "1.0.1"
  ]
}