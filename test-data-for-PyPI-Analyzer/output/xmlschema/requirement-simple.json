{
  "name": "xmlschema",
  "description": "*********\nxmlschema\n*********\n\n.. image:: https://img.shields.io/pypi/v/xmlschema.svg\n   :target: https://pypi.python.org/pypi/xmlschema/\n.. image:: https://img.shields.io/pypi/pyversions/xmlschema.svg\n   :target: https://pypi.python.org/pypi/xmlschema/\n.. image:: https://img.shields.io/pypi/implementation/xmlschema.svg\n   :target: https://pypi.python.org/pypi/xmlschema/\n.. image:: https://img.shields.io/badge/License-MIT-blue.svg\n   :alt: MIT License\n   :target: https://lbesson.mit-license.org/\n.. image:: https://travis-ci.org/sissaschool/xmlschema.svg?branch=master\n   :target: https://travis-ci.org/sissaschool/xmlschema\n.. image:: https://img.shields.io/pypi/dm/xmlschema.svg\n   :target: https://pypi.python.org/pypi/xmlschema/\n.. image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg\n   :target: https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity\n\n.. xmlschema-introduction-start\n\nThe *xmlschema* library is an implementation of `XML Schema <http://www.w3.org/2001/XMLSchema>`_\nfor Python (supports Python 3.6+).\n\nThis library arises from the needs of a solid Python layer for processing XML\nSchema based files for\n`MaX (Materials design at the Exascale) <http://www.max-centre.eu>`_  European project.\nA significant problem is the encoding and the decoding of the XML data files\nproduced by different simulation software.\nAnother important requirement is the XML data validation, in order to put the\nproduced data under control. The lack of a suitable alternative for Python in\nthe schema-based decoding of XML data has led to build this library. Obviously\nthis library can be useful for other cases related to XML Schema based processing,\nnot only for the original scope.\n\nThe full `xmlschema documentation is available on \"Read the Docs\" <http://xmlschema.readthedocs.io/en/latest/>`_.\n\n\nFeatures\n========\n\nThis library includes the following features:\n\n* Full XSD 1.0 and XSD 1.1 support\n* Building of XML schema objects from XSD files\n* Validation of XML instances against XSD schemas\n* Decoding of XML data into Python data and to JSON\n* Encoding of Python data and JSON to XML\n* Data decoding and encoding ruled by converter classes\n* An XPath based API for finding schema's elements and attributes\n* Support of XSD validation modes *strict*/*lax*/*skip*\n* Remote attacks protection by default using an XMLParser that forbids entities\n* XML data bindings based on DataElement class\n* Static code generation with Jinja2 templates\n\n\nInstallation\n============\n\nYou can install the library with *pip* in a Python 3.6+ environment::\n\n    pip install xmlschema\n\nThe library uses the Python's ElementTree XML library and requires\n`elementpath <https://github.com/brunato/elementpath>`_ additional package.\nThe base schemas of the XSD standards are included in the package for working\noffline and to speed-up the building of schema instances.\n\n.. xmlschema-introduction-end\n\n\nUsage\n=====\n\nImport the library and then create a schema instance using the path of\nthe file containing the schema as argument:\n\n.. code-block:: pycon\n\n    >>> import xmlschema\n    >>> my_schema = xmlschema.XMLSchema('tests/test_cases/examples/vehicles/vehicles.xsd')\n\n.. note::\n    For XSD 1.1 schemas use the class `XMLSchema11`, because the default class\n    `XMLSchema` is an alias of the XSD 1.0 validator class `XMLSchema10`.\n\nThe schema can be used to validate XML documents:\n\n.. code-block:: pycon\n\n    >>> my_schema.is_valid('tests/test_cases/examples/vehicles/vehicles.xml')\n    True\n    >>> my_schema.is_valid('tests/test_cases/examples/vehicles/vehicles-1_error.xml')\n    False\n    >>> my_schema.validate('tests/test_cases/examples/vehicles/vehicles-1_error.xml')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/home/brunato/Development/projects/xmlschema/xmlschema/validators/xsdbase.py\", line 393, in validate\n        raise error\n    xmlschema.validators.exceptions.XMLSchemaValidationError: failed validating <Element '{http://example.com/vehicles}cars' at 0x7f8032768458> with XsdGroup(model='sequence').\n\n    Reason: character data between child elements not allowed!\n\n    Schema:\n\n      <xs:sequence xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n            <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"car\" type=\"vh:vehicleType\" />\n      </xs:sequence>\n\n    Instance:\n\n      <vh:cars xmlns:vh=\"http://example.com/vehicles\">\n        NOT ALLOWED CHARACTER DATA\n        <vh:car make=\"Porsche\" model=\"911\" />\n        <vh:car make=\"Porsche\" model=\"911\" />\n      </vh:cars>\n\nUsing a schema you can also decode the XML documents to nested dictionaries, with\nvalues that match to the data types declared by the schema:\n\n.. code-block:: pycon\n\n    >>> import xmlschema\n    >>> from pprint import pprint\n    >>> xs = xmlschema.XMLSchema('tests/test_cases/examples/collection/collection.xsd')\n    >>> pprint(xs.to_dict('tests/test_cases/examples/collection/collection.xml'))\n    {'@xsi:schemaLocation': 'http://example.com/ns/collection collection.xsd',\n     'object': [{'@available': True,\n                 '@id': 'b0836217462',\n                 'author': {'@id': 'PAR',\n                            'born': '1841-02-25',\n                            'dead': '1919-12-03',\n                            'name': 'Pierre-Auguste Renoir',\n                            'qualification': 'painter'},\n                 'estimation': Decimal('10000.00'),\n                 'position': 1,\n                 'title': 'The Umbrellas',\n                 'year': '1886'},\n                {'@available': True,\n                 '@id': 'b0836217463',\n                 'author': {'@id': 'JM',\n                            'born': '1893-04-20',\n                            'dead': '1983-12-25',\n                            'name': 'Joan Mir\u00f3',\n                            'qualification': 'painter, sculptor and ceramicist'},\n                 'position': 2,\n                 'title': None,\n                 'year': '1925'}]}\n\n\nAuthors\n=======\nDavide Brunato and others who have contributed with code or with sample cases.\n\nLicense\n=======\nThis software is distributed under the terms of the MIT License.\nSee the file 'LICENSE' in the root directory of the present\ndistribution, or http://opensource.org/licenses/MIT.\n\n\n",
  "requires_dist": [
    "elementpath (<3.0.0,>=2.2.2)",
    "elementpath (<3.0.0,>=2.2.2) ; extra == 'codegen'",
    "jinja2 ; extra == 'codegen'",
    "tox ; extra == 'dev'",
    "coverage ; extra == 'dev'",
    "lxml ; extra == 'dev'",
    "elementpath (<3.0.0,>=2.2.2) ; extra == 'dev'",
    "memory-profiler ; extra == 'dev'",
    "Sphinx ; extra == 'dev'",
    "sphinx-rtd-theme ; extra == 'dev'",
    "jinja2 ; extra == 'dev'",
    "elementpath (<3.0.0,>=2.2.2) ; extra == 'docs'",
    "Sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "jinja2 ; extra == 'docs'"
  ],
  "requires_python": ">=3.6",
  "current_version": "1.6.2",
  "released_versions": [
    "0.9.10",
    "0.9.11",
    "0.9.12",
    "0.9.13",
    "0.9.14",
    "0.9.15",
    "0.9.16",
    "0.9.17",
    "0.9.18",
    "0.9.20",
    "0.9.22",
    "0.9.23",
    "0.9.24",
    "0.9.25",
    "0.9.26",
    "0.9.27",
    "0.9.28",
    "0.9.29",
    "0.9.30",
    "0.9.31",
    "0.9.7",
    "0.9.8",
    "0.9.9",
    "1.0.1",
    "1.0.10",
    "1.0.11",
    "1.0.13",
    "1.0.14",
    "1.0.15",
    "1.0.16",
    "1.0.17",
    "1.0.18",
    "1.0.2",
    "1.0.3",
    "1.0.4",
    "1.0.5",
    "1.0.6",
    "1.0.7",
    "1.0.8",
    "1.0.9",
    "1.1.0",
    "1.1.1",
    "1.1.2",
    "1.1.3",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.2.3",
    "1.2.4",
    "1.2.5",
    "1.3.0",
    "1.3.1",
    "1.4.0",
    "1.4.1",
    "1.4.2",
    "1.5.0",
    "1.5.1",
    "1.5.2",
    "1.5.3",
    "1.6.0",
    "1.6.1",
    "1.6.2"
  ]
}