{
  "name": "stone",
  "description": ".. image:: https://cfl.dropboxstatic.com/static/images/sdk/stone_banner.png\n    :target: https://github.com/dropbox/stone\n\n.. image:: https://img.shields.io/pypi/pyversions/stone.svg\n    :target: https://pypi.python.org/pypi/stone\n\n.. image:: https://img.shields.io/pypi/v/stone.svg\n    :target: https://pypi.python.org/pypi/stone\n\n.. image:: https://codecov.io/gh/dropbox/stone/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/dropbox/stone\n\nThe Official Api Spec Language for Dropbox.\n\n`Documentation`_ can be found on GitHub\n\nInstallation\n============\n\nInstall stone using ``pip``::\n\n    $ pip install --user stone\n\nThis will install a script ``stone`` to your PATH that can be run from the\ncommand line::\n\n    $ stone -h\n\nAlternative\n-----------\n\nIf you choose not to install ``stone`` using the method above, you will need\nto ensure that you have the Python packages ``ply`` and ``six``, which can be\ninstalled through ``pip``::\n\n    $ pip install \"ply>=3.4\" \"six>=1.3.0\" \"typing>=3.5.2\"\n\nIf the ``stone`` package is in your PYTHONPATH, you can replace ``stone``\nwith ``python -m stone.cli`` as follows::\n\n    $ python -m stone.cli -h\n\nIf you have the ``stone`` package on your machine, but did not install it or\nadd its location to your PYTHONPATH, you can use the following::\n\n    $ PYTHONPATH=path/to/stone python -m stone.cli -h\n\nAfter installation, follow one of our `Examples`_ or read the `Documentation`_.\n\n\nOverview\n========\n\nDefine an API once in Stone. Use backends, i.e. code generators, to translate\nyour specification into objects and functions in the programming languages of\nyour choice.\n\n* Introduction\n    * Motivation_\n    * Installation_\n* `Language Reference <https://github.com/dropbox/stone/blob/main/docs/lang_ref.rst>`_\n* `Builtin Backends <https://github.com/dropbox/stone/blob/main/docs/builtin_backends.rst>`_\n* `Managing Specs <https://github.com/dropbox/stone/blob/main/docs/managing_specs.rst>`_\n* `Evolving a Spec <https://github.com/dropbox/stone/blob/main/docs/evolve_spec.rst>`_\n* `Backend Reference <https://github.com/dropbox/stone/blob/main/docs/backend_ref.rst>`_\n* `JSON Serializer <https://github.com/dropbox/stone/blob/main/docs/json_serializer.rst>`_\n* `Network Protocol <https://github.com/dropbox/stone/blob/main/docs/network_protocol.rst>`_\n\n*Warning: The documentation is undergoing a rewrite.*\n\n.. image:: docs/overview.png\n\nStone is made up of several components:\n\nLanguage\n--------\n\nA language for writing API specifications, \"specs\" for short.\n\nCommand-Line Interface\n----------------------\n\nThe CLI (``stone``) generates code based on the provided specs, backend,\nand additional arguments.\n\nBackends\n--------\n\nThere are builtin backends that come with Stone: Javascript, Python, Obj-C,\nSwift, and Typescript.\n\nThere are other backends we've written that aren't part of the Stone package\nbecause they aren't sufficiently general, and can't realistically be re-used\nfor non-Dropbox APIs: Go and Java.\n\nStone includes a Python interface for defining new backends based on its\nintermediate representation of specs. This gives you the freedom to generate\nto any target.\n\nJSON Serialization\n------------------\n\nStone defines a JSON-compatible serialization scheme.\n\nMotivation\n==========\n\nStone was birthed at Dropbox at a time when it was becoming clear that API\ndevelopment needed to be scaled beyond a single team. The company was\nundergoing a large expansion in the number of product groups, and it wasn't\nscalable for the API team, which traditionally dealt with core file operations,\nto learn the intricacies of each product and build corresponding APIs.\n\nStone's chief goal is to decentralize API development and ownership at Dropbox.\nTo be successful, it needed to do several things:\n\n**Decouple APIs from SDKS**: Dropbox has first-party clients for our mobile\napps, desktop client, and website. Each of these is implemented in a different\nlanguage. Moreover, we wanted to continue providing SDKs to third-parties, over\nhalf of whom use our SDKs. It's untenable to ask product groups that build APIs\nto also implement these endpoints in a half-dozen different language-specific\nSDKs. Without decoupling, as was the case in our v1 API, the SDKs will\ninevitably fall behind. Our solution is to have our SDKs automatically\ngenerated.\n\n**Improve Visibility into our APIs**: These days, APIs aren't just in the\ndomain of engineering. Product managers, product specialists, partnerships,\nsales, and services groups all need to have clear and accurate specifications\nof our APIs. After all, APIs define Dropbox's data models and functionality.\nBefore Stone, API design documents obseleted by changes during implementation\nwere the source of truth.\n\n**Consistency and Predictability**: Consistency ranging from documentation\ntense to API patterns are important for making an API predictable and therefore\neasier to use. We needed an easy way to make and enforce patterns.\n\n**JSON**: To make consumption easier for third parties, we wanted our data\ntypes to map to JSON. For cases where serialization efficiency\n(space and time) are important, you can try using msgpack (alpha support\navailable in the Python generator). It's possible also to define your own\nserialization scheme, but at that point, you may consider using something like\n`Protobuf <https://github.com/google/protobuf>`_.\n\nStone is in active use for the `Dropbox v2 API\n<http://www.dropbox.com/developers>`_.\n\nAssumptions\n-----------\n\nStone makes no assumptions about the protocol layer being used to make API\nrequests and return responses; its first use case is the Dropbox v2 API which\noperates over HTTP. Stone does not come with nor enforce any particular RPC\nframework.\n\nStone makes some assumptions about the data types supported in target\nprogramming languages. It's assumed that there is a capacity for representing\ndictionaries (unordered string keys -> value), lists, numeric types, and\nstrings.\n\nStone assumes that a route (or API endpoint) can have its argument and\nresult types defined without relation to each other. In other words, the\ntype of response does not change based on the input to the endpoint. An\nexception to this rule is afforded for error responses.\n\nExamples\n========\n\nWe provide `Examples`_ to help get you started with a lot of the basic functionality of Stone.\n\nGetting Help\n============\n\nIf you find a bug, please see `CONTRIBUTING.md`_ for information on how to report it.\n\nIf you need help that is not specific to Stone, please reach out to `Dropbox Support`_.\n\nLicense\n=======\n\nStone is distributed under the MIT license, please see `LICENSE`_ for more information.\n\n.. _logo: {logo_link}\n.. _repo: https://github.com/dropbox/stone\n.. _`Documentation`: https://github.com/dropbox/stone/tree/main/docs\n.. _`Examples`: https://github.com/dropbox/stone/tree/main/example/backend\n.. _LICENSE: https://github.com/dropbox/stone/blob/main/LICENSE\n.. _CONTRIBUTING.md: https://github.com/dropbox/stone/blob/main/CONTRIBUTING.md\n.. _`Dropbox Support`: https://www.dropbox.com/developers/contact\n\n\n",
  "requires_dist": [
    "ply (>=3.4)",
    "six (>=1.3.0)"
  ],
  "requires_python": "",
  "current_version": "3.2.1",
  "released_versions": [
    "0.1",
    "1.0.0",
    "1.3.0",
    "1.3.1",
    "1.3.2",
    "2.0.0",
    "2.1.0",
    "2.2.0",
    "2.2.1",
    "2.2.2",
    "3.0.0",
    "3.2.0",
    "3.2.1"
  ]
}