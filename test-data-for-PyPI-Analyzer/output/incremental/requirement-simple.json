{
  "name": "incremental",
  "description": "Incremental\n===========\n\n|travis|\n|pypi|\n|coverage|\n\nIncremental is a small library that versions your Python projects.\n\nAPI documentation can be found `here <https://twisted.github.io/incremental/docs/>`_.\n\n\nQuick Start\n-----------\n\nAdd this to your ``setup.py``\\ 's ``setup()`` call, removing any other versioning arguments:\n\n.. code::\n\n   setup(\n       use_incremental=True,\n       setup_requires=['incremental'],\n       install_requires=['incremental'], # along with any other install dependencies\n       ...\n   }\n\n\nInstall Incremental to your local environment with ``pip install incremental[scripts]``.\nThen run ``python -m incremental.update <projectname> --create``.\nIt will create a file in your package named ``_version.py`` and look like this:\n\n.. code::\n\n   from incremental import Version\n\n   __version__ = Version(\"widgetbox\", 17, 1, 0)\n   __all__ = [\"__version__\"]\n\n\nThen, so users of your project can find your version, in your root package's ``__init__.py`` add:\n\n.. code::\n\n   from ._version import __version__\n\n\nSubsequent installations of your project will then use Incremental for versioning.\n\n\nIncremental Versions\n--------------------\n\n``incremental.Version`` is a class that represents a version of a given project.\nIt is made up of the following elements (which are given during instantiation):\n\n- ``package`` (required), the name of the package this ``Version`` represents.\n- ``major``, ``minor``, ``micro`` (all required), the X.Y.Z of your project's ``Version``.\n- ``release_candidate`` (optional), set to 0 or higher to mark this ``Version`` being of a release candidate (also sometimes called a \"prerelease\").\n- ``post`` (optional), set to 0 or higher to mark this ``Version`` as a postrelease.\n- ``dev`` (optional), set to 0 or higher to mark this ``Version`` as a development release.\n\nYou can extract a PEP-440 compatible version string by using the ``.public()`` method, which returns a ``str`` containing the full version. This is the version you should provide to users, or publicly use. An example output would be ``\"13.2.0\"``, ``\"17.1.2dev1\"``, or ``\"18.8.0rc2\"``.\n\nCalling ``repr()`` with a ``Version`` will give a Python-source-code representation of it, and calling ``str()`` with a ``Version`` will provide a string similar to ``'[Incremental, version 16.10.1]'``.\n\n\nUpdating\n--------\n\nIncremental includes a tool to automate updating your Incremental-using project's version called ``incremental.update``.\nIt updates the ``_version.py`` file and automatically updates some uses of Incremental versions from an indeterminate version to the current one.\nIt requires ``click`` from PyPI.\n\n``python -m incremental.update <projectname>`` will perform updates on that package.\nThe commands that can be given after that will determine what the next version is.\n\n- ``--newversion=<version>``, to set the project version to a fully-specified version (like 1.2.3, or 17.1.0dev1).\n- ``--rc``, to set the project version to ``<year-2000>.<month>.0rc1`` if the current version is not a release candidate, or bump the release candidate number by 1 if it is.\n- ``--dev``, to set the project development release number to 0 if it is not a development release, or bump the development release number by 1 if it is.\n- ``--patch``, to increment the patch number of the release. This will also reset the release candidate number, pass ``--rc`` at the same time to increment the patch number and make it a release candidate.\n- ``--post``, to set the project postrelease number to 0 if it is not a postrelease, or bump the postrelease number by 1 if it is. This will also reset the release candidate and development release numbers.\n\nIf you give no arguments, it will strip the release candidate number, making it a \"full release\".\n\nIncremental supports \"indeterminate\" versions, as a stand-in for the next \"full\" version. This can be used when the version which will be displayed to the end-user is unknown (for example \"introduced in\" or \"deprecated in\"). Incremental supports the following indeterminate versions:\n\n- ``Version(\"<projectname>\", \"NEXT\", 0, 0)``\n- ``<projectname> NEXT``\n\nWhen you run ``python -m incremental.update <projectname> --rc``, these will be updated to real versions (assuming the target final version is 17.1.0):\n\n- ``Version(\"<projectname>\", 17, 1, 0, release_candidate=1)``\n- ``<projectname> 17.1.0rc1``\n\nOnce the final version is made, it will become:\n\n- ``Version(\"<projectname>\", 17, 1, 0)``\n- ``<projectname> 17.1.0``\n\n\n.. |coverage| image:: https://codecov.io/github/twisted/incremental/coverage.svg?branch=master\n.. _coverage: https://codecov.io/github/twisted/incremental\n\n.. |travis| image:: https://travis-ci.org/twisted/incremental.svg?branch=master\n.. _travis: https://travis-ci.org/twisted/incremental\n\n.. |pypi| image:: http://img.shields.io/pypi/v/incremental.svg\n.. _pypi: https://pypi.python.org/pypi/incremental\n\n\n",
  "requires_dist": [
    "click (>=6.0) ; extra == 'scripts'",
    "twisted (>=16.4.0) ; extra == 'scripts'"
  ],
  "requires_python": "",
  "current_version": "21.3.0",
  "released_versions": [
    "0.1.0",
    "15.0.0",
    "15.1.0",
    "15.2.0",
    "15.3.0",
    "16.10.0",
    "16.10.1",
    "16.9.0",
    "16.9.1",
    "17.5.0",
    "21.3.0"
  ]
}