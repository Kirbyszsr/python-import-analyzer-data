{
  "name": "arrow",
  "description": "Arrow: Better dates & times for Python\n======================================\n\n.. start-inclusion-marker-do-not-remove\n\n.. image:: https://github.com/arrow-py/arrow/workflows/tests/badge.svg?branch=master\n   :alt: Build Status\n   :target: https://github.com/arrow-py/arrow/actions?query=workflow%3Atests+branch%3Amaster\n\n.. image:: https://codecov.io/gh/arrow-py/arrow/branch/master/graph/badge.svg\n   :alt: Coverage\n   :target: https://codecov.io/gh/arrow-py/arrow\n\n.. image:: https://img.shields.io/pypi/v/arrow.svg\n   :alt: PyPI Version\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/pypi/pyversions/arrow.svg\n   :alt: Supported Python Versions\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/pypi/l/arrow.svg\n   :alt: License\n   :target: https://pypi.python.org/pypi/arrow\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: Code Style: Black\n   :target: https://github.com/psf/black\n\n\n**Arrow** is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps. It implements and updates the datetime type, plugging gaps in functionality and providing an intelligent module API that supports many common creation scenarios. Simply put, it helps you work with dates and times with fewer imports and a lot less code.\n\nArrow is named after the `arrow of time <https://en.wikipedia.org/wiki/Arrow_of_time>`_ and is heavily inspired by `moment.js <https://github.com/moment/moment>`_ and `requests <https://github.com/psf/requests>`_.\n\nWhy use Arrow over built-in modules?\n------------------------------------\n\nPython's standard library and some other low-level modules have near-complete date, time and timezone functionality, but don't work very well from a usability perspective:\n\n- Too many modules: datetime, time, calendar, dateutil, pytz and more\n- Too many types: date, time, datetime, tzinfo, timedelta, relativedelta, etc.\n- Timezones and timestamp conversions are verbose and unpleasant\n- Timezone naivety is the norm\n- Gaps in functionality: ISO 8601 parsing, timespans, humanization\n\nFeatures\n--------\n\n- Fully-implemented, drop-in replacement for datetime\n- Support for Python 3.6+\n- Timezone-aware and UTC by default\n- Super-simple creation options for many common input scenarios\n- ``shift`` method with support for relative offsets, including weeks\n- Format and parse strings automatically\n- Wide support for the `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ standard\n- Timezone conversion\n- Support for ``dateutil``, ``pytz``, and ``ZoneInfo`` tzinfo objects\n- Generates time spans, ranges, floors and ceilings for time frames ranging from microsecond to year\n- Humanize dates and times with a growing list of contributed locales\n- Extensible for your own Arrow-derived types\n- Full support for PEP 484-style type hints\n\nQuick Start\n-----------\n\nInstallation\n~~~~~~~~~~~~\n\nTo install Arrow, use `pip <https://pip.pypa.io/en/stable/quickstart/>`_ or `pipenv <https://docs.pipenv.org>`_:\n\n.. code-block:: console\n\n    $ pip install -U arrow\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    >>> import arrow\n    >>> arrow.get('2013-05-11T21:23:58.970460+07:00')\n    <Arrow [2013-05-11T21:23:58.970460+07:00]>\n\n    >>> utc = arrow.utcnow()\n    >>> utc\n    <Arrow [2013-05-11T21:23:58.970460+00:00]>\n\n    >>> utc = utc.shift(hours=-1)\n    >>> utc\n    <Arrow [2013-05-11T20:23:58.970460+00:00]>\n\n    >>> local = utc.to('US/Pacific')\n    >>> local\n    <Arrow [2013-05-11T13:23:58.970460-07:00]>\n\n    >>> local.timestamp()\n    1368303838.970460\n\n    >>> local.format()\n    '2013-05-11 13:23:58 -07:00'\n\n    >>> local.format('YYYY-MM-DD HH:mm:ss ZZ')\n    '2013-05-11 13:23:58 -07:00'\n\n    >>> local.humanize()\n    'an hour ago'\n\n    >>> local.humanize(locale='ko-kr')\n    '\ud55c\uc2dc\uac04 \uc804'\n\n.. end-inclusion-marker-do-not-remove\n\nDocumentation\n-------------\n\nFor full documentation, please visit `arrow.readthedocs.io <https://arrow.readthedocs.io>`_.\n\nContributing\n------------\n\nContributions are welcome for both code and localizations (adding and updating locales). Begin by gaining familiarity with the Arrow library and its features. Then, jump into contributing:\n\n#. Find an issue or feature to tackle on the `issue tracker <https://github.com/arrow-py/arrow/issues>`_. Issues marked with the `\"good first issue\" label <https://github.com/arrow-py/arrow/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22>`_ may be a great place to start!\n#. Fork `this repository <https://github.com/arrow-py/arrow>`_ on GitHub and begin making changes in a branch.\n#. Add a few tests to ensure that the bug was fixed or the feature works as expected.\n#. Run the entire test suite and linting checks by running one of the following commands: ``tox && tox -e lint,docs`` (if you have `tox <https://tox.readthedocs.io>`_ installed) **OR** ``make build39 && make test && make lint`` (if you do not have Python 3.9 installed, replace ``build39`` with the latest Python version on your system).\n#. Submit a pull request and await feedback \ud83d\ude03.\n\nIf you have any questions along the way, feel free to ask them `here <https://github.com/arrow-py/arrow/discussions>`_.\n\nSupport Arrow\n-------------\n\n`Open Collective <https://opencollective.com/>`_ is an online funding platform that provides tools to raise money and share your finances with full transparency. It is the platform of choice for individuals and companies to make one-time or recurring donations directly to the project. If you are interested in making a financial contribution, please visit the `Arrow collective <https://opencollective.com/arrow>`_.\n\n\n",
  "requires_dist": [
    "python-dateutil (>=2.7.0)",
    "typing-extensions ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.6",
  "current_version": "1.1.0",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.1.6",
    "0.10.0",
    "0.11.0",
    "0.12.0",
    "0.12.1",
    "0.13.0",
    "0.13.1",
    "0.13.2",
    "0.14.0",
    "0.14.1",
    "0.14.2",
    "0.14.3",
    "0.14.4",
    "0.14.5",
    "0.14.6",
    "0.14.7",
    "0.15.0",
    "0.15.1",
    "0.15.2",
    "0.15.3",
    "0.15.4",
    "0.15.5",
    "0.15.6",
    "0.15.7",
    "0.15.8",
    "0.16.0",
    "0.17.0",
    "0.2.0",
    "0.2.1",
    "0.3.0",
    "0.3.1",
    "0.3.2",
    "0.3.3",
    "0.3.4",
    "0.3.5",
    "0.4.0",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.4.4",
    "0.4.6",
    "0.5.0",
    "0.5.4",
    "0.6.0",
    "0.7.0",
    "0.8.0",
    "0.9.0",
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.1.0"
  ]
}