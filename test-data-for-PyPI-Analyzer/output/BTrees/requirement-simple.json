{
  "name": "BTrees",
  "description": "=========================================\n BTrees:  scalable persistent components\n=========================================\n\n.. image:: https://github.com/zopefoundation/BTrees/actions/workflows/tests.yml/badge.svg\n    :target: https://github.com/zopefoundation/BTrees/actions/workflows/tests.yml\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/zopefoundation/BTrees?branch=master&svg=true\n    :target: https://ci.appveyor.com/project/mgedmin/BTrees\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/BTrees/badge.svg?branch=master\n    :target: https://coveralls.io/github/zopefoundation/BTrees?branch=master\n\n.. image:: https://img.shields.io/pypi/v/BTrees.svg\n        :target: https://pypi.org/project/BTrees/\n        :alt: Current version on PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/BTrees.svg\n        :target: https://pypi.org/project/BTrees/\n        :alt: Supported Python versions\n\n\nThis package contains a set of persistent object containers built around\na modified BTree data structure.  The trees are optimized for use inside\nZODB's \"optimistic concurrency\" paradigm, and include explicit resolution\nof conflicts detected by that mechanism.\n\nPlease see `the Sphinx documentation <http://btrees.readthedocs.io/>`_ for further\ninformation.\n\n\n==================\n BTrees Changelog\n==================\n\n4.8.0 (2021-04-14)\n==================\n\n- Make Python 2 forbid the use of type objects as keys (unless a\n  custom metaclass is used that implements comparison as required by\n  BTrees.) On Python 3, types are not orderable so they were already\n  forbidden, but on Python 2 types can be ordered by memory address,\n  which makes them unsuitable for use as keys. See `issue\n  <https://github.com/zopefoundation/BTrees/issues/153>`_.\n\n- Make the ``multiunion``, ``union``, ``intersection``, and\n  ``difference`` functions accept arbitrary Python iterables (that\n  iterate across the correct types). Previously, the Python\n  implementation allowed this, but the C implementation only allowed\n  objects (like ``TreeSet`` or ``Bucket``) defined in the same module\n  providing the function. See `issue 24\n  <https://github.com/zopefoundation/BTrees/issues/24>`_.\n\n- Fix persistency bug in the Python version\n  (`#118 <https://github.com/zopefoundation/BTrees/issues/118>`_).\n\n- Fix ``Tree.__setstate__`` to no longer accept children besides\n  tree or bucket types to prevent crashes. See `PR 143\n  <https://github.com/zopefoundation/BTrees/pull/143>`_ for details.\n\n- Make BTrees, TreeSet, Set and Buckets implements the ``__and__``,\n  ``__or__`` and ``__sub__`` special methods as shortcuts for\n  ``BTrees.Interfaces.IMerge.intersection``,\n  ``BTrees.Interfaces.IMerge.union`` and\n  ``BTrees.Interfaces.IMerge.difference``.\n\n- Add support for Python 3.9.\n\n- Build and upload aarch64 wheels.\n\n- Make a value of ``0`` in the ``PURE_PYTHON`` environment variable\n  require the C extensions (except on PyPy). Previously, and if this\n  variable is unset, missing or unusable C extensions would be\n  silently ignored. With this variable set to ``0``, an\n  ``ImportError`` will be raised if the C extensions are unavailable.\n  See `issue 156\n  <https://github.com/zopefoundation/BTrees/issues/156>`_.\n\n- Make the BTree objects (``BTree``, ``TreeSet``, ``Set``, ``Bucket``)\n  of each module actually provide the interfaces defined in\n  ``BTrees.Interfaces``. Previously, they provided no interfaces.\n\n- Make all the BTree and Bucket objects instances of\n  ``collections.abc.MutableMapping`` (that is, ``isinstance(btree,\n  MutableMapping)`` is now true; no actual inheritance has changed).\n  As part of this, they now provide the ``popitem()`` method.\n\n- Make all the TreeSet and Set objects instances of\n  ``collections.abc.MutableSet`` (that is, ``isinstance(tree_set,\n  MutableSet)`` is now true; no actual inheritance has changed).\n  As part of this, they now provide several more methods, including\n  ``isdisjoint``, ``discard``, and ``pop``, and support in-place\n  mutation operators such as ``tree_set |= other``, ``tree_set +=\n  other``, ``tree_set -= other`` and ``tree_set ^= other``. See `issue\n  121 <https://github.com/zopefoundation/BTrees/issues/121>`_.\n\n- Update the definitions of ``ISized`` and ``IReadSequence`` to simply\n  be ``zope.interface.common.collections.ISized`` and\n  ``zope.interface.common.sequence.IMinimalSequence`` respectively.\n\n- Remove the ``__nonzero__`` interface method from ``ICollection``. No\n  objects actually implemented such a method; instead, the boolean value\n  is typically taken from ``__len__``.\n\n- Adjust the definition of ``ISet`` to produce the same resolution\n  order under the C3 and legacy orderings. This means that the legacy\n  order has changed slightly, but that this package emits no warnings\n  when ``ZOPE_INTERFACE_LOG_CHANGED_IRO=1``. Note that the legacy\n  order was not being used for these objects because the C3 ordering\n  was still consistent; it could only be obtained using\n  ``ZOPE_INTERFACE_USE_LEGACY_IRO=1``. See `PR 159\n  <https://github.com/zopefoundation/BTrees/pull/159>`_ for all the\n  interface updates.\n\n- Fix the ``get``, ``setdefault`` and ``pop`` methods, as well as the\n  ``in`` operator, to not suppress ``POSKeyError`` if the object or\n  subobjects are corrupted. Previously, such errors were logged by\n  ZODB, but not propagated. See `issue 161\n  <https://github.com/zopefoundation/BTrees/issues/161>`_.\n\n4.7.2 (2020-04-07)\n==================\n\n- Fix more cases of C and Python inconsistency. The C implementation\n  now behaves like the Python implementation when it comes to integer\n  overflow for the integer keys for ``in``, ``get`` and ``has_key``.\n  Now they return False, the default value, and False, respectively in\n  both versions if the tested value would overflow or underflow.\n  Previously, the C implementation would raise ``OverflowError`` or\n  ``KeyError``, while the Python implementation functioned as\n  expected. See `issue 140\n  <https://github.com/zopefoundation/BTrees/issues/140>`_.\n\n  .. note::\n     The unspecified true return values of ``has_key``\n     have changed.\n\n\n4.7.1 (2020-03-22)\n==================\n\n- Fix the definitions of ``__all__`` in modules. In 4.7.0, they\n  incorrectly left out names. See `PR 132\n  <https://github.com/zopefoundation/BTrees/pull/132>`_.\n\n- Ensure the interface resolution order of all objects is consistent.\n  See `issue 137 <https://github.com/zopefoundation/BTrees/issues/137>`_.\n\n4.7.0 (2020-03-17)\n==================\n\n- Add unsigned variants of the trees. These use the initial \"U\" for\n  32-bit data and \"Q\" for 64-bit data (for \"quad\", which is similar to\n  what the C ``printf`` function uses and the Python struct module\n  uses).\n\n- Fix the value for ``BTrees.OIBTree.using64bits`` when using the pure Python\n  implementation (PyPy and when ``PURE_PYTHON`` is in the environment).\n\n- Make the errors that are raised when values are out of range more\n  consistent between Python 2 and Python 3 and between 32-bit and\n  64-bit variants.\n\n- Make the Bucket types consistent with the BTree types as updated in\n  versions 4.3.2: Querying for keys with default comparisons or that\n  are not integers no longer raises ``TypeError``.\n\n4.6.1 (2019-11-07)\n==================\n\n- Add support for Python 3.8.\n\n\n4.6.0 (2019-07-30)\n==================\n\n- Drop support for Python 3.4.\n\n- Fix tests against persistent 4.4.\n\n- Stop accidentally installing the 'terryfy' package in macOS wheels.\n  See `issue 98\n  <https://github.com/zopefoundation/BTrees/issues/98>`_.\n\n- Fix segmentation fault in ``bucket_repr()``.  See\n  `issue 106 <https://github.com/zopefoundation/BTrees/issues/106>`_.\n\n\n4.5.1 (2018-08-09)\n==================\n\n- Produce binary wheels for Python 3.7.\n\n- Use pyproject.toml to specify build dependencies. This requires pip\n  18 or later to build from source.\n\n\n4.5.0 (2018-04-23)\n==================\n\n- Add support for Python 3.6 and 3.7.\n- Drop support for Python 3.3.\n- Raise an ``ImportError`` consistently on Python 3 if the C extension for\n  BTrees is used but the ``persistent`` C extension is not available.\n  Previously this could result in an odd ``AttributeError``. See\n  https://github.com/zopefoundation/BTrees/pull/55\n- Fix the possibility of a rare crash in the C extension when\n  deallocating items. See https://github.com/zopefoundation/BTrees/issues/75\n- Respect the ``PURE_PYTHON`` environment variable at runtime even if\n  the C extensions are available. See\n  https://github.com/zopefoundation/BTrees/issues/78\n- Always attempt to build the C extensions, but make their success\n  optional.\n- Fix a ``DeprecationWarning`` that could come from I and L objects in\n  Python 2 in pure-Python mode. See https://github.com/zopefoundation/BTrees/issues/79\n\n4.4.1 (2017-01-24)\n==================\n\nFixed a packaging bug that caused extra files to be included (some of\nwhich caused problems in some platforms).\n\n4.4.0 (2017-01-11)\n==================\n\n- Allow None as a special key (sorted smaller than all others).\n\n  This is a bit of a return to BTrees 3 behavior in that Nones are\n  allowed as keys again.  Other objects with default ordering are\n  still not allowed as keys.\n\n4.3.2 (2017-01-05)\n==================\n\n- Make the CPython implementation consistent with the pure-Python\n  implementation and only check object keys for default comparison\n  when setting keys. In Python 2 this makes it possible to remove keys\n  that were added using a less restrictive version of BTrees. (In\n  Python 3 keys that are unorderable still cannot be removed.)\n  Likewise, all versions can unpickle trees that already had such\n  keys. See: https://github.com/zopefoundation/BTrees/issues/53 and\n  https://github.com/zopefoundation/BTrees/issues/51\n\n- Make the Python implementation consistent with the CPython\n  implementation and check object key identity before checking\n  equality and performing comparisons. This can allow fixing trees\n  that have keys that now have broken comparison functions. See\n  https://github.com/zopefoundation/BTrees/issues/50\n\n- Make the CPython implementation consistent with the pure-Python\n  implementation and no longer raise ``TypeError`` for an object key\n  (in object-keyed trees) with default comparison on ``__getitem__``,\n  ``get`` or ``in`` operations. Instead, the results will be a\n  ``KeyError``, the default value, and ``False``, respectively.\n  Previously, CPython raised a ``TypeError`` in those cases, while the\n  Python implementation behaved as specified.\n\n  Likewise, non-integer keys in integer-keyed trees\n  will raise ``KeyError``, return the default and return ``False``,\n  respectively, in both implementations. Previously, pure-Python\n  raised a ``KeyError``, returned the default, and raised a\n  ``TypeError``, while CPython raised ``TypeError`` in all three cases.\n\n4.3.1 (2016-05-16)\n==================\n\n- Packaging:  fix password used to automate wheel creation on Travis.\n\n4.3.0 (2016-05-10)\n==================\n\n- Fix unexpected ``OverflowError`` when passing 64bit values to long\n  keys / values on Win64.  See:\n  https://github.com/zopefoundation/BTrees/issues/32\n\n- When testing ``PURE_PYTHON`` environments under ``tox``, avoid poisoning\n  the user's global wheel cache.\n\n- Ensure that the pure-Python implementation, used on PyPy and when a C\n  compiler isn't available for CPython, pickles identically to the C\n  version. Unpickling will choose the best available implementation.\n  This change prevents interoperability problems and database corruption if\n  both implementations are in use. While it is no longer possible to\n  pickle a Python implementation and have it unpickle to the Python\n  implementation if the C implementation is available, existing Python\n  pickles will still unpickle to the Python implementation (until\n  pickled again). See:\n  https://github.com/zopefoundation/BTrees/issues/19\n\n- Avoid creating invalid objects when unpickling empty BTrees in a pure-Python\n  environment.\n\n- Drop support for Python 2.6 and 3.2.\n\n4.2.0 (2015-11-13)\n==================\n\n- Add support for Python 3.5.\n\n4.1.4 (2015-06-02)\n==================\n\n- Ensure that pure-Python Bucket and Set objects have a human readable\n  ``__repr__`` like the C versions.\n\n4.1.3 (2015-05-19)\n==================\n\n- Fix ``_p_changed`` when removing items from small pure-Python\n  BTrees/TreeSets and when adding items to small pure-Python Sets. See:\n  https://github.com/zopefoundation/BTrees/issues/13\n\n\n4.1.2 (2015-04-07)\n==================\n\n- Suppress testing 64-bit values in OLBTrees on 32 bit machines.\n  See:  https://github.com/zopefoundation/BTrees/issues/9\n\n- Fix ``_p_changed`` when adding items to small pure-Python\n  BTrees/TreeSets. See:\n  https://github.com/zopefoundation/BTrees/issues/11\n\n\n4.1.1 (2014-12-27)\n==================\n\n- Accomodate long values in pure-Python OLBTrees.\n\n\n4.1.0 (2014-12-26)\n==================\n\n- Add support for PyPy and PyPy3.\n\n- Add support for Python 3.4.\n\n- BTree subclasses can define ``max_leaf_size`` or ``max_internal_size``\n  to control maximum sizes for Bucket/Set and BTree/TreeSet nodes.\n\n- Detect integer overflow on 32-bit machines correctly under Python 3.\n\n- Update pure-Python and C trees / sets to accept explicit None to indicate\n  max / min value for ``minKey``, ``maxKey``.  (PR #3)\n\n- Update pure-Python trees / sets to accept explicit None to indicate\n  open ranges for ``keys``, ``values``, ``items``.  (PR #3)\n\n\n4.0.8 (2013-05-25)\n==================\n\n- Fix value-based comparison for objects under Py3k:  addresses invalid\n  merges of ``[OLI]OBTrees/OBuckets``.\n\n- Ensure that pure-Python implementation of ``OOBTree.byValue`` matches\n  semantics (reversed-sort) of C implementation.\n\n\n4.0.7 (2013-05-22)\n==================\n\n- Issue #2:  compilation error on 32-bit mode of OS/X.\n\n- Test ``PURE_PYTHON`` environment variable support:  if set, the C\n  extensions will not be built, imported, or tested.\n\n\n4.0.6 (2013-05-14)\n==================\n\n- Changed the ``ZODB`` extra to require only the real ``ZODB`` package,\n  rather than the ``ZODB3`` metapackage:  depending on the version used,\n  the metapackage could pull in stale versions of **this** package and\n  ``persistent``.\n\n- Fixed Python version check in ``setup.py``.\n\n\n4.0.5 (2013-01-15)\n==================\n\n- Fit the ``repr`` of bucket objects, which could contain garbage\n  characters.\n\n\n4.0.4 (2013-01-12)\n==================\n\n- Emulate the (private) iterators used by the C extension modules from\n  pure Python.  This change is \"cosmetic\" only:  it prevents the ZCML\n  ``zope.app.security:permission.zcml`` from failing.  The emulated\n  classes are **not** functional, and should be considered implementation\n  details.\n\n- Accomodate buildout to the fact that we no longer bundle a copy\n  of 'persistent.h'.\n\n- Fix test failures on Windows:  no longer rely on overflows from\n  ``sys.maxint``.\n\n\n4.0.3 (2013-01-04)\n==================\n\n- Added ``setup_requires==['persistent']``.\n\n\n4.0.2 (2013-01-03)\n==================\n\n- Updated Trove classifiers.\n\n- Added explicit support for Python 3.2, Python 3.3, and PyPy.\n  Note that the C extensions are not (yet) available on PyPy.\n\n- Python reference implementations now tested separately from the C\n  verions on all platforms.\n\n- 100% unit test coverage.\n\n\n4.0.1 (2012-10-21)\n==================\n\n- Provide local fallback for persistent C header inclusion if the\n  persistent distribution isn't installed. This makes the winbot happy.\n\n\n4.0.0 (2012-10-20)\n==================\n\nPlatform Changes\n----------------\n\n- Dropped support for Python < 2.6.\n\n- Factored ``BTrees`` as a separate distribution.\n\nTesting Changes\n---------------\n\n- All covered platforms tested under ``tox``.\n\n- Added support for continuous integration using ``tox`` and ``jenkins``.\n\n- Added ``setup.py dev`` alias (installs ``nose`` and ``coverage``).\n\n- Dropped dependency on ``zope.testing`` / ``zope.testrunner``:  tests now\n  run with ``setup.py test``.\n\nDocumentation Changes\n---------------------\n\n- Added API reference, generated via Spinx' autodoc.\n\n- Added Sphinx documentation based on ZODB Guide (snippets are exercised\n  via 'tox').\n\n- Added ``setup.py docs`` alias (installs ``Sphinx`` and\n  ``repoze.sphinx.autointerface``).",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "4.8.0",
  "released_versions": [
    "4.0.0",
    "4.0.1",
    "4.0.2",
    "4.0.3",
    "4.0.4",
    "4.0.5",
    "4.0.6",
    "4.0.7",
    "4.0.8",
    "4.1.0",
    "4.1.1",
    "4.1.2",
    "4.1.3",
    "4.1.4",
    "4.2.0",
    "4.3.0",
    "4.3.1",
    "4.3.2",
    "4.4.0",
    "4.4.1",
    "4.5.0",
    "4.5.1",
    "4.6.0",
    "4.6.1",
    "4.7.0",
    "4.7.1",
    "4.7.2",
    "4.8.0"
  ]
}