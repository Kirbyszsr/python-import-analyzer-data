{
  "name": "asdf",
  "description": "ASDF - Advanced Scientific Data Format\n======================================\n\n.. image:: https://github.com/asdf-format/asdf/workflows/CI/badge.svg\n    :target: https://github.com/asdf-format/asdf/actions\n    :alt: CI Status\n\n.. image:: https://github.com/asdf-format/asdf/workflows/s390x/badge.svg\n    :target: https://github.com/asdf-format/asdf/actions\n    :alt: s390x Status\n\n.. image:: https://github.com/asdf-format/asdf/workflows/Downstream/badge.svg\n    :target: https://github.com/asdf-format/asdf/actions\n    :alt: Downstream CI Status\n\n.. image:: https://readthedocs.org/projects/asdf/badge/?version=latest\n    :target: https://asdf.readthedocs.io/en/latest/\n\n.. image:: https://codecov.io/gh/asdf-format/asdf/branch/master/graphs/badge.svg\n    :target: https://codecov.io/gh/asdf-format/asdf\n\n.. image:: https://img.shields.io/pypi/l/asdf.svg\n    :target: https://img.shields.io/pypi/l/asdf.svg\n\n|\n\n.. _begin-summary-text:\n\nThe **A**\\ dvanced **S**\\ cientific **D**\\ ata **F**\\ ormat (ASDF) is a\nnext-generation interchange format for scientific data. This package\ncontains the Python implementation of the ASDF Standard. More\ninformation on the ASDF Standard itself can be found\n`here <https://asdf-standard.readthedocs.io>`__.\n\nThe ASDF format has the following features:\n\n* A hierarchical, human-readable metadata format (implemented using `YAML\n  <http://yaml.org>`__)\n* Numerical arrays are stored as binary data blocks which can be memory\n  mapped. Data blocks can optionally be compressed.\n* The structure of the data can be automatically validated using schemas\n  (implemented using `JSON Schema <http://json-schema.org>`__)\n* Native Python data types (numerical types, strings, dicts, lists) are\n  serialized automatically\n* ASDF can be extended to serialize custom data types\n\n.. _end-summary-text:\n\nASDF is under active development `on github\n<https://github.com/asdf-format/asdf>`__. More information on contributing\ncan be found `below <#contributing>`__.\n\nOverview\n--------\n\nThis section outlines basic use cases of the ASDF package for creating\nand reading ASDF files.\n\nCreating a file\n~~~~~~~~~~~~~~~\n\n.. _begin-create-file-text:\n\nWe're going to store several `numpy` arrays and other data to an ASDF file. We\ndo this by creating a \"tree\", which is simply a `dict`, and we provide it as\ninput to the constructor of `AsdfFile`:\n\n.. code:: python\n\n    import asdf\n    import numpy as np\n\n    # Create some data\n    sequence = np.arange(100)\n    squares  = sequence**2\n    random = np.random.random(100)\n\n    # Store the data in an arbitrarily nested dictionary\n    tree = {\n        'foo': 42,\n        'name': 'Monty',\n        'sequence': sequence,\n        'powers': { 'squares' : squares },\n        'random': random\n    }\n\n    # Create the ASDF file object from our data tree\n    af = asdf.AsdfFile(tree)\n\n    # Write the data to a new file\n    af.write_to('example.asdf')\n\nIf we open the newly created file, we can see some of the key features\nof ASDF on display:\n\n::\n\n    #ASDF 1.0.0\n    #ASDF_STANDARD 1.2.0\n    %YAML 1.1\n    %TAG ! tag:stsci.edu:asdf/\n    --- !core/asdf-1.1.0\n    asdf_library: !core/software-1.0.0 {author: The ASDF Developers, homepage: 'http://github.com/asdf-format/asdf',\n      name: asdf, version: 2.0.0}\n    history:\n      extensions:\n      - !core/extension_metadata-1.0.0\n        extension_class: asdf.extension.BuiltinExtension\n        software: {name: asdf, version: 2.0.0}\n    foo: 42\n    name: Monty\n    powers:\n      squares: !core/ndarray-1.0.0\n        source: 1\n        datatype: int64\n        byteorder: little\n        shape: [100]\n    random: !core/ndarray-1.0.0\n      source: 2\n      datatype: float64\n      byteorder: little\n      shape: [100]\n    sequence: !core/ndarray-1.0.0\n      source: 0\n      datatype: int64\n      byteorder: little\n      shape: [100]\n    ...\n\nThe metadata in the file mirrors the structure of the tree that was stored. It\nis hierarchical and human-readable. Notice that metadata has been added to the\ntree that was not explicitly given by the user. Notice also that the numerical\narray data is not stored in the metadata tree itself. Instead, it is stored as\nbinary data blocks below the metadata section (not shown here).\n\nIt is possible to compress the array data when writing the file:\n\n.. code:: python\n\n    af.write_to('compressed.asdf', all_array_compression='zlib')\n\nAvailable compression algorithms are ``'zlib'``, ``'bzp2'``, and\n``'lz4'``.\n\n.. _end-create-file-text:\n\nReading a file\n~~~~~~~~~~~~~~\n\n.. _begin-read-file-text:\n\nTo read an existing ASDF file, we simply use the top-level `open` function of\nthe `asdf` package:\n\n.. code:: python\n\n    import asdf\n\n    af = asdf.open('example.asdf')\n\nThe `open` function also works as a context handler:\n\n.. code:: python\n\n    with asdf.open('example.asdf') as af:\n        ...\n\nTo access the data stored in the file, use the top-level `AsdfFile.tree`\nattribute:\n\n.. code:: python\n\n    >>> import asdf\n    >>> af = asdf.open('example.asdf')\n    >>> af.tree\n    {'asdf_library': {'author': 'The ASDF Developers',\n      'homepage': 'http://github.com/asdf-format/asdf',\n      'name': 'asdf',\n      'version': '1.3.1'},\n     'foo': 42,\n     'name': 'Monty',\n     'powers': {'squares': <array (unloaded) shape: [100] dtype: int64>},\n     'random': <array (unloaded) shape: [100] dtype: float64>,\n     'sequence': <array (unloaded) shape: [100] dtype: int64>}\n\nThe tree is simply a Python `dict`, and nodes are accessed like any other\ndictionary entry:\n\n.. code:: python\n\n    >>> af.tree['name']\n    'Monty'\n    >>> af.tree['powers']\n    {'squares': <array (unloaded) shape: [100] dtype: int64>}\n\nArray data remains unloaded until it is explicitly accessed:\n\n.. code:: python\n\n    >>> af.tree['powers']['squares']\n    array([   0,    1,    4,    9,   16,   25,   36,   49,   64,   81,  100,\n            121,  144,  169,  196,  225,  256,  289,  324,  361,  400,  441,\n            484,  529,  576,  625,  676,  729,  784,  841,  900,  961, 1024,\n           1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849,\n           1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916,\n           3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225,\n           4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776,\n           5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569,\n           7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604,\n           9801])\n\n    >>> import numpy as np\n    >>> expected = [x**2 for x in range(100)]\n    >>> np.equal(af.tree['powers']['squares'], expected).all()\n    True\n\nBy default, uncompressed data blocks are memory mapped for efficient\naccess. Memory mapping can be disabled by using the ``copy_arrays``\noption of `open` when reading:\n\n.. code:: python\n\n    af = asdf.open('example.asdf', copy_arrays=True)\n\n.. _end-read-file-text:\n\nFor more information and for advanced usage examples, see the\n`documentation <#documentation>`__.\n\nExtending ASDF\n~~~~~~~~~~~~~~\n\nOut of the box, the ``asdf`` package automatically serializes and\ndeserializes native Python types. It is possible to extend ``asdf`` by\nimplementing custom tag types that correspond to custom user types. More\ninformation on extending ASDF can be found in the `official\ndocumentation <http://asdf.readthedocs.io/en/latest/asdf/extensions.html>`__.\n\nInstallation\n------------\n\n.. _begin-pip-install-text:\n\nStable releases of the ASDF Python package are registered `at\nPyPi <https://pypi.python.org/pypi/asdf>`__. The latest stable version\ncan be installed using ``pip``:\n\n::\n\n    $ pip install asdf\n\n.. _begin-source-install-text:\n\nThe latest development version of ASDF is available from the ``master`` branch\n`on github <https://github.com/asdf-format/asdf>`__. To clone the project:\n\n::\n\n    $ git clone https://github.com/asdf-format/asdf\n\nTo install:\n\n::\n\n    $ cd asdf\n    $ git submodule update --init\n    $ pip install .\n\nTo install in `development\nmode <https://packaging.python.org/tutorials/distributing-packages/#working-in-development-mode>`__::\n\n    $ pip install -e .\n\n.. note::\n\n    The source repository makes use of a git submodule for referencing the\n    schemas provided by the ASDF standard. While this submodule is\n    automatically initialized when installing the package (including in\n    development mode), it may be necessary for developers to manually update\n    the submodule if changes are made upstream. See the `documentation on git\n    submodules <https://git-scm.com/docs/git-submodule>`__ for more\n    information.\n\n.. _end-source-install-text:\n\nTesting\n-------\n\n.. _begin-testing-text:\n\nTo install the test dependencies from a source checkout of the repository:\n\n::\n\n   $ pip install -e .[tests]\n\nTo run the unit tests from a source checkout of the repository:\n\n::\n\n    $ pytest\n\nIt is also possible to run the test suite from an installed version of\nthe package.\n\n::\n\n    pip install asdf[tests]\n    pytest --pyargs asdf\n\nIt is also possible to run the tests using `tox\n<https://tox.readthedocs.io/en/latest/>`__.\n\n::\n\n   $ pip install tox\n\nTo list all available environments:\n\n::\n\n   $ tox -va\n\nTo run a specific environment:\n\n::\n\n   $ tox -e <envname>\n\n\n.. _end-testing-text:\n\nDocumentation\n-------------\n\nMore detailed documentation on this software package can be found\n`here <https://asdf.readthedocs.io>`__.\n\nMore information on the ASDF Standard itself can be found\n`here <https://asdf-standard.readthedocs.io>`__.\n\nThere are two mailing lists for ASDF:\n\n* `asdf-users <https://groups.google.com/forum/#!forum/asdf-users>`_\n* `asdf-developers <https://groups.google.com/forum/#!forum/asdf-developers>`_\n\n    If you are looking for the **A**\\ daptable **S**\\ eismic **D**\\ ata\n    **F**\\ ormat, information can be found\n    `here <https://seismic-data.org/>`__.\n\nContributing\n------------\n\nWe welcome feedback and contributions to the project. Contributions of\ncode, documentation, or general feedback are all appreciated. Please\nfollow the `contributing guidelines <CONTRIBUTING.md>`__ to submit an\nissue or a pull request.\n\nWe strive to provide a welcoming community to all of our users by\nabiding to the `Code of Conduct <CODE_OF_CONDUCT.md>`__.",
  "requires_dist": null,
  "requires_python": ">=3.6",
  "current_version": "2.8.0",
  "released_versions": [
    "0",
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.3.0",
    "1.3.1",
    "1.3.2",
    "1.3.3",
    "2.0.0",
    "2.0.1",
    "2.0.2",
    "2.0.3",
    "2.1.0",
    "2.1.1",
    "2.1.2",
    "2.2.0",
    "2.2.1",
    "2.3.0",
    "2.3.1",
    "2.3.2",
    "2.3.3",
    "2.4.1",
    "2.4.2",
    "2.5.0",
    "2.5.1",
    "2.5.2",
    "2.6.0",
    "2.7.0",
    "2.7.1",
    "2.7.2",
    "2.7.3",
    "2.7.4",
    "2.8.0"
  ]
}