{
  "name": "vulture",
  "description": "# Vulture - Find dead code\n\n![CI:Test](https://github.com/jendrikseipp/vulture/workflows/CI/badge.svg)\n[![Codecov Badge](https://codecov.io/gh/jendrikseipp/vulture/branch/master/graphs/badge.svg)](https://codecov.io/gh/jendrikseipp/vulture?branch=master)\n\nVulture finds unused code in Python programs. This is useful for\ncleaning up and finding errors in large code bases. If you run Vulture\non both your library and test suite you can find untested code.\n\nDue to Python's dynamic nature, static code analyzers like Vulture are\nlikely to miss some dead code. Also, code that is only called implicitly\nmay be reported as unused. Nonetheless, Vulture can be a very helpful\ntool for higher code quality.\n\n## Features\n\n* fast: uses static code analysis\n* tested: tests itself and has complete test coverage\n* complements pyflakes and has the same output syntax\n* sorts unused classes and functions by size with `--sort-by-size`\n* supports Python \\>= 3.6\n\n## Installation\n\n    $ pip install vulture\n\n## Usage\n\n    $ vulture myscript.py  # or\n    $ python3 -m vulture myscript.py\n    $ vulture myscript.py mypackage/\n    $ vulture myscript.py --min-confidence 100  # Only report 100% dead code.\n\nThe provided arguments may be Python files or directories. For each\ndirectory Vulture analyzes all contained\n<span class=\"title-ref\">\\*.py</span> files.\n\nVulture assigns each chunk of dead code a confidence value. A confidence\nvalue of 100% means that the code will never be executed. Values below\n100% are only estimates for how likely it is that the code is unused.\n\nAfter you have found and deleted dead code, run Vulture again, because\nit may discover more dead code.\n\n## Handling false positives\n\nWhen Vulture incorrectly reports chunks of code as unused, you have\nseveral options for suppressing the false positives. If fixing your false\npositives could benefit other users as well, please file an issue report.\n\n**Whitelists**\n\nThe recommended option is to add used code that is reported as unused to a\nPython module and add it to the list of scanned paths. To obtain such a\nwhitelist automatically, pass `--make-whitelist` to Vulture:\n\n    $ vulture mydir --make-whitelist > whitelist.py\n    $ vulture mydir whitelist.py\n\nNote that the resulting `whitelist.py` file will contain valid Python\nsyntax, but for Python to be able to *run* it, you will usually have to\nmake some modifications.\n\nWe collect whitelists for common Python modules and packages in\n`vulture/whitelists/` (pull requests are welcome).\n\n**Ignoring files**\n\nIf you want to ignore a whole file or directory, use the `--exclude`\nparameter (e.g., `--exclude *settings.py,docs/`).\n\n**Flake8 noqa comments**\n\n<!-- Hide noqa docs until we decide whether we want to support it.\nAnother way of ignoring errors is to annotate the line causing the false\npositive with `# noqa: <ERROR_CODE>` in a trailing comment (e.g., `#\nnoqa: V103`). The `ERROR_CODE` specifies what kind of dead code to\nignore (see the table below for the list of error codes). In case no\nerror code is specified, Vulture ignores all results for the line.\n(Note that the line number for decorated objects is the line number of\nthe first decorator.)\n-->\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes for ignoring unused imports (`# noqa: F401`) and unused local\nvariables (`# noqa: F841`). However, we recommend using whitelists instead\nof `noqa` comments, since `noqa` comments add visual noise to the code and\nmake it harder to read.\n\n**Ignoring names**\n\nYou can use `--ignore-names foo*,ba[rz]` to let Vulture ignore all names\nstarting with `foo` and the names `bar` and `baz`. Additionally, the\n`--ignore-decorators` option can be used to ignore functions decorated\nwith the given decorator. This is helpful for example in Flask projects,\nwhere you can use `--ignore-decorators \"@app.route\"` to ignore all\nfunctions with the `@app.route` decorator.\n\nWe recommend using whitelists instead of `--ignore-names` or\n`--ignore-decorators` whenever possible, since whitelists are\nautomatically checked for syntactic correctness when passed to Vulture\nand often you can even pass them to your Python interpreter and let it\ncheck that all whitelisted code actually still exists in your project.\n\n**Marking unused variables**\n\nThere are situations where you can't just remove unused variables, e.g.,\nin tuple assignments or function signatures. Vulture will ignore these\nvariables if they start with an underscore (e.g., `_x, y = get_pos()` or\n`def my_method(self, widget, **_kwargs)`).\n\n**Minimum confidence**\n\nYou can use the `--min-confidence` flag to set the minimum confidence\nfor code to be reported as unused. Use `--min-confidence 100` to only\nreport code that is guaranteed to be unused within the analyzed files.\n\n**Unreachable code**\n\nIf Vulture complains about code like `if False:`, you can use a Boolean\nflag `debug = False` and write `if debug:` instead. This makes the code\nmore readable and silences Vulture.\n\n**Forward references for type annotations**\n\nSee [#216](https://github.com/jendrikseipp/vulture/issues/216). For\nexample, instead of `def foo(arg: \"Sequence\"): ...`, we recommend using\n\n``` python\nfrom __future__ import annotations\n\ndef foo(arg: Sequence):\n    ...\n```\n\nif you're using Python 3.7+.\n\n\n## Configuration\n\nYou can also store command line arguments in `pyproject.toml` under the\n`tool.vulture` section. Simply remove leading dashes and replace all\nremaining dashes with underscores.\n\nOptions given on the command line have precedence over options in\n`pyproject.toml`.\n\nExample Config:\n\n``` toml\n[tool.vulture]\nexclude = [\"file*.py\", \"dir/\"]\nignore_decorators = [\"@app.route\", \"@require_*\"]\nignore_names = [\"visit_*\", \"do_*\"]\nmake_whitelist = true\nmin_confidence = 80\npaths = [\"myscript.py\", \"mydir\"]\nsort_by_size = true\nverbose = true\n```\n\n## Version control integration\n\nYou can use a [pre-commit](https://pre-commit.com/#install) hook to run\nVulture before each commit. For this, install pre-commit and add the\nfollowing to the `.pre-commit-config.yaml` file in your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/jendrikseipp/vulture\n    rev: 2.3  # or any later Vulture version\n    hooks:\n      - id: vulture\n```\n\nThen run `pre-commit install`. Finally, create a `pyproject.toml` file\nin your repository and specify all files that Vulture should check under\n`[tool.vulture] --> paths` (see above).\n\n## How does it work?\n\nVulture uses the `ast` module to build abstract syntax trees for all\ngiven files. While traversing all syntax trees it records the names of\ndefined and used objects. Afterwards, it reports the objects which have\nbeen defined, but not used. This analysis ignores scopes and only takes\nobject names into account.\n\nVulture also detects unreachable code by looking for code after\n`return`, `break`, `continue` and `raise` statements, and by searching\nfor unsatisfiable `if`- and `while`-conditions.\n\n## Sort by size\n\nWhen using the `--sort-by-size` option, Vulture sorts unused code by its\nnumber of lines. This helps developers prioritize where to look for dead\ncode first.\n\n## Examples\n\nConsider the following Python script (`dead_code.py`):\n\n``` python\nimport os\n\nclass Greeter:\n    def greet(self):\n        print(\"Hi\")\n\ndef hello_world():\n    message = \"Hello, world!\"\n    greeter = Greeter()\n    greet_func = getattr(greeter, \"greet\")\n    greet_func()\n\nif __name__ == \"__main__\":\n    hello_world()\n```\n\nCalling :\n\n    $ vulture dead_code.py\n\nresults in the following output:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:4: unused function 'greet' (60% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\nVulture correctly reports \"os\" and \"message\" as unused, but it fails to\ndetect that \"greet\" is actually used. The recommended method to deal\nwith false positives like this is to create a whitelist Python file.\n\n**Preparing whitelists**\n\nIn a whitelist we simulate the usage of variables, attributes, etc. For\nthe program above, a whitelist could look as follows:\n\n``` python\n# whitelist_dead_code.py\nfrom dead_code import Greeter\nGreeter.greet\n```\n\nAlternatively, you can pass `--make-whitelist` to Vulture and obtain an\nautomatically generated whitelist.\n\nPassing both the original program and the whitelist to Vulture\n\n    $ vulture dead_code.py whitelist_dead_code.py\n\nmakes Vulture ignore the `greet` method:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\n<!-- Hide noqa docs until we decide whether we want to support it.\n**Using \"# noqa\"**\n\n```python\nimport os  # noqa\n\nclass Greeter:  # noqa: V102\n    def greet(self):  # noqa: V103\n        print(\"Hi\")\n```\n\n## Error codes\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes.\n\n| Error codes |    Description    |\n| ----------- | ----------------- |\n| V101        | Unused attribute  |\n| V102        | Unused class      |\n| V103        | Unused function   |\n| V104, F401  | Unused import     |\n| V105        | Unused property   |\n| V106        | Unused method     |\n| V107, F841  | Unused variable   |\n| V201        | Unreachable code  |\n\n-->\n\n## Exit codes\n\n| Exit code |                          Description                          |\n| --------- | ------------------------------------------------------------- |\n|     0     | No dead code found                                            |\n|     1     | Dead code found                                               |\n|     1     | Invalid input (file missing, syntax error, wrong encoding)    |\n|     2     | Invalid command line arguments                                |\n\n## Similar programs\n\n  - [pyflakes](https://pypi.org/project/pyflakes/) finds unused imports\n    and unused local variables (in addition to many other programmatic\n    errors).\n  - [coverage](https://pypi.org/project/coverage/) finds unused code\n    more reliably than Vulture, but requires all branches of the code to\n    actually be run.\n  - [uncalled](https://pypi.org/project/uncalled/) finds dead code by\n    using the abstract syntax tree (like Vulture), regular expressions,\n    or both.\n  - [dead](https://pypi.org/project/dead/) finds dead code by using the\n    abstract syntax tree (like Vulture).\n\n## Participate\n\nPlease visit <https://github.com/jendrikseipp/vulture> to report any\nissues or to make pull requests.\n\n  - Contributing guide:\n    [CONTRIBUTING.md](https://github.com/jendrikseipp/vulture/blob/master/CONTRIBUTING.md)\n  - Release notes:\n    [CHANGELOG.md](https://github.com/jendrikseipp/vulture/blob/master/CHANGELOG.md)\n  - Roadmap:\n    [TODO.md](https://github.com/jendrikseipp/vulture/blob/master/TODO.md)\n\n\n# 2.3 (2021-01-16)\n\n* Add [pre-commit](https://pre-commit.com) hook (Cl\u00e9ment Robert, #244).\n\n# 2.2 (2021-01-15)\n\n* Only parse format strings when being used with `locals()` (jingw, #225).\n* Don't override paths in pyproject.toml with empty CLI paths (bcbnz, #228).\n* Run continuous integration tests for Python 3.9 (ju-sh, #232).\n* Use pathlib internally (ju-sh, #226).\n\n# 2.1 (2020-08-19)\n\n* Treat `getattr/hasattr(obj, \"constant_string\", ...)` as a reference to\n  `obj.constant_string` (jingw, #219).\n* Fix false positives when assigning to `x.some_name` but reading via\n  `some_name`, at the cost of potential false negatives (jingw, #221).\n* Allow reading options from `pyproject.toml` (Michel Albert, #164, #215).\n\n# 2.0 (2020-08-11)\n\n* Parse `# type: ...` comments if on Python 3.8+ (jingw, #220).\n* Bump minimum Python version to 3.6 (Jendrik Seipp, #218). The last\n  Vulture release that supports Python 2.7 and Python 3.5 is version 1.6.\n* Consider all files under `test` or `tests` directories test files\n  (Jendrik Seipp).\n* Ignore `logging.Logger.propagate` attribute (Jendrik Seipp).\n\n# 1.6 (2020-07-28)\n\n* Differentiate between functions and methods (Jendrik Seipp, #112, #209).\n* Move from Travis to GitHub actions (RJ722, #211).\n\n# 1.5 (2020-05-24)\n\n* Support flake8 \"noqa\" error codes F401 (unused import) and F841 (unused\n  local variable) (RJ722, #195).\n* Detect unreachable code in conditional expressions\n  (Agathiyan Bragadeesh, #178).\n\n# 1.4 (2020-03-30)\n\n* Ignore unused import statements in `__init__.py` (RJ722, #192).\n* Report first decorator's line number for unused decorated objects on\n  Python 3.8+ (RJ722, #200).\n* Check code with black and pyupgrade.\n\n# 1.3 (2020-02-03)\n\n* Detect redundant 'if' conditions without 'else' blocks.\n* Add whitelist for `string.Formatter` (Joseph Bylund, #183).\n\n# 1.2 (2019-11-22)\n\n* Fix tests for Python 3.8 (#166).\n* Use new `Constant` AST node under Python 3.8+ (#175).\n* Add test for f-strings (#177).\n* Add whitelist for `logging` module.\n\n# 1.1 (2019-09-23)\n\n* Add `sys.excepthook` to `sys` whitelist.\n* Add whitelist for `ctypes` module.\n* Check that type annotations are parsed and type comments are ignored\n  (thanks @kx-chen).\n* Support checking files with BOM under Python 2.7 (#170).\n\n# 1.0 (2018-10-23)\n\n* Add `--ignore-decorators` flag (thanks @RJ722).\n* Add whitelist for `threading` module (thanks @andrewhalle).\n\n# 0.29 (2018-07-31)\n\n* Add `--ignore-names` flag for ignoring names matching the given glob\n  patterns (thanks @RJ722).\n\n# 0.28 (2018-07-05)\n\n* Add `--make-whitelist` flag for reporting output in whitelist format\n  (thanks @RJ722).\n* Ignore case of `--exclude` arguments on Windows.\n* Add `*-test.py` to recognized test file patterns.\n* Add `failureException`, `longMessage` and `maxDiff` to `unittest`\n  whitelist.\n* Refer to actual objects rather than their mocks in default\n  whitelists (thanks @RJ722).\n* Don't import any Vulture modules in setup.py (thanks @RJ722).\n\n# 0.27 (2018-06-05)\n\n* Report `while (True): ... else: ...` as unreachable (thanks @RJ722).\n* Use `argparse` instead of `optparse`.\n* Whitelist Mock.return\\_value and Mock.side\\_effect in unittest.mock\n  module.\n* Drop support for Python 2.6 and 3.3.\n* Improve documentation and test coverage (thanks @RJ722).\n\n# 0.26 (2017-08-28)\n\n* Detect `async` function definitions (thanks @RJ722).\n* Add `Item.get_report()` method (thanks @RJ722).\n* Move method for finding Python modules out of Vulture class.\n\n# 0.25 (2017-08-15)\n\n* Detect unsatisfiable statements containing `and`, `or` and `not`.\n* Use filenames and line numbers as tie-breakers when sorting by size.\n* Store first and last line numbers in Item objects.\n* Pass relevant options directly to `scavenge()` and `report()`.\n\n# 0.24 (2017-08-14)\n\n* Detect unsatisfiable `while`-conditions (thanks @RJ722).\n* Detect unsatisfiable `if`- and `else`-conditions (thanks @RJ722).\n* Handle null bytes in source code.\n\n# 0.23 (2017-08-10)\n\n* Add `--min-confidence` flag (thanks @RJ722).\n\n# 0.22 (2017-08-04)\n\n* Detect unreachable code after `return`, `break`, `continue` and\n  `raise` (thanks @RJ722).\n* Parse all variable and attribute names in new format strings.\n* Extend ast whitelist.\n\n# 0.21 (2017-07-26)\n\n* If an unused item is defined multiple times, report it multiple\n  times.\n* Make size estimates for function calls more accurate.\n* Create wheel files for Vulture (thanks @RJ722).\n\n# 0.20 (2017-07-26)\n\n* Report unused tuple assignments as dead code.\n* Report attribute names that have the same names as variables as dead\n  code.\n* Let Item class inherit from `object` (thanks @RJ722).\n* Handle names imported as aliases like all other used variable names.\n* Rename Vulture.used\\_vars to Vulture.used\\_names.\n* Use function for determining which imports to ignore.\n* Only try to import each whitelist file once.\n* Store used names and used attributes in sets instead of lists.\n* Fix estimating the size of code containing ellipses (...).\n* Refactor and simplify code.\n\n# 0.19 (2017-07-20)\n\n* Don't ignore <span class=\"title-ref\">\\_\\_foo</span> variable names.\n* Use separate methods for determining whether to ignore classes and\n  functions.\n* Only try to find a whitelist for each defined import once (thanks\n  @roivanov).\n* Fix finding the last child for many types of AST nodes.\n\n# 0.18 (2017-07-17)\n\n* Make <span class=\"title-ref\">--sort-by-size</span> faster and more\n  accurate (thanks @RJ722).\n\n# 0.17 (2017-07-17)\n\n* Add <span class=\"title-ref\">get\\_unused\\_code()</span> method.\n* Return with exit code 1 when syntax errors are found or files can't\n  be read.\n\n# 0.16 (2017-07-12)\n\n* Differentiate between unused classes and functions (thanks @RJ722).\n* Add --sort-by-size option (thanks @jackric and @RJ722).\n* Count imports as used if they are accessed as module attributes.\n\n# 0.15 (2017-07-04)\n\n* Automatically include whitelists based on imported modules (thanks\n  @RJ722).\n* Add --version parameter (thanks @RJ722).\n* Add appveyor tests for testing on Windows (thanks @RJ722).\n\n# 0.14 (2017-04-06)\n\n* Add stub whitelist file for Python standard library (thanks @RJ722)\n* Ignore class names starting with \"Test\" in \"test\\_\" files (thanks\n  @thisch).\n* Ignore \"test\\_\" functions only in \"test\\_\" files.\n\n# 0.13 (2017-03-06)\n\n* Ignore star-imported names since we cannot detect whether they are\n  used.\n* Move repository to GitHub.\n\n# 0.12 (2017-01-05)\n\n* Detect unused imports.\n* Use tokenize.open() on Python \\>= 3.2 for reading input files,\n  assume UTF-8 encoding on older Python versions.\n\n# 0.11 (2016-11-27)\n\n* Use the system's default encoding when reading files.\n* Report syntax errors instead of aborting.\n\n# 0.10 (2016-07-14)\n\n* Detect unused function and method arguments (issue #15).\n* Detect unused \\*args and \\*\\*kwargs parameters.\n* Change license from GPL to MIT.\n\n# 0.9 (2016-06-29)\n\n* Don't flag attributes as unused if they are used as global variables\n  in another module (thanks Florian Bruhin).\n* Don't consider \"True\" and \"False\" variable names.\n* Abort with error message when invoked on .pyc files.\n\n# 0.8.1 (2015-09-28)\n\n* Fix code for Python 3.\n\n# 0.8 (2015-09-28)\n\n* Do not flag names imported with \"import as\" as dead code (thanks Tom\n  Terrace).\n\n# 0.7 (2015-09-26)\n\n* Exit with exitcode 1 if path on commandline can't be found.\n* Test vulture with vulture using a whitelist module for false\n  positives.\n* Add tests that run vulture as a script.\n* Add \"python setup.py test\" command for running tests.\n* Add support for tox.\n* Raise test coverage to 100%.\n* Remove ez\\_setup.py.\n\n# 0.6 (2014-09-06)\n\n* Ignore function names starting with \"test\\_\".\n* Parse variable names in new format strings (e.g. \"This is\n  {x}\".format(x=\"nice\")).\n* Only parse alphanumeric variable names in format strings and ignore\n  types.\n* Abort with exit code 1 on syntax errors.\n* Support installation under Windows by using setuptools (thanks\n  Reuben Fletcher-Costin).\n\n# 0.5 (2014-05-09)\n\n* If dead code is found, exit with 1.\n\n# 0.4.1 (2013-09-17)\n\n* Only warn if a path given on the command line cannot be found.\n\n# 0.4 (2013-06-23)\n\n* Ignore unused variables starting with an underscore.\n* Show warning for syntax errors instead of aborting directly.\n* Print warning if a file cannot be found.\n\n# 0.3 (2012-03-19)\n\n* Add support for python3\n* Report unused attributes\n* Find tuple assignments in comprehensions\n* Scan files given on the command line even if they don't end with .py\n\n# 0.2 (2012-03-18)\n\n* Only format nodes in verbose mode (gives 4x speedup).\n\n# 0.1 (2012-03-17)\n\n* First release.\n\n\n",
  "requires_dist": [
    "toml"
  ],
  "requires_python": ">=3.6",
  "current_version": "2.3",
  "released_versions": [
    "0.1",
    "0.10",
    "0.11",
    "0.12",
    "0.13",
    "0.14",
    "0.15",
    "0.16",
    "0.17",
    "0.18",
    "0.19",
    "0.2",
    "0.20",
    "0.21",
    "0.22",
    "0.23",
    "0.24",
    "0.25",
    "0.26",
    "0.27",
    "0.28",
    "0.29",
    "0.3",
    "0.4",
    "0.4.1",
    "0.5",
    "0.6",
    "0.7",
    "0.8",
    "0.8.1",
    "0.9",
    "1.0",
    "1.1",
    "1.2",
    "1.3",
    "1.4",
    "1.5",
    "1.6",
    "2.0",
    "2.1",
    "2.2",
    "2.3"
  ]
}