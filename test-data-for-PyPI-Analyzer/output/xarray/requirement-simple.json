{
  "name": "xarray",
  "description": "\n**xarray** (formerly **xray**) is an open source project and Python package\nthat makes working with labelled multi-dimensional arrays simple,\nefficient, and fun!\n\nxarray introduces labels in the form of dimensions, coordinates and\nattributes on top of raw NumPy_-like arrays, which allows for a more\nintuitive, more concise, and less error-prone developer experience.\nThe package includes a large and growing library of domain-agnostic functions\nfor advanced analytics and visualization with these data structures.\n\nxarray was inspired by and borrows heavily from pandas_, the popular data\nanalysis package focused on labelled tabular data.\nIt is particularly tailored to working with netCDF_ files, which were the\nsource of xarray's data model, and integrates tightly with dask_ for parallel\ncomputing.\n\n.. _NumPy: https://www.numpy.org\n.. _pandas: https://pandas.pydata.org\n.. _dask: https://dask.org\n.. _netCDF: https://www.unidata.ucar.edu/software/netcdf\n\nWhy xarray?\n-----------\nMulti-dimensional (a.k.a. N-dimensional, ND) arrays (sometimes called\n\"tensors\") are an essential part of computational science.\nThey are encountered in a wide range of fields, including physics, astronomy,\ngeoscience, bioinformatics, engineering, finance, and deep learning.\nIn Python, NumPy_ provides the fundamental data structure and API for\nworking with raw ND arrays.\nHowever, real-world datasets are usually more than just raw numbers;\nthey have labels which encode information about how the array values map\nto locations in space, time, etc.\n\nxarray doesn't just keep track of labels on arrays -- it uses them to provide a\npowerful and concise interface. For example:\n\n-  Apply operations over dimensions by name: ``x.sum('time')``.\n-  Select values by label instead of integer location: ``x.loc['2014-01-01']`` or ``x.sel(time='2014-01-01')``.\n-  Mathematical operations (e.g., ``x - y``) vectorize across multiple dimensions (array broadcasting) based on dimension names, not shape.\n-  Flexible split-apply-combine operations with groupby: ``x.groupby('time.dayofyear').mean()``.\n-  Database like alignment based on coordinate labels that smoothly handles missing values: ``x, y = xr.align(x, y, join='outer')``.\n-  Keep track of arbitrary metadata in the form of a Python dictionary: ``x.attrs``.\n\nLearn more\n----------\n- Documentation: `<http://xarray.pydata.org>`_\n- Issue tracker: `<http://github.com/pydata/xarray/issues>`_\n- Source code: `<http://github.com/pydata/xarray>`_\n- SciPy2015 talk: `<https://www.youtube.com/watch?v=X0pAhJgySxk>`_\n\n",
  "requires_dist": [
    "numpy (>=1.17)",
    "pandas (>=1.0)",
    "setuptools (>=40.4)",
    "scipy ; extra == 'accel'",
    "bottleneck ; extra == 'accel'",
    "numbagg ; extra == 'accel'",
    "netCDF4 ; extra == 'complete'",
    "h5netcdf ; extra == 'complete'",
    "scipy ; extra == 'complete'",
    "pydap ; extra == 'complete'",
    "zarr ; extra == 'complete'",
    "fsspec ; extra == 'complete'",
    "cftime ; extra == 'complete'",
    "rasterio ; extra == 'complete'",
    "cfgrib ; extra == 'complete'",
    "bottleneck ; extra == 'complete'",
    "numbagg ; extra == 'complete'",
    "dask[complete] ; extra == 'complete'",
    "matplotlib ; extra == 'complete'",
    "seaborn ; extra == 'complete'",
    "nc-time-axis ; extra == 'complete'",
    "netCDF4 ; extra == 'docs'",
    "h5netcdf ; extra == 'docs'",
    "scipy ; extra == 'docs'",
    "pydap ; extra == 'docs'",
    "zarr ; extra == 'docs'",
    "fsspec ; extra == 'docs'",
    "cftime ; extra == 'docs'",
    "rasterio ; extra == 'docs'",
    "cfgrib ; extra == 'docs'",
    "bottleneck ; extra == 'docs'",
    "numbagg ; extra == 'docs'",
    "dask[complete] ; extra == 'docs'",
    "matplotlib ; extra == 'docs'",
    "seaborn ; extra == 'docs'",
    "nc-time-axis ; extra == 'docs'",
    "sphinx-autosummary-accessors ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "ipython ; extra == 'docs'",
    "ipykernel ; extra == 'docs'",
    "jupyter-client ; extra == 'docs'",
    "nbsphinx ; extra == 'docs'",
    "scanpydoc ; extra == 'docs'",
    "netCDF4 ; extra == 'io'",
    "h5netcdf ; extra == 'io'",
    "scipy ; extra == 'io'",
    "pydap ; extra == 'io'",
    "zarr ; extra == 'io'",
    "fsspec ; extra == 'io'",
    "cftime ; extra == 'io'",
    "rasterio ; extra == 'io'",
    "cfgrib ; extra == 'io'",
    "dask[complete] ; extra == 'parallel'",
    "matplotlib ; extra == 'viz'",
    "seaborn ; extra == 'viz'",
    "nc-time-axis ; extra == 'viz'"
  ],
  "requires_python": ">=3.7",
  "current_version": "0.18.0",
  "released_versions": [
    "0.10.0",
    "0.10.0rc1",
    "0.10.0rc2",
    "0.10.1",
    "0.10.2",
    "0.10.3",
    "0.10.4",
    "0.10.5",
    "0.10.6",
    "0.10.7",
    "0.10.8",
    "0.10.9",
    "0.11.0",
    "0.11.1",
    "0.11.2",
    "0.11.3",
    "0.12.0",
    "0.12.1",
    "0.12.2",
    "0.12.3",
    "0.13.0",
    "0.14.0",
    "0.14.1",
    "0.15.0",
    "0.15.1",
    "0.16.0",
    "0.16.1",
    "0.16.2",
    "0.17.0",
    "0.18.0",
    "0.7.0",
    "0.7.1",
    "0.7.2",
    "0.8.0",
    "0.8.0rc1",
    "0.8.1",
    "0.8.2",
    "0.9.0",
    "0.9.0rc1",
    "0.9.1",
    "0.9.2",
    "0.9.3",
    "0.9.4",
    "0.9.5",
    "0.9.6"
  ]
}