{
  "name": "aiodns",
  "description": "===============================\nSimple DNS resolver for asyncio\n===============================\n\n.. image:: https://badge.fury.io/py/aiodns.png\n    :target: https://pypi.org/project/aiodns/\n\n.. image:: https://github.com/saghul/aiodns/workflows/CI/badge.svg\n    :target: https://github.com/saghul/aiodns/actions\n\naiodns provides a simple way for doing asynchronous DNS resolutions using `pycares <https://github.com/saghul/pycares>`_.\n\n\nExample\n=======\n\n.. code:: python\n\n    import asyncio\n    import aiodns\n\n    loop = asyncio.get_event_loop()\n    resolver = aiodns.DNSResolver(loop=loop)\n\n    async def query(name, query_type):\n        return await resolver.query(name, query_type)\n\n    coro = query('google.com', 'A')\n    result = loop.run_until_complete(coro)\n\n\nThe following query types are supported: A, AAAA, ANY, CAA, CNAME, MX, NAPTR, NS, PTR, SOA, SRV, TXT.\n\n\nAPI\n===\n\nThe API is pretty simple, three functions are provided in the ``DNSResolver`` class:\n\n* ``query(host, type)``: Do a DNS resolution of the given type for the given hostname. It returns an\n  instance of ``asyncio.Future``. The actual result of the DNS query is taken directly from pycares.\n  As of version 1.0.0 of aiodns (and pycares, for that matter) results are always namedtuple-like\n  objects with different attributes. Please check the `documentation \n  <http://pycares.readthedocs.org/en/latest/channel.html#pycares.Channel.query>`_\n  for the result fields.\n* ``gethostbyname(host, socket_family)``: Do a DNS resolution for the given\n  hostname and the desired type of address family (i.e. ``socket.AF_INET``).\n  While ``query()`` always performs a request to a DNS server,\n  ``gethostbyname()`` first looks into ``/etc/hosts`` and thus can resolve\n  local hostnames (such as ``localhost``).  Please check `the documentation\n  <http://pycares.readthedocs.io/en/latest/channel.html#pycares.Channel.gethostbyname>`_\n  for the result fields. The actual result of the call is a ``asyncio.Future``.\n* ``gethostbyaddr(name)``: Make a reverse lookup for an address.\n* ``cancel()``: Cancel all pending DNS queries. All futures will get ``DNSError`` exception set, with\n  ``ARES_ECANCELLED`` errno.\n\n\nRunning the test suite\n======================\n\nTo run the test suite: ``python tests.py``\n\n\nAuthor\n======\n\nSa\u00fal Ibarra Corretg\u00e9 <s@saghul.net>\n\n\nLicense\n=======\n\naiodns uses the MIT license, check LICENSE file.\n\n\nPython versions\n===============\n\nPython >= 3.6 are supported.\n\n\nContributing\n============\n\nIf you'd like to contribute, fork the project, make a patch and send a pull\nrequest. Have a look at the surrounding code and please, make yours look\nalike :-)\n\n\n",
  "requires_dist": [
    "pycares (>=4.0.0)"
  ],
  "requires_python": "",
  "current_version": "3.0.0",
  "released_versions": [
    "0.1.0",
    "0.2.0",
    "0.3.0",
    "0.3.1",
    "0.3.2",
    "1.0.0",
    "1.0.1",
    "1.1.0",
    "1.1.1",
    "1.2.0",
    "2.0.0",
    "2.0.0b0",
    "2.0.0b1",
    "2.0.0b2",
    "3.0.0"
  ]
}