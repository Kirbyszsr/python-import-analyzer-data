{
  "name": "pywinpty",
  "description": "# PyWinpty: Pseudoterminals for Windows in Python\n\n[![Project License - MIT](https://img.shields.io/pypi/l/pywinpty.svg)](./LICENSE.txt)\n[![pypi version](https://img.shields.io/pypi/v/pywinpty.svg)](https://pypi.org/project/pywinpty/)\n[![conda version](https://img.shields.io/conda/vn/conda-forge/pywinpty.svg)](https://www.anaconda.com/download/)\n[![download count](https://img.shields.io/conda/dn/conda-forge/pywinpty.svg)](https://www.anaconda.com/download/)\n[![Downloads](https://pepy.tech/badge/pywinpty)](https://pepy.tech/project/pywinpty)\n[![OpenCollective Backers](https://opencollective.com/spyder/backers/badge.svg?color=blue)](#backers)\n[![Join the chat at https://gitter.im/spyder-ide/public](https://badges.gitter.im/spyder-ide/spyder.svg)](https://gitter.im/spyder-ide/public)<br>\n[![PyPI status](https://img.shields.io/pypi/status/pywinpty.svg)](https://github.com/spyder-ide/pywinpty)\n[![Windows tests](https://github.com/spyder-ide/pywinpty/actions/workflows/windows_build.yml/badge.svg)](https://github.com/spyder-ide/pywinpty/actions/workflows/windows_build.yml)\n\n*Copyright \u00a9 2017\u2013 Spyder Project Contributors*\n\n\n## Overview\n\nPyWinpty allows creating and communicating with Windows processes that receive input and print outputs via console input and output pipes. PyWinpty supports both the native [ConPTY](https://devblogs.microsoft.com/commandline/windows-command-line-introducing-the-windows-pseudo-console-conpty/) interface and the previous, fallback [winpty](https://github.com/rprichard/winpty) library.\n\n\n## Dependencies\nTo compile pywinpty sources, you must have [Rust](https://rustup.rs/) and MSVC installed.\nOptionally, you can also have Winpty's C header and library files available on your include path.\n\n\n## Installation\nYou can install this library by using conda or pip package managers, as it follows:\n\nUsing conda (Recommended):\n```bash\nconda install pywinpty\n```\n\nUsing pip:\n```bash\npip install pywinpty\n```\n\n## Building from source\n\nTo build from sources, you will require both a working stable or nightly Rust toolchain with\ntarget `x86_64-pc-windows-msvc`, which can be installed using [rustup](https://rustup.rs/).\nAdditionally, you will require a working installation of [Microsoft Visual Studio C/C++](https://visualstudio.microsoft.com/es/vs/features/cplusplus/) compiler.\n\nOptionally, this library can be linked against winpty library, which you can install using conda-forge:\n\n```batch\nconda install winpty -c conda-forge\n```\n\nIf you don't want to use conda, you will need to have the winpty binaries and headers available on your PATH.\n\nFinally, pywinpty uses [Maturin](https://github.com/PyO3/maturin) as the build backend, which can be installed using `pip`:\n\n```batch\npip install maturin\n```\n\nTo test your compilation environment settings, you can build pywinpty sources locally, by\nexecuting:\n\n```bash\nmaturin develop\n```\n\nThis package depends on the following Rust crates:\n\n* [PyO3](https://github.com/PyO3/pyo3): Library used to produce Python bindings from Rust code.\n* [CXX](https://github.com/dtolnay/cxx): Call C++ libraries from Rust.\n* [Maturin](https://github.com/PyO3/maturin): Build system to build and publish Rust-based Python packages.\n* [Windows](https://github.com/microsoft/windows-rs): Rust for Windows.\n\n## Package usage\nPywinpty offers a single python wrapper around winpty library functions.\nThis implies that using a single object (``winpty.PTY``) it is possible to access to all functionality, as it follows:\n\n```python\n# High level usage using `spawn`\nfrom winpty import PtyProcess\n\nproc = PtyProcess.spawn('python')\nproc.write('print(\"hello, world!\")\\r\\n')\nproc.write('exit()\\r\\n')\nwhile proc.isalive():\n\tprint(proc.readline())\n\n# Low level usage using the raw `PTY` object\nfrom winpty import PTY\n\n# Start a new winpty-agent process of size (cols, rows)\ncols, rows = 80, 25\nprocess = PTY(cols, rows)\n\n# Spawn a new console process, e.g., CMD\nprocess.spawn(br'C:\\windows\\system32\\cmd.exe')\n\n# Read console output (Unicode)\nprocess.read()\n\n# Write input to console (Unicode)\nprocess.write(b'Text')\n\n# Resize console size\nnew_cols, new_rows = 90, 30\nprocess.set_size(new_cols, new_rows)\n\n# Know if the process is alive\nalive = process.isalive()\n\n# End winpty-agent process\ndel process\n```\n\n## Running tests\nWe use pytest to run tests as it follows (after calling ``maturin develop``), the test suite depends\non pytest-lazy-fixture, which can be installed via pip:\n\n```batch\npip install pytest pytest-lazy-fixture\n```\n\nAll the tests can be exceuted using the following command\n\n```bash\npython runtests.py\n```\n\n\n## Changelog\nVisit our [CHANGELOG](CHANGELOG.md) file to learn more about our new features and improvements.\n\n\n## Contribution guidelines\nWe follow PEP8 and PEP257 for pure python packages and Rust to compile extensions. We use MyPy type annotations for all functions and classes declared on this package. Feel free to send a PR or create an issue if you have any problem/question.\n\n\n## Backers\n\nSupport us with a monthly donation and help us continue our activities.\n\n[![Backers](https://opencollective.com/spyder/backers.svg)](https://opencollective.com/spyder#support)\n\n\n## Sponsors\n\nBecome a sponsor to get your logo on our README on Github.\n\n[![Sponsors](https://opencollective.com/spyder/sponsors.svg)](https://opencollective.com/spyder#support)\n\n",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "1.0.1",
  "released_versions": [
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.2.0",
    "0.2.1",
    "0.3.0",
    "0.4",
    "0.4.1",
    "0.5",
    "0.5.1",
    "0.5.2",
    "0.5.3",
    "0.5.4",
    "0.5.5",
    "0.5.7",
    "1.0.0",
    "1.0.0_dev0",
    "1.0.1"
  ]
}