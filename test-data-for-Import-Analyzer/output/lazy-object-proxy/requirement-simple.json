{
  "name": "lazy-object-proxy",
  "description": "========\nOverview\n========\n\n\n\nA fast and thorough lazy object proxy.\n\n* Free software: BSD 2-Clause License\n\nNote that this is based on `wrapt`_'s ObjectProxy with one big change: it calls a function the first time the proxy object is\nused, while `wrapt.ObjectProxy` just forwards the method calls to the target object.\n\nIn other words, you use `lazy-object-proxy` when you only have the object way later and you use `wrapt.ObjectProxy` when you\nwant to override few methods (by subclassing) and forward everything else to the target object.\n\nExample::\n\n    import lazy_object_proxy\n\n    def expensive_func():\n        from time import sleep\n        print('starting calculation')\n        # just as example for a very slow computation\n        sleep(2)\n        print('finished calculation')\n        # return the result of the calculation\n        return 10\n\n    obj = lazy_object_proxy.Proxy(expensive_func)\n    # function is called only when object is actually used\n    print(obj)  # now expensive_func is called\n\n    print(obj)  # the result without calling the expensive_func\n\nInstallation\n============\n\n::\n\n    pip install lazy-object-proxy\n\nDocumentation\n=============\n\nhttps://python-lazy-object-proxy.readthedocs.io/\n\nDevelopment\n===========\n\nTo run all the tests run::\n\n    tox\n\nAcknowledgements\n================\n\nThis project is based on some code from `wrapt`_ as you can see in the git history.\n\n.. _wrapt: https://github.com/GrahamDumpleton/wrapt\n\n\nChangelog\n=========\n\n1.6.0 (2021-03-22)\n------------------\n\n* Added support for async special methods (``__aiter__``, ``__anext__``,\n  ``__await__``, ``__aenter__``, ``__aexit__``).\n  These are used in the ``async for``, ``await` and ``async with`` statements.\n\n  Note that ``__await__`` returns a wrapper that tries to emulate the crazy\n  stuff going on in the ceval loop, so there will be a small performance overhead.\n* Added the ``__resolved__`` property. You can use it to check if the factory has\n  been called.\n\n1.5.2 (2020-11-26)\n------------------\n\n* Added Python 3.9 wheels.\n* Removed Python 2.7 Windows wheels\n  (not supported on newest image with Python 3.9).\n\n1.5.1 (2020-07-22)\n------------------\n\n* Added ARM64 wheels (manylinux2014).\n\n1.5.0 (2020-06-05)\n------------------\n\n* Added support for ``__fspath__``.\n* Dropped support for Python 3.4.\n\n1.4.3 (2019-10-26)\n------------------\n\n* Added binary wheels for Python 3.8.\n* Fixed license metadata.\n\n1.4.2 (2019-08-22)\n------------------\n\n* Included a ``pyproject.toml`` to allow users install the sdist with old python/setuptools, as the\n  setuptools-scm dep will be fetched by pip instead of setuptools.\n  Fixes `#30 <https://github.com/ionelmc/python-lazy-object-proxy/issues/30>`_.\n\n1.4.1 (2019-05-10)\n------------------\n\n* Fixed wheels being built with ``-coverage`` cflags. No more issues about bogus ``cext.gcda`` files.\n* Removed useless C file from wheels.\n* Changed ``setup.py`` to use setuptools-scm.\n\n1.4.0 (2019-05-05)\n------------------\n\n* Fixed ``__mod__`` for the slots backend. Contributed by Ran Benita in\n  `#28 <https://github.com/ionelmc/python-lazy-object-proxy/pull/28>`_.\n* Dropped support for Python 2.6 and 3.3. Contributed by \"hugovk\" in\n  `#24 <https://github.com/ionelmc/python-lazy-object-proxy/pull/24>`_.\n\n1.3.1 (2017-05-05)\n------------------\n\n* Fix broken release (``sdist`` had a broken ``MANIFEST.in``).\n\n1.3.0 (2017-05-02)\n------------------\n\n* Speed up arithmetic operations involving ``cext.Proxy`` subclasses.\n\n1.2.2 (2016-04-14)\n------------------\n\n* Added `manylinux <https://www.python.org/dev/peps/pep-0513/>`_ wheels.\n* Minor cleanup in readme.\n\n1.2.1 (2015-08-18)\n------------------\n\n* Fix a memory leak (the wrapped object would get bogus references). Contributed by Astrum Kuo in\n  `#10 <https://github.com/ionelmc/python-lazy-object-proxy/pull/10>`_.\n\n1.2.0 (2015-07-06)\n------------------\n\n* Don't instantiate the object when __repr__ is called. This aids with debugging (allows one to see exactly in\n  what state the proxy is).\n\n1.1.0 (2015-07-05)\n------------------\n\n* Added support for pickling. The pickled value is going to be the wrapped object *without* any Proxy container.\n* Fixed a memory management issue in the C extension (reference cycles weren't garbage collected due to improper\n  handling in the C extension). Contributed by Alvin Chow in\n  `#8 <https://github.com/ionelmc/python-lazy-object-proxy/pull/8>`_.\n\n1.0.2 (2015-04-11)\n-----------------------------------------\n\n* First release on PyPI.\n\n\n",
  "requires_dist": null,
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*",
  "current_version": "1.6.0",
  "released_versions": [
    "0.0.1",
    "0.1.0",
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.3.0",
    "1.3.1",
    "1.4.0",
    "1.4.1",
    "1.4.2",
    "1.4.3",
    "1.5.0",
    "1.5.1",
    "1.5.2",
    "1.6.0"
  ]
}