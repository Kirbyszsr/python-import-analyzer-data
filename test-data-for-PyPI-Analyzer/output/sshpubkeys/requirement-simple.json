{
  "name": "sshpubkeys",
  "description": "OpenSSH Public Key Parser for Python\n====================================\n\n.. image:: https://github.com/ojarva/python-sshpubkeys/workflows/Run%20python%20tests/badge.svg\n\nMajor changes between versions 2 and 3\n--------------------------------------\n\n- Dropped support for Python 2.6 and 3.3\n- Even in loose mode, DSA keys must be 1024, 2048, or 3072 bits (earlier this was looser)\n- The interface (API) is exactly the same\n\n\nUsage\n-----\n\nNative implementation for validating OpenSSH public keys.\n\nCurrently ssh-rsa, ssh-dss (DSA), ssh-ed25519 and ecdsa keys with NIST curves are supported.\n\nInstallation:\n\n::\n\n  pip install sshpubkeys\n\nor clone the `repository <https://github.com/ojarva/sshpubkeys>`_ and use\n\n::\n\n  python setup.py install\n\nUsage:\n\n::\n\n  import sys\n  from sshpubkeys import SSHKey\n\n  ssh = SSHKey(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAYQCxO38tKAJXIs9ivPxt7AY\"\n        \"dfybgtAR1ow3Qkb9GPQ6wkFHQqcFDe6faKCxH6iDRteo4D8L8B\"\n        \"xwzN42uZSB0nfmjkIxFTcEU3mFSXEbWByg78aoddMrAAjatyrh\"\n        \"H1pON6P0= ojarva@ojar-laptop\", strict=True)\n  try:\n      ssh.parse()\n  except InvalidKeyError as err:\n      print(\"Invalid key:\", err)\n      sys.exit(1)\n  except NotImplementedError as err:\n      print(\"Invalid key type:\", err)\n      sys.exit(1)\n\n  print(ssh.bits)  # 768\n  print(ssh.hash_md5())  # 56:84:1e:90:08:3b:60:c7:29:70:5f:5e:25:a6:3b:86\n  print(ssh.hash_sha256())  # SHA256:xk3IEJIdIoR9MmSRXTP98rjDdZocmXJje/28ohMQEwM\n  print(ssh.hash_sha512())  # SHA512:1C3lNBhjpDVQe39hnyy+xvlZYU3IPwzqK1rVneGavy6O3/ebjEQSFvmeWoyMTplIanmUK1hmr9nA8Skmj516HA\n  print(ssh.comment)  # ojar@ojar-laptop\n  print(ssh.options_raw)  # None (string of optional options at the beginning of public key)\n  print(ssh.options)  # None (options as a dictionary, parsed and validated)\n\n\nParsing of `authorized_keys` files:\n\n::\n\n  import os\n  from sshpubkeys import AuthorizedKeysFile\n  f = open(os.environ[\"HOME\"] + \"/.ssh/authorized_keys\", \"r\")\n  key_file = AuthorizedKeysFile(f, strict=False)\n\n  for key in key_file.keys:\n      print(key.key_type, key.bits, key.hash_sha512())\n\n\nOptions\n-------\n\nSet options in constructor as a keywords (i.e., `SSHKey(None, strict=False)`)\n\n- strict: defaults to True. Disallows keys OpenSSH's ssh-keygen refuses to create. For instance, this includes DSA keys where length != 1024 bits and RSA keys shorter than 1024-bit. If set to False, tries to allow all keys OpenSSH accepts, including highly insecure 1-bit DSA keys.\n- skip_option_parsing: if set to True, options string is not parsed (ssh.options_raw is populated, but ssh.options is not).\n- disallow_options: if set to True, options are not allowed and it will raise an\n  InvalidOptionsError.\n\nExceptions\n----------\n\n- NotImplementedError if invalid ecdsa curve or unknown key type is encountered.\n- InvalidKeyError if any other error is encountered:\n    - TooShortKeyError if key is too short (<768 bits for RSA, <1024 for DSA, <256 for ED25519)\n    - TooLongKeyError if key is too long (>16384 for RSA, >1024 for DSA, >256 for ED25519)\n    - InvalidTypeError if key type (\"ssh-rsa\" in above example) does not match to what is included in base64 encoded data.\n    - MalformedDataError if decoding and extracting the data fails.\n    - InvalidOptionsError if options string is invalid.\n        - InvalidOptionNameError if option name contains invalid characters.\n            - UnknownOptionNameError if option name is not recognized.\n        - MissingMandatoryOptionValueError if option needs to have parameter, but it is absent.\n\nTests\n-----\n\nSee \"`tests/ <https://github.com/ojarva/sshpubkeys/tree/master/tests>`_\" folder for unit tests. Use\n\n::\n\n  python setup.py test\n\nor\n\n::\n\n  python3 setup.py test\n\nto run test suite. If you have keys that are not parsed properly, or malformed keys that raise incorrect exception, please send your *public key* to olli@jarva.fi, and I'll include it. Alternatively, `create a new issue <https://github.com/ojarva/sshpubkeys/issues/new>`_ or make `a pull request <https://github.com/ojarva/sshpubkeys/compare>`_ in github.\n\n\n",
  "requires_dist": [
    "cryptography (>=2.1.4)",
    "ecdsa (>=0.13)",
    "twine ; extra == 'dev'",
    "wheel ; extra == 'dev'",
    "yapf ; extra == 'dev'"
  ],
  "requires_python": ">=3",
  "current_version": "3.3.1",
  "released_versions": [
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.0.4",
    "1.0.5",
    "1.0.6",
    "1.1.0",
    "1.2.1",
    "1.2.2",
    "2.1.0",
    "2.2.0",
    "2.3.0",
    "3.0.0",
    "3.1.0",
    "3.2.0",
    "3.3.0",
    "3.3.1"
  ]
}