{
  "name": "sphinx-autodoc-typehints",
  "description": "sphinx-autodoc-typehints\n========================\n\nThis extension allows you to use Python 3 annotations for documenting acceptable argument types\nand return value types of functions. This allows you to use type hints in a very natural fashion,\nallowing you to migrate from this:\n\n.. code-block:: python\n\n    def format_unit(value, unit):\n        \"\"\"\n        Formats the given value as a human readable string using the given units.\n\n        :param float|int value: a numeric value\n        :param str unit: the unit for the value (kg, m, etc.)\n        :rtype: str\n        \"\"\"\n        return '{} {}'.format(value, unit)\n\nto this:\n\n.. code-block:: python\n\n    from typing import Union\n\n    def format_unit(value: Union[float, int], unit: str) -> str:\n        \"\"\"\n        Formats the given value as a human readable string using the given units.\n\n        :param value: a numeric value\n        :param unit: the unit for the value (kg, m, etc.)\n        \"\"\"\n        return '{} {}'.format(value, unit)\n\n\nInstallation and setup\n----------------------\n\nFirst, use pip to download and install the extension::\n\n    $\u00a0pip install sphinx-autodoc-typehints\n\nThen, add the extension to your ``conf.py``:\n\n.. code-block:: python\n\n    extensions = [\n        'sphinx.ext.autodoc',\n        'sphinx_autodoc_typehints'\n    ]\n\n\nOptions\n-------\n\nThe following configuration options are accepted:\n\n* ``set_type_checking_flag`` (default: ``False``): if ``True``, set ``typing.TYPE_CHECKING`` to\n  ``True`` to enable \"expensive\" typing imports\n* ``typehints_fully_qualified`` (default: ``False``): if ``True``, class names are always fully\n  qualified (e.g. ``module.for.Class``). If ``False``, just the class name displays (e.g.\n  ``Class``)\n* ``always_document_param_types`` (default: ``False``): If ``False``, do not add type info for\n  undocumented parameters.  If ``True``, add stub documentation for undocumented parameters to\n  be able to add type info.\n* ``typehints_document_rtype`` (default: ``True``): If ``False``, never add an ``:rtype:`` directive.\n  If ``True``, add the ``:rtype:`` directive if no existing ``:rtype:`` is found.\n* ``simplify_optional_unions`` (default: ``True``): If ``True``, optional parameters of type \"Union[...]\"\n  are simplified as being of type Union[..., None] in the resulting documention\n  (e.g. Optional[Union[A, B]] -> Union[A, B, None]).\n  If ``False``, the \"Optional\"-type is kept.\n  Note: If ``False``, **any** Union containing ``None`` will be displayed as Optional!\n  Note: If an optional parameter has only a single type (e.g Optional[A] or Union[A, None]),\n  it will **always** be displayed as Optional!\n\nHow it works\n------------\n\nThe extension listens to the ``autodoc-process-signature`` and ``autodoc-process-docstring``\nSphinx events. In the former, it strips the annotations from the function signature. In the latter,\nit injects the appropriate ``:type argname:`` and ``:rtype:`` directives into the docstring.\n\nOnly arguments that have an existing ``:param:`` directive in the docstring get their respective\n``:type:`` directives added. The ``:rtype:`` directive is added if and only if no existing\n``:rtype:`` is found.\n\n\nCompatibility with sphinx.ext.napoleon\n--------------------------------------\n\nTo use `sphinx.ext.napoleon`_ with sphinx-autodoc-typehints, make sure you load\n`sphinx.ext.napoleon`_ first, **before** sphinx-autodoc-typehints. See `Issue 15`_ on the issue\ntracker for more information.\n\n.. _sphinx.ext.napoleon: http://www.sphinx-doc.org/en/stable/ext/napoleon.html\n.. _Issue 15: https://github.com/agronholm/sphinx-autodoc-typehints/issues/15\n\n\nDealing with circular imports\n-----------------------------\n\nSometimes functions or classes from two different modules need to reference each other in their\ntype annotations. This creates a circular import problem. The solution to this is the following:\n\n#. Import only the module, not the classes/functions from it\n#. Use forward references in the type annotations (e.g.\n   ``def methodname(self, param1: 'othermodule.OtherClass'):``)\n\nOn Python 3.7, you can even use ``from __future__ import annotations`` and remove the quotes.\n\n\nUsing type hint comments\n------------------------\n\nIf you're documenting code that needs to stay compatible with Python 2.7, you cannot use regular\ntype annotations. Instead, you must either be using Python 3.8 or later or have typed_ast_\ninstalled. The package extras ``type_comments`` will pull in the appropiate dependencies automatically.\nThen you can add type hint comments in the following manner:\n\n.. code-block:: python\n\n    def myfunction(arg1, arg2):\n        # type: (int, str) -> int\n        return 42\n\nor alternatively:\n\n.. code-block:: python\n\n    def myfunction(\n        arg1,  # type: int\n        arg2  # type: str\n    ):\n        # type: (...) -> int\n        return 42\n\n.. _typed_ast: https://pypi.org/project/typed-ast/\n\n\n",
  "requires_dist": [
    "Sphinx (>=3.0)",
    "pytest (>=3.1.0) ; extra == 'test'",
    "typing-extensions (>=3.5) ; extra == 'test'",
    "sphobjinv (>=2.0) ; extra == 'test'",
    "Sphinx (>=3.2.0) ; extra == 'test'",
    "dataclasses ; (python_version == \"3.6\") and extra == 'test'",
    "typed-ast (>=1.4.0) ; (python_version < \"3.8\") and extra == 'type_comments'"
  ],
  "requires_python": ">=3.6",
  "current_version": "1.12.0",
  "released_versions": [
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.0.4",
    "1.0.5",
    "1.0.6",
    "1.1.0",
    "1.10.0",
    "1.10.1",
    "1.10.2",
    "1.10.3",
    "1.11.0",
    "1.11.1",
    "1.12.0",
    "1.2.0",
    "1.2.1",
    "1.2.3",
    "1.2.4",
    "1.2.5",
    "1.3.0",
    "1.4.0",
    "1.5.0",
    "1.5.1",
    "1.5.2",
    "1.6.0",
    "1.7.0",
    "1.8.0",
    "1.9.0"
  ]
}