{
  "name": "argh",
  "description": "Argh: The Natural CLI\n=====================\n\n.. image:: https://img.shields.io/coveralls/neithere/argh.svg\n    :target: https://coveralls.io/r/neithere/argh\n\n.. image:: https://img.shields.io/travis/neithere/argh.svg\n    :target: https://travis-ci.org/neithere/argh\n\n.. image:: https://img.shields.io/pypi/format/argh.svg\n    :target: https://pypi.python.org/pypi/argh\n\n.. image:: https://img.shields.io/pypi/status/argh.svg\n    :target: https://pypi.python.org/pypi/argh\n\n.. image:: https://img.shields.io/pypi/v/argh.svg\n    :target: https://pypi.python.org/pypi/argh\n\n.. image:: https://img.shields.io/pypi/pyversions/argh.svg\n    :target: https://pypi.python.org/pypi/argh\n\n.. image:: https://img.shields.io/pypi/dd/argh.svg\n    :target: https://pypi.python.org/pypi/argh\n\n.. image:: https://readthedocs.org/projects/argh/badge/?version=stable\n    :target: http://argh.readthedocs.org/en/stable/\n\n.. image:: https://readthedocs.org/projects/argh/badge/?version=latest\n    :target: http://argh.readthedocs.org/en/latest/\n\nBuilding a command-line interface?  Found yourself uttering \"argh!\" while\nstruggling with the API of `argparse`?  Don't like the complexity but need\nthe power?\n\n.. epigraph::\n\n    Everything should be made as simple as possible, but no simpler.\n\n    -- Albert Einstein (probably)\n\n`Argh` is a smart wrapper for `argparse`.  `Argparse` is a very powerful tool;\n`Argh` just makes it easy to use.\n\nIn a nutshell\n-------------\n\n`Argh`-powered applications are *simple* but *flexible*:\n\n:Modular:\n    Declaration of commands can be decoupled from assembling and dispatching;\n\n:Pythonic:\n    Commands are declared naturally, no complex API calls in most cases;\n\n:Reusable:\n    Commands are plain functions, can be used directly outside of CLI context;\n\n:Layered:\n    The complexity of code raises with requirements;\n\n:Transparent:\n    The full power of argparse is available whenever needed;\n\n:Namespaced:\n    Nested commands are a piece of cake, no messing with subparsers (though\n    they are of course used under the hood);\n\n:Term-Friendly:\n    Command output is processed with respect to stream encoding;\n\n:Unobtrusive:\n    `Argh` can dispatch a subset of pure-`argparse` code, and pure-`argparse`\n    code can update and dispatch a parser assembled with `Argh`;\n\n:DRY:\n    The amount of boilerplate code is minimal; among other things, `Argh` will:\n\n    * infer command name from function name;\n    * infer arguments from function signature;\n    * infer argument type from the default value;\n    * infer argument action from the default value (for booleans);\n    * add an alias root command ``help`` for the ``--help`` argument.\n\n:NIH free:\n    `Argh` supports *completion*, *progress bars* and everything else by being\n    friendly to excellent 3rd-party libraries.  No need to reinvent the wheel.\n\nSounds good?  Check the tutorial!\n\nRelation to argparse\n--------------------\n\n`Argh` is fully compatible with `argparse`.  You can mix `Argh`-agnostic and\n`Argh`-aware code.  Just keep in mind that the dispatcher does some extra work\nthat a custom dispatcher may not do.\n\nInstallation\n------------\n\nUsing pip::\n\n    $ pip install argh\n\nArch Linux (AUR)::\n\n    $ yaourt python-argh\n\nExamples\n--------\n\nA very simple application with one command:\n\n.. code-block:: python\n\n    import argh\n\n    def main():\n        return 'Hello world'\n\n    argh.dispatch_command(main)\n\nRun it:\n\n.. code-block:: bash\n\n    $ ./app.py\n    Hello world\n\nA potentially modular application with multiple commands:\n\n.. code-block:: python\n\n    import argh\n\n    # declaring:\n\n    def echo(text):\n        \"Returns given word as is.\"\n        return text\n\n    def greet(name, greeting='Hello'):\n        \"Greets the user with given name. The greeting is customizable.\"\n        return greeting + ', ' + name\n\n    # assembling:\n\n    parser = argh.ArghParser()\n    parser.add_commands([echo, greet])\n\n    # dispatching:\n\n    if __name__ == '__main__':\n        parser.dispatch()\n\nOf course it works:\n\n.. code-block:: bash\n\n    $ ./app.py greet Andy\n    Hello, Andy\n\n    $ ./app.py greet Andy -g Arrrgh\n    Arrrgh, Andy\n\nHere's the auto-generated help for this application (note how the docstrings\nare reused)::\n\n    $ ./app.py help\n\n    usage: app.py {echo,greet} ...\n\n    positional arguments:\n        echo        Returns given word as is.\n        greet       Greets the user with given name. The greeting is customizable.\n\n...and for a specific command (an ordinary function signature is converted\nto CLI arguments)::\n\n    $ ./app.py help greet\n\n    usage: app.py greet [-g GREETING] name\n\n    Greets the user with given name. The greeting is customizable.\n\n    positional arguments:\n      name\n\n    optional arguments:\n      -g GREETING, --greeting GREETING   'Hello'\n\n(The help messages have been simplified a bit for brevity.)\n\n`Argh` easily maps plain Python functions to CLI.  Sometimes this is not\nenough; in these cases the powerful API of `argparse` is also available:\n\n.. code-block:: python\n\n    @arg('text', default='hello world', nargs='+', help='The message')\n    def echo(text):\n        print text\n\nThe approaches can be safely combined even up to this level:\n\n.. code-block:: python\n\n    # adding help to `foo` which is in the function signature:\n    @arg('foo', help='blah')\n    # these are not in the signature so they go to **kwargs:\n    @arg('baz')\n    @arg('-q', '--quux')\n    # the function itself:\n    def cmd(foo, bar=1, *args, **kwargs):\n        yield foo\n        yield bar\n        yield ', '.join(args)\n        yield kwargs['baz']\n        yield kwargs['quux']\n\nLinks\n-----\n\n* `Project home page`_ (GitHub)\n* `Documentation`_ (Read the Docs)\n* `Package distribution`_ (PyPI)\n* Questions, requests, bug reports, etc.:\n\n  * `Issue tracker`_ (GitHub)\n  * `Mailing list`_ (subscribe to get important announcements)\n  * Direct e-mail (neithere at gmail com)\n\n.. _project home page: http://github.com/neithere/argh/\n.. _documentation: http://argh.readthedocs.org\n.. _package distribution: http://pypi.python.org/pypi/argh\n.. _issue tracker: http://github.com/neithere/argh/issues/\n.. _mailing list: http://groups.google.com/group/argh-users\n\nAuthor\n------\n\nDeveloped by Andrey Mikhaylenko since 2010.\n\nSee file `AUTHORS` for a complete list of contributors to this library.\n\nSupport\n-------\n\nThe fastest way to improve this project is to submit tested and documented\npatches or detailed bug reports.\n\nOtherwise you can \"flattr\" me: |FlattrLink|_\n\n.. _FlattrLink: https://flattr.com/submit/auto?user_id=neithere&url=http%3A%2F%2Fpypi.python.org%2Fpypi%2Fargh\n.. |FlattrLink| image:: https://api.flattr.com/button/flattr-badge-large.png\n   :alt: Flattr the Argh project\n\nLicensing\n---------\n\nArgh is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nArgh is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with Argh.  If not, see <http://gnu.org/licenses/>.",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "0.26.2",
  "released_versions": [
    "0.1.0",
    "0.1.1",
    "0.10.0",
    "0.10.1",
    "0.10.2",
    "0.11.0",
    "0.12.0",
    "0.13.0",
    "0.14.0",
    "0.14.1",
    "0.14.2",
    "0.15.0",
    "0.15.1",
    "0.16.0",
    "0.17.0",
    "0.17.1",
    "0.17.2",
    "0.18.0",
    "0.19.0",
    "0.2.0",
    "0.20.0",
    "0.21.0",
    "0.21.1",
    "0.21.2",
    "0.22.0",
    "0.23.0",
    "0.23.1",
    "0.23.2",
    "0.23.3",
    "0.24.0",
    "0.24.1",
    "0.25.0",
    "0.26.0",
    "0.26.0-dev",
    "0.26.1",
    "0.26.2",
    "0.4.0",
    "0.5.0",
    "0.5.1",
    "0.5.2",
    "0.6.0",
    "0.7.0",
    "0.8.0",
    "0.8.1",
    "0.9.0"
  ]
}