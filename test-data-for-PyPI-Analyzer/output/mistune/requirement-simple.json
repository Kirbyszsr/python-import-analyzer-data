{
  "name": "mistune",
  "description": "Mistune\n=======\n\nThe fastest markdown parser in pure Python with renderer features,\ninspired by marked_.\n\n.. image:: https://img.shields.io/badge/donate-lepture-green.svg\n   :target: https://lepture.com/donate\n   :alt: Donate lepture\n.. image:: https://img.shields.io/pypi/wheel/mistune.svg?style=flat\n   :target: https://pypi.python.org/pypi/mistune/\n   :alt: Wheel Status\n.. image:: https://anaconda.org/conda-forge/mistune/badges/version.svg\n   :target: https://anaconda.org/conda-forge/mistune\n   :alt: Conda Version\n.. image:: https://img.shields.io/pypi/v/mistune.svg\n   :target: https://pypi.python.org/pypi/mistune/\n   :alt: Latest Version\n.. image:: https://travis-ci.org/lepture/mistune.svg?branch=master\n   :target: https://travis-ci.org/lepture/mistune\n   :alt: Travis CI Status\n.. image:: https://coveralls.io/repos/lepture/mistune/badge.svg?branch=master\n   :target: https://coveralls.io/r/lepture/mistune\n   :alt: Coverage Status\n.. image:: https://ci.appveyor.com/api/projects/status/8ai8tfwp75oela17?svg=true\n   :target: https://ci.appveyor.com/project/lepture/mistune\n   :alt: App Veyor CI Status\n\n.. _marked: https://github.com/chjj/marked\n\n\nFeatures\n--------\n\n* **Pure Python**. Tested in Python 2.7, Python 3.5+ and PyPy.\n* **Very Fast**. It is the fastest in all **pure Python** markdown parsers.\n* **More Features**. Table, footnotes, autolink, fenced code etc.\n\nView the `benchmark results <https://github.com/lepture/mistune/issues/1>`_.\n\nInstallation\n------------\n\nInstalling mistune with pip::\n\n    $ pip install mistune\n\n\nMistune can be faster, if you compile with cython::\n\n    $ pip install cython mistune\n\n\nBasic Usage\n-----------\n\nA simple API that render a markdown formatted text:\n\n.. code:: python\n\n    import mistune\n\n    mistune.markdown('I am using **mistune markdown parser**')\n    # output: <p>I am using <strong>mistune markdown parser</strong></p>\n\nIf you care about performance, it is better to re-use the Markdown instance:\n\n.. code:: python\n\n    import mistune\n\n    markdown = mistune.Markdown()\n    markdown('I am using **mistune markdown parser**')\n\nMistune has enabled all features by default. You don't have to configure\nanything. But there are options for you to change the parser behaviors.\n\n\nOptions\n-------\n\nHere is a list of all options that will affect the rendering results,\nconfigure them with ``mistune.Renderer``:\n\n.. code:: python\n\n    renderer = mistune.Renderer(escape=True, hard_wrap=True)\n    # use this renderer instance\n    markdown = mistune.Markdown(renderer=renderer)\n    markdown(text)\n\n* **escape**: if set to *False*, all raw html tags will not be escaped.\n* **hard_wrap**: if set to *True*, it will has GFM line breaks feature.\n  All new lines will be replaced with ``<br>`` tag\n* **use_xhtml**: if set to *True*, all tags will be in xhtml, for example: ``<hr />``.\n* **parse_block_html**: parse text only in block level html.\n* **parse_inline_html**: parse text only in inline level html.\n\nWhen using the default renderer, you can use one of the following shortcuts::\n\n    mistune.markdown(text, escape=True, hard_wrap=True)\n\n    markdown = mistune.Markdown(escape=True, hard_wrap=True)\n    markdown(text)\n\n\nRenderer\n--------\n\nLike misaka/sundown, you can influence the rendering by custom renderers.\nAll you need to do is subclassing a `Renderer` class.\n\nHere is an example of code highlighting:\n\n.. code:: python\n\n    import mistune\n    from pygments import highlight\n    from pygments.lexers import get_lexer_by_name\n    from pygments.formatters import html\n\n    class HighlightRenderer(mistune.Renderer):\n        def block_code(self, code, lang):\n            if not lang:\n                return '\\n<pre><code>%s</code></pre>\\n' % \\\n                    mistune.escape(code)\n            lexer = get_lexer_by_name(lang, stripall=True)\n            formatter = html.HtmlFormatter()\n            return highlight(code, lexer, formatter)\n\n    renderer = HighlightRenderer()\n    markdown = mistune.Markdown(renderer=renderer)\n    print(markdown('```python\\nassert 1 == 1\\n```'))\n\nFind more renderers in `mistune-contrib`_.\n\nBlock Level\n~~~~~~~~~~~\n\nHere is a list of block level renderer API::\n\n    block_code(code, language=None)\n    block_quote(text)\n    block_html(html)\n    header(text, level, raw=None)\n    hrule()\n    list(body, ordered=True)\n    list_item(text)\n    paragraph(text)\n    table(header, body)\n    table_row(content)\n    table_cell(content, **flags)\n\nThe *flags* tells you whether it is header with ``flags['header']``. And it\nalso tells you the align with ``flags['align']``.\n\n\nSpan Level\n~~~~~~~~~~\n\nHere is a list of span level renderer API::\n\n    autolink(link, is_email=False)\n    codespan(text)\n    double_emphasis(text)\n    emphasis(text)\n    image(src, title, alt_text)\n    linebreak()\n    newline()\n    link(link, title, content)\n    strikethrough(text)\n    text(text)\n    inline_html(text)\n\nFootnotes\n~~~~~~~~~\n\nHere is a list of renderers related to footnotes::\n\n    footnote_ref(key, index)\n    footnote_item(key, text)\n    footnotes(text)\n\nLexers\n------\n\nSometimes you want to add your own rules to Markdown, such as GitHub Wiki\nlinks. You can't achieve this goal with renderers. You will need to deal\nwith the lexers, it would be a little difficult for the first time.\n\nWe will take an example for GitHub Wiki links: ``[[Page 2|Page 2]]``.\nIt is an inline grammar, which requires custom ``InlineGrammar`` and\n``InlineLexer``:\n\n.. code:: python\n\n    import copy,re\n    from mistune import Renderer, InlineGrammar, InlineLexer\n\n    class WikiLinkRenderer(Renderer):\n        def wiki_link(self, alt, link):\n            return '<a href=\"%s\">%s</a>' % (link, alt)\n\n    class WikiLinkInlineLexer(InlineLexer):\n        def enable_wiki_link(self):\n            # add wiki_link rules\n            self.rules.wiki_link = re.compile(\n                r'\\[\\['                   # [[\n                r'([\\s\\S]+?\\|[\\s\\S]+?)'   # Page 2|Page 2\n                r'\\]\\](?!\\])'             # ]]\n            )\n\n            # Add wiki_link parser to default rules\n            # you can insert it some place you like\n            # but place matters, maybe 3 is not good\n            self.default_rules.insert(3, 'wiki_link')\n\n        def output_wiki_link(self, m):\n            text = m.group(1)\n            alt, link = text.split('|')\n            # you can create an custom render\n            # you can also return the html if you like\n            return self.renderer.wiki_link(alt, link)\n\nYou should pass the inline lexer to ``Markdown`` parser:\n\n.. code:: python\n\n    renderer = WikiLinkRenderer()\n    inline = WikiLinkInlineLexer(renderer)\n    # enable the feature\n    inline.enable_wiki_link()\n    markdown = Markdown(renderer, inline=inline)\n    markdown('[[Link Text|Wiki Link]]')\n\nIt is the same with block level lexer. It would take a while to understand\nthe whole mechanism. But you won't do the trick a lot.\n\n\nContribution & Extensions\n-------------------------\n\nMistune itself doesn't accept any extension. It will always be a simple one\nfile script.\n\nIf you want to add features, you can head over to `mistune-contrib`_.\n\nHere are some extensions already in `mistune-contrib`_:\n\n* Math/MathJax features\n* Highlight Code Renderer\n* TOC table of content features\n* MultiMarkdown Metadata parser\n\nGet inspired with the contrib repository.\n\n.. _`mistune-contrib`: https://github.com/lepture/mistune-contrib\n\n\n",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "0.8.4",
  "released_versions": [
    "0.1.0",
    "0.2.0",
    "0.3.0",
    "0.3.1",
    "0.4",
    "0.4.1",
    "0.5",
    "0.5.1",
    "0.6",
    "0.7",
    "0.7.1",
    "0.7.2",
    "0.7.3",
    "0.7.4",
    "0.8",
    "0.8.1",
    "0.8.2",
    "0.8.3",
    "0.8.4",
    "2.0.0a1",
    "2.0.0a2",
    "2.0.0a3",
    "2.0.0a4",
    "2.0.0a5",
    "2.0.0a6",
    "2.0.0rc1"
  ]
}