{
  "name": "django-discover-runner",
  "description": "django-discover-runner\n======================\n\n.. note::\n\n    This runner has been added to Django 1.6 as the default test runner.\n    If you use Django 1.6 or above you don't need this app.\n\nAn alternative Django ``TEST_RUNNER`` which uses the unittest2_ test discovery\nfrom a base path specified in the settings, or any other module or package\nspecified to the ``test`` management command -- including app tests.\n\nIf you just run ``./manage.py test``, it'll discover and run all tests\nunderneath the current working directory. E.g. if you run\n``./manage.py test full.dotted.path.to.test_module``, it'll run the tests in\nthat module (you can also pass multiple modules). If you give it a single\ndotted path to a package (like a Django app) like ``./manage.py test myapp``\nand that package does not itself directly contain any tests, it'll do\ntest discovery in all submodules of that package.\n\n.. note::\n\n    This code uses the default unittest2_ test discovery behavior, which\n    only searches for tests in files named ``test*.py``. To override this\n    see the ``TEST_DISCOVER_PATTERN`` setting or use the ``--pattern``\n    option.\n\nWhy?\n----\n\nDjango's own test discovery is very much tied to the directory structure\nof Django apps, partly due to historic reasons (the unittest library\ndidn't have its own discovery for a long time) and prevents Django app\nauthors from being good Python citizens. django-discover-runner uses the\nofficial test discovery feature of the new unittest2_ library which is\nincluded in Django.\n\nBy default there is no way to put project specific tests in a separate\nfolder outside the Python package of the Django project, which is a great\nway to organize your code, separating the tests and non-test code.\ndjango-discover-runner helps you clean up your project tests.\n\nThere is also no way to specify fully dotted import paths to test\nmodules, functions, class or methods to the ``test`` management command\nbut only Django's odd standard ``<appname>.<TestClassName>``.\ndjango-discover-runner allows you to specify any type of label to Django's\ntest management command.\n\nBy default Django's test runner will execute the tests of Django's own\ncontrib apps, which doesn't make sense if you just want to run your\nown app's or project's tests. django-discover-runner fixes this by allowing\nyou to specify which tests to run and organize your test code outside the\nreach of the Django test runner.\n\nMore reasons can be found in Carl Meyer's excellent talk about\n`Testing and Django`_ (slides_).\n\n.. _`Testing and Django`: http://pyvideo.org/video/699/testing-and-django\n.. _slides: http://carljm.github.com/django-testing-slides/\n\nInstallation\n------------\n\nInstall it with your favorite installer, e.g.::\n\n    pip install -U django-discover-runner\n\ndjango-discover-runner requires at least Django 1.4 and also works on 1.5.x.\nStarting in Django 1.6 the discover runner is a built-in.\n\nSetup\n-----\n\n- ``TEST_RUNNER`` (required) needs to point to the ``DiscoverRunner`` class\n  to enable it::\n\n    TEST_RUNNER = 'discover_runner.DiscoverRunner'\n\n- Add ``'discover_runner'`` to your ``INSTALLED_APPS`` setting to enable the\n  ability to override the discovery settings below when using the ``test``\n  management command.\n\n- ``TEST_DISCOVER_TOP_LEVEL`` (optional) should be the directory containing\n  your top-level package(s); in other words, the directory that should be on\n  ``sys.path`` for your code to import. This is for example the directory\n  containing ``manage.py`` in the new Django 1.4 project layout.\n  The management command option is called ``--top-level``.\n\n- ``TEST_DISCOVER_PATTERN`` (optional) is the pattern to use when discovering\n  tests and defaults to the unittest2_ standard ``test*.py``. The management\n  command option is called ``--pattern``.\n\nExamples\n--------\n\nDjango app\n^^^^^^^^^^\n\nTo test a reusable Django app it's recommended to add a ``test_settings.py``\nfile to your app package to easily run the app tests with the ``test``\nmanagement command. Simply set the ``TEST_RUNNER`` setting to\n``'discover_runner.DiscoverRunner'``, configure the other settings necessary\nto run your tests and call the ``test`` management command with the name of\nthe app package, e.g.:: \n\n    django-admin.py test --settings=myapp.test_settings myapp\n\nDjango project\n^^^^^^^^^^^^^^\n\nIf you want to test a project and want to store the project's tests outside\nthe project main package (recommended), you can simply follow the app\ninstructions above, applying it to the \"project\" package, but set a few\nadditional settings to tell the test runner to find the tests::\n\n    from os import path\n    TEST_DISCOVER_TOP_LEVEL = path.dirname(path.dirname(__file__))\n\nThis would find all the tests within a top-level \"tests\" package. Running the\ntests is as easy as calling::\n\n    django-admin.py test --settings=mysite.test_settings tests\n\nAlternatively you can specify the ``--top-level-directory`` management\ncommand option.\n\nMultiple Django versions\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn case you want to test your app on older Django versions as well as\nDjango >= 1.6 you can simply conditionally configure the test runner in your\ntest settings, e.g.::\n\n  import django\n\n  if django.VERSION[:2] < (1, 6):\n    TEST_RUNNER = 'discover_runner.DiscoverRunner'\n\nChangelog\n---------\n\n1.0 06/15/2013\n^^^^^^^^^^^^^^\n\n* **GOOD NEWS!** This runner was added to Django 1.6 as the new default!\n  This version backports that runner for Django 1.4.x and 1.5.x.\n\n* Removed ``TEST_DISCOVER_ROOT`` setting in favor of unittest2's own way to\n  figure out the root.\n\n* Dropped support for Django 1.3.x.\n\n0.4 04/12/2013\n^^^^^^^^^^^^^^\n\n* Added ability to override the discover settings with a custom test management\n  command.\n\n0.3 01/28/2013\n^^^^^^^^^^^^^^\n\n* Fixed setup.py to work on Python 3. This should make this app compatible\n  to Python 3.\n\n0.2.2 09/04/2012\n^^^^^^^^^^^^^^^^\n\n* Stopped setting the top level variable in the case of using a module path\n  as the test label as it made the wrong assumption that the parent directory\n  *is* the top level.\n\n0.2.1 08/20/2012\n^^^^^^^^^^^^^^^^\n\n* Fixed a rather esoteric bug with testing test case class methods\n  that was caused by a wrong import and the way Django wraps itself\n  around the unittest2 module (if availale) or unittest on Python >= 2.7.\n\n0.2 05/26/2012\n^^^^^^^^^^^^^^\n\n* Added ability to use an optionally installed unittest2 library\n  for Django projects using Django < 1.3 (which added unittest2 to the\n  ``django.utils.unittest`` package).\n\n0.1.1 05/23/2012\n^^^^^^^^^^^^^^^^\n\n* Fixed a bug that prevented the project based feature to work correctly.\n\n0.1 05/20/2012\n^^^^^^^^^^^^^^\n\n* Initial release with support for Django >= 1.3.\n\nThanks\n------\n\nThis test runner is a humble rip-off of Carl Meyer's ``DiscoveryRunner``\nwhich he published as a gist_ a while ago. All praise should be directed at\nhim. Thanks, Carl!\n\nThis was also very much related to ticket `#17365`_ which eventually led\nto the replacement of the default test runner in Django. Thanks **again**,\nCarl!\n\n.. _unittest2: http://pypi.python.org/pypi/unittest2\n.. _gist: https://gist.github.com/1450104\n.. _`#17365`: https://code.djangoproject.com/ticket/17365",
  "requires_dist": null,
  "requires_python": null,
  "current_version": "1.0",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.2",
    "0.2.1",
    "0.2.2",
    "0.3",
    "0.4",
    "1.0"
  ]
}