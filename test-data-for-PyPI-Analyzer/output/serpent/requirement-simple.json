{
  "name": "serpent",
  "description": "\nSerpent is a simple serialization library based on ast.literal_eval.\n\nBecause it only serializes literals and recreates the objects using ast.literal_eval(),\nthe serialized data is safe to transport to other machines (over the network for instance)\nand de-serialize it there.\n\n*There is also a Java and a .NET (C#) implementation available. This allows for easy data transfer between the various ecosystems.\nYou can get the full source distribution, a Java .jar file, and a .NET assembly dll.*\nThe java library can be obtained from Maven central (groupid ``net.razorvine`` artifactid ``serpent``),\nand the .NET assembly can be obtained from Nuget.org (package ``Razorvine.Serpent``).\n\n\n**API**\n\n- ``ser_bytes = serpent.dumps(obj, indent=False, module_in_classname=False):``      # serialize obj tree to bytes\n- ``obj = serpent.loads(ser_bytes)``     # deserialize bytes back into object tree\n- You can use ``ast.literal_eval`` yourself to deserialize, but ``serpent.deserialize``\n  works around a few corner cases. See source for details.\n\nSerpent is more sophisticated than a simple repr() + literal_eval():\n\n- it serializes directly to bytes (utf-8 encoded), instead of a string, so it can immediately be saved to a file or sent over a socket\n- it encodes byte-types as base-64 instead of inefficient escaping notation that repr would use (this does mean you have\n  to base-64 decode these strings manually on the receiving side to get your bytes back.\n  You can use the serpent.tobytes utility function for this.)\n- it contains a few custom serializers for several additional Python types such as uuid, datetime, array and decimal\n- it tries to serialize unrecognised types as a dict (you can control this with __getstate__ on your own types)\n- it can create a pretty-printed (indented) output for readability purposes\n- it outputs the keys of sets and dicts in alphabetical order (when pretty-printing)\n- it works around a few quirks of ast.literal_eval() on the various Python implementations\n\nSerpent allows comments in the serialized data (because it is just Python source code).\nSerpent can't serialize object graphs (when an object refers to itself); it will then crash with a ValueError pointing out the problem.\n\nWorks with Python 3.5+\n\n**FAQ**\n\n- Why not use XML? Answer: because XML.\n- Why not use JSON? Answer: because JSON is quite limited in the number of datatypes it supports, and you can't use comments in a JSON file.\n- Why not use pickle? Answer: because pickle has security problems.\n- Why not use ``repr()``/``ast.literal_eval()``? See above; serpent is a superset of this and provides more convenience.\n  Serpent provides automatic serialization mappings for types other than the builtin primitive types.\n  ``repr()`` can't serialize these to literals that ``ast.literal_eval()`` understands.\n- Why not a binary format? Answer: because binary isn't readable by humans.\n- But I don't care about readability. Answer: doesn't matter, ``ast.literal_eval()`` wants a literal string, so that is what we produce.\n- But I want better performance. Answer: ok, maybe you shouldn't use serpent in this case. Find an efficient binary protocol (protobuf?)\n- Why only Python, Java and C#/.NET, but no bindings for insert-favorite-language-here? Answer: I don't speak that language.\n  Maybe you could port serpent yourself?\n- Where is the source?  It's on Github: https://github.com/irmen/Serpent\n- Can I use it everywhere?  Sure, as long as you keep the copyright and disclaimer somewhere. See the LICENSE file.\n\n**Demo**\n\n.. code:: python\n\n # -*- coding: utf-8 -*-\n import ast\n import uuid\n import datetime\n import pprint\n import serpent\n\n\n class DemoClass:\n     def __init__(self):\n         self.i=42\n         self.b=False\n\n data = {\n     \"names\": [\"Harry\", \"Sally\", \"Peter\"],\n     \"big\": 2**200,\n     \"colorset\": { \"red\", \"green\" },\n     \"id\": uuid.uuid4(),\n     \"timestamp\": datetime.datetime.now(),\n     \"class\": DemoClass(),\n     \"unicode\": \"\u20ac\"\n }\n\n # serialize it\n ser = serpent.dumps(data, indent=True)\n open(\"data.serpent\", \"wb\").write(ser)\n\n print(\"Serialized form:\")\n print(ser.decode(\"utf-8\"))\n\n # read it back\n data = serpent.load(open(\"data.serpent\", \"rb\"))\n print(\"Data:\")\n pprint.pprint(data)\n\n # you can also use ast.literal_eval if you like\n ser_string = open(\"data.serpent\", \"r\", encoding=\"utf-8\").read()\n data2 = ast.literal_eval(ser_string)\n\n assert data2==data\n\n\nWhen you run this it prints:\n\n.. code:: python\n\n Serialized form:\n # serpent utf-8 python3.2\n {\n   'big': 1606938044258990275541962092341162602522202993782792835301376,\n   'class': {\n     '__class__': 'DemoClass',\n     'b': False,\n     'i': 42\n   },\n   'colorset': {\n     'green',\n     'red'\n   },\n   'id': 'e461378a-201d-4844-8119-7c1570d9d186',\n   'names': [\n     'Harry',\n     'Sally',\n     'Peter'\n   ],\n   'timestamp': '2013-04-02T00:23:00.924000',\n   'unicode': '\u20ac'\n }\n Data:\n {'big': 1606938044258990275541962092341162602522202993782792835301376,\n  'class': {'__class__': 'DemoClass', 'b': False, 'i': 42},\n  'colorset': {'green', 'red'},\n  'id': 'e461378a-201d-4844-8119-7c1570d9d186',\n  'names': ['Harry', 'Sally', 'Peter'],\n  'timestamp': '2013-04-02T00:23:00.924000',\n  'unicode': '\u20ac'}\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.2",
  "current_version": "1.30.2",
  "released_versions": [
    "1.0",
    "1.1",
    "1.10",
    "1.11",
    "1.12",
    "1.13",
    "1.14",
    "1.15",
    "1.16",
    "1.17",
    "1.18",
    "1.18.1",
    "1.19",
    "1.2",
    "1.20",
    "1.21",
    "1.22",
    "1.23",
    "1.24",
    "1.25",
    "1.26",
    "1.27",
    "1.28",
    "1.3",
    "1.30",
    "1.30.1",
    "1.30.2",
    "1.4",
    "1.5",
    "1.6",
    "1.7",
    "1.8",
    "1.9"
  ]
}