{
  "name": "anyio",
  "description": ".. image:: https://github.com/agronholm/anyio/workflows/Python%20codeqa/test/badge.svg?branch=master\n  :target: https://github.com/agronholm/anyio/actions?query=workflow%3A%22Python+codeqa%2Ftest%22+branch%3Amaster\n  :alt: Build Status\n.. image:: https://coveralls.io/repos/github/agronholm/anyio/badge.svg?branch=master\n  :target: https://coveralls.io/github/agronholm/anyio?branch=master\n  :alt: Code Coverage\n.. image:: https://readthedocs.org/projects/anyio/badge/?version=latest\n  :target: https://anyio.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation\n.. image:: https://badges.gitter.im/gitterHQ/gitter.svg\n  :target: https://gitter.im/python-trio/AnyIO\n  :alt: Gitter chat\n\nAnyIO is an asynchronous networking and concurrency library that works on top of either asyncio_ or\ntrio_. It implements trio-like `structured concurrency`_ (SC) on top of asyncio, and works in harmony\nwith the native SC of trio itself.\n\nApplications and libraries written against AnyIO's API will run unmodified on either asyncio_ or\ntrio_. AnyIO can also be adopted into a library or application incrementally \u2013 bit by bit, no full\nrefactoring necessary. It will blend in with native libraries of your chosen backend.\n\nDocumentation\n-------------\n\nView full documentation at: https://anyio.readthedocs.io/\n\nFeatures\n--------\n\nAnyIO offers the following functionality:\n\n* Task groups (nurseries_ in trio terminology)\n* High level networking (TCP, UDP and UNIX sockets)\n\n  * `Happy eyeballs`_ algorithm for TCP connections (more robust than that of asyncio on Python\n    3.8)\n  * async/await style UDP sockets (unlike asyncio where you still have to use Transports and\n    Protocols)\n\n* A versatile API for byte streams and object streams\n* Inter-task synchronization and communication (locks, conditions, events, semaphores, object\n  streams)\n* Worker threads\n* Subprocesses\n* Asynchronous file I/O (using worker threads)\n* Signal handling\n\nAnyIO also comes with its own pytest_ plugin which also supports asynchronous fixtures.\nIt even works with the popular Hypothesis_ library.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _trio: https://github.com/python-trio/trio\n.. _structured concurrency: https://en.wikipedia.org/wiki/Structured_concurrency\n.. _nurseries: https://trio.readthedocs.io/en/stable/reference-core.html#nurseries-and-spawning\n.. _Happy eyeballs: https://en.wikipedia.org/wiki/Happy_Eyeballs\n.. _pytest: https://docs.pytest.org/en/latest/\n.. _Hypothesis: https://hypothesis.works/\n\n\n",
  "requires_dist": [
    "idna (>=2.8)",
    "sniffio (>=1.1)",
    "async-generator ; python_version < \"3.7\"",
    "dataclasses ; python_version < \"3.7\"",
    "typing-extensions ; python_version < \"3.8\"",
    "sphinx-rtd-theme ; extra == 'doc'",
    "sphinx-autodoc-typehints (>=1.2.0) ; extra == 'doc'",
    "coverage[toml] (>=4.5) ; extra == 'test'",
    "hypothesis (>=4.0) ; extra == 'test'",
    "pytest (>=6.0) ; extra == 'test'",
    "trustme ; extra == 'test'",
    "uvloop (<0.15) ; (python_version < \"3.7\" and platform_python_implementation == \"CPython\" and platform_system != \"Windows\") and extra == 'test'",
    "uvloop (>=0.15) ; (python_version >= \"3.7\" and platform_python_implementation == \"CPython\" and platform_system != \"Windows\") and extra == 'test'",
    "trio (>=0.16) ; extra == 'trio'"
  ],
  "requires_python": ">=3.6.2",
  "current_version": "3.0.1",
  "released_versions": [
    "1.0.0",
    "1.0.0a1",
    "1.0.0a2",
    "1.0.0b1",
    "1.0.0b2",
    "1.0.0rc1",
    "1.0.0rc2",
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.2.3",
    "1.3.0",
    "1.3.1",
    "1.4.0",
    "2.0.0",
    "2.0.0b1",
    "2.0.0b2",
    "2.0.0rc1",
    "2.0.0rc2",
    "2.0.1",
    "2.0.2",
    "2.1.0",
    "2.2.0",
    "3.0.0",
    "3.0.0rc1",
    "3.0.0rc2",
    "3.0.0rc3",
    "3.0.0rc4",
    "3.0.1"
  ]
}