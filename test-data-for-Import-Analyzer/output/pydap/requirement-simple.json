{
  "name": "pydap",
  "description": "Pydap\n=====\n\n[![Build Status](https://travis-ci.org/pydap/pydap.svg)](https://travis-ci.org/pydap/pydap)\n[![Python2](https://img.shields.io/badge/python-2-blue.svg)](https://www.python.org/downloads/)\n[![Python3](https://img.shields.io/badge/python-3-blue.svg)](https://www.python.org/downloads/)\n[![documentation](https://readthedocs.org/projects/pydap/badge/?version=latest)](http://pydap.readthedocs.org/en/latest/)\n[![PyPI](https://img.shields.io/pypi/v/pydap.svg?maxAge=2592000?style=plastic)](https://pypi.python.org/pypi/Pydap/)\n\n[Pydap](http://pydap.readthedocs.io/en/latest/) is an implementation of the Opendap/DODS protocol, written from scratch in pure python.  You can use Pydap to access scientific data on the internet without having to \ndownload it; instead, you work with special array and iterable objects that \ndownload data on-the-fly as necessary, saving bandwidth and time. The module \nalso comes with a robust-but-lightweight Opendap server, implemented as a WSGI \napplication.\n\n\nQuickstart\n----------\n\nYou can install the latest version using [pip](http://pypi.python.org/pypi/pip). After [installing pip](http://www.pip-installer.org/en/latest/installing.html) you can install Pydap with this command:\n```bash\n    $ pip install Pydap\n```\nThis will install Pydap together with all the required dependencies. You can now open any remotely served dataset, and Pydap will download the accessed data on-the-fly as needed:\n\n```python\n\n    >>> from pydap.client import open_url\n    >>> dataset = open_url('http://test.opendap.org/dap/data/nc/coads_climatology.nc')\n    >>> var = dataset['SST']\n    >>> var.shape\n    (12, 90, 180)\n    >>> var.dtype\n    dtype('>f4')\n    >>> data = var[0,10:14,10:14]  # this will download data from the server\n    >>> data\n    <GridType with array 'SST' and maps 'TIME', 'COADSY', 'COADSX'>\n    >>> print(data.data)\n    [array([[[ -1.26285708e+00,  -9.99999979e+33,  -9.99999979e+33,\n              -9.99999979e+33],\n            [ -7.69166648e-01,  -7.79999971e-01,  -6.75454497e-01,\n              -5.95714271e-01],\n            [  1.28333330e-01,  -5.00000156e-02,  -6.36363626e-02,\n              -1.41666666e-01],\n            [  6.38000011e-01,   8.95384610e-01,   7.21666634e-01,\n               8.10000002e-01]]], dtype=float32), array([ 366.]), array([-69., -67., -65., -63.]), array([ 41.,  43.,  45.,  47.])]\n```\n\nFor more information, please check the documentation on [using Pydap as a client](http://pydap.readthedocs.io/en/latest/server.html). Pydap also comes with a simple server, implemented as a [WSGI]( http://wsgi.org/) application. To use it, you first need to install the server and optionally a data handler:\n\n```bash\n\n    $ pip install Pydap[server,handlers.netcdf]\n```\nThis will install support for [netCDF](http://www.unidata.ucar.edu/software/netcdf/) files; more [handlers](http://pydap.readthedocs.io/en/latest/handlers.html) for different formats are available, if necessary. Now create a directory for your server data.\n\n\nTo run the server just issue the command:\n\n```bash\n\n    $ pydap --data ./myserver/data/ --port 8001\n```\nThis will start a standalone server running on http://localhost:8001/, serving netCDF files from ``./myserver/data/``, similar to the test server at http://test.pydap.org/. Since the server uses the [WSGI](http://wsgi.org/) standard, it can easily be run behind Apache. The [server documentation](server.html) has more information on how to better deploy Pydap.\n\n## Documentation\nFor more information, see [![documentation](https://readthedocs.org/projects/pydap/badge/?version=latest)](http://pydap.readthedocs.org/en/latest/)\n\n## Help\n\nIf you need any help with Pydap, please feel free to send an email to the [mailing list](http://groups.google.com/group/pydap/)\n\n",
  "requires_dist": [
    "numpy",
    "Webob",
    "Jinja2",
    "docopt",
    "six (>=1.4.0)",
    "beautifulsoup4",
    "requests; extra == 'cas'",
    "lxml; extra == 'cas'",
    "Sphinx; extra == 'docs'",
    "Pygments; extra == 'docs'",
    "sphinx-rtd-theme; extra == 'docs'",
    "gsw (==3.0.6); extra == 'functions'",
    "coards; extra == 'functions'",
    "netCDF4; extra == 'handlers.netcdf'",
    "ordereddict; extra == 'handlers.netcdf'",
    "gunicorn; extra == 'server'",
    "PasteDeploy; extra == 'server'",
    "gsw (==3.0.6); extra == 'testing'",
    "coards; extra == 'testing'",
    "requests; extra == 'testing'",
    "lxml; extra == 'testing'",
    "gunicorn; extra == 'testing'",
    "PasteDeploy; extra == 'testing'",
    "netCDF4; extra == 'testing'",
    "ordereddict; extra == 'testing'",
    "WebTest; extra == 'testing'",
    "beautifulsoup4; extra == 'testing'",
    "flake8; extra == 'testing'",
    "pytest (>=2.8); extra == 'testing'",
    "pytest-cov; extra == 'testing'",
    "pytest-attrib; extra == 'testing'",
    "mock; extra == 'testing'",
    "requests-mock; extra == 'testing'",
    "requests; extra == 'testing'",
    "gsw (==3.0.6); extra == 'tests'",
    "coards; extra == 'tests'",
    "requests; extra == 'tests'",
    "lxml; extra == 'tests'",
    "gunicorn; extra == 'tests'",
    "PasteDeploy; extra == 'tests'",
    "netCDF4; extra == 'tests'",
    "ordereddict; extra == 'tests'",
    "WebTest; extra == 'tests'",
    "beautifulsoup4; extra == 'tests'",
    "flake8; extra == 'tests'"
  ],
  "requires_python": "",
  "current_version": "3.2.2",
  "released_versions": [
    "2.9.9.dev.2",
    "2.9.9.dev.3",
    "2.9.9.dev1",
    "3.0",
    "3.0.1",
    "3.0.2",
    "3.0.3",
    "3.0.a.1",
    "3.0.a.2",
    "3.0.a.3",
    "3.0.a.4",
    "3.0.a.5",
    "3.0.a.6",
    "3.0.a.7",
    "3.0.a.8",
    "3.0.b.1",
    "3.0.b.2",
    "3.0.b.3",
    "3.0.b.4",
    "3.0.b.5",
    "3.0.rc.1",
    "3.0.rc.10",
    "3.0.rc.11",
    "3.0.rc.12",
    "3.0.rc.13",
    "3.0.rc.14",
    "3.0.rc.15",
    "3.0.rc.2",
    "3.0.rc.3",
    "3.0.rc.4",
    "3.0.rc.5",
    "3.0.rc.6",
    "3.0.rc.7",
    "3.0.rc.8",
    "3.0.rc.9",
    "3.1",
    "3.1.1",
    "3.1.RC1",
    "3.1.RC2",
    "3.2.0",
    "3.2.1",
    "3.2.2"
  ]
}