{
  "name": "ghp-import",
  "description": "GitHub Pages Import\n===================\n\n[![CI status](https://github.com/davisp/ghp-import/workflows/CI/badge.svg)](https://github.com/davisp/ghp-import/actions?query=workflow%3Aci)\n[![CircleCI](https://circleci.com/gh/c-w/ghp-import/tree/master.svg?style=svg)](https://circleci.com/gh/c-w/ghp-import/tree/master)\n[![TravisCI](https://travis-ci.org/c-w/ghp-import.svg?branch=master)](https://travis-ci.org/c-w/ghp-import)\n[![AzureDevOps](https://clewolff.visualstudio.com/ghp-import/_apis/build/status/c-w.ghp-import?branchName=master)](https://clewolff.visualstudio.com/ghp-import/_build/latest?definitionId=10&branchName=master)\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-green.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Version](https://img.shields.io/pypi/v/ghp-import.svg)](https://pypi.org/project/ghp-import/)\n\nAs part of [gunicorn][gunicorn], [Benoit Chesneau][benoit] and I have been\nstarting to look at how to host documentation. There's the obvious method of\nusing [GitHub's post-receive hook][github-post] to trigger doc builds and rsync\nto a webserver, but we ended up wanting to try out github's hosting to make the\nwhole interface a bit more robust.\n\n[GitHub Pages][gh-pages] is a pretty awesome service that GitHub provides for\nhosting project documentation. The only thing is that it requires a\n`gh-pages` branch that is the site's document root. This means that keeping\ndocumentation sources in the branch with code is a bit difficult. And it really\nturns into a head scratcher for things like [Sphinx][sphinx] that want to\naccess documentation sources and code sources at the same time.\n\nThen I stumbled across an interesting looking package called\n[github-tools][github-tools] that looked almost like what I wanted. It was a tad\ncomplicated and more involved than I wanted but it gave me an idea. Why not\njust write a script that can copy a directory to the `gh-pages` branch of the\nrepository. This saves me from even having to think about the branch and\neverything becomes magical.\n\nThis is what `ghp-import` was written for.\n\n[gunicorn]: http://www.gunicorn.com/ \"Gunicorn\"\n[benoit]: http://github.com/benoitc \"Beno\u00eet Chesneau\"\n[github-post]: https://help.github.com/articles/post-receive-hooks \"GitHub Post-Receive Hook\"\n[gh-pages]: http://pages.github.com/ \"GitHub Pages\"\n[sphinx]: http://sphinx.pocoo.org/ \"Sphinx Documentation\"\n[github-tools]: http://dinoboff.github.com/github-tools/ \"github-tools\"\n\n\nBig Fat Warning\n---------------\n\nThis will **DESTROY** your `gh-pages` branch. If you love it, you'll want to\ntake backups before playing with this. This script assumes that `gh-pages` is\n100% derivative. You should never edit files in your `gh-pages` branch by hand\nif you're using this script because you will lose your work.\n\nUsage\n-----\n\n```\nUsage: ghp-import [OPTIONS] DIRECTORY\n\nOptions:\n  -n, --no-jekyll       Include a .nojekyll file in the branch.\n  -c CNAME, --cname=CNAME\n                        Write a CNAME file with the given CNAME.\n  -m MESG, --message=MESG\n                        The commit message to use on the target branch.\n  -p, --push            Push the branch to origin/{branch} after committing.\n  -x PREFIX, --prefix=PREFIX\n                        The prefix to add to each file that gets pushed to the\n                        remote. [none]\n  -f, --force           Force the push to the repository.\n  -o, --no-history      Force new commit without parent history.\n  -r REMOTE, --remote=REMOTE\n                        The name of the remote to push to. [origin]\n  -b BRANCH, --branch=BRANCH\n                        Name of the branch to write to. [gh-pages]\n  -s, --shell           Use the shell when invoking Git. [False]\n  -l, --follow-links    Follow symlinks when adding files. [False]\n  -h, --help            show this help message and exit\n```\n\nIts pretty simple. Inside your repository just run `ghp-import $DOCS_DIR`\nwhere `$DOCS_DIR` is the path to the **built** documentation. This will write a\ncommit to your `gh-pages` branch with the current documents in it.\n\nIf you specify `-p` it will also attempt to push the `gh-pages` branch to\nGitHub. By default it'll just run `git push origin gh-pages`. You can specify\na different remote using the `-r` flag.\n\nThe `-o` option will discard any previous history and ensure that only a\nsingle commit is always pushed to the `gh-pages` branch. This is useful to\navoid bloating the repository size and is **highly recommended**.\n\nYou can specify a different branch with `-b`. This is useful for user and\norganization page, which are served from the `master` branch.\n\nSome Windows users report needing to pass Git commands through the shell which can be accomplished by passing `-s`.\n\nThe `-l` option will cause the import to follow symlinks for users that have odd configurations that include symlinking outside of their documentation directory.\n\nPython Usage\n------------\n\nYou can also call ghp_import directly from your Python code as a library. The\nlibrary has one public function `ghp_import.ghp_import`, which accepts the\nfollowing arguments:\n\n* `srcdir`: The path to the **built** documentation (required).\n* `remote`: The name of the remote to push to. Default: `origin`.\n* `branch`: Name of the branch to write to. Default: `gh-pages`.\n* `mesg`: The commit message to use on the target branch. Default: `Update documentation`.\n* `push`: Push the branch to {remote}/{branch} after committing. Default: `False`.\n* `prefix`: The prefix to add to each file that gets pushed to the remote. Default: `None`.\n* `force`: Force the push to the repository. Default: `False`.\n* `no_history`: Force new commit without parent history. Default: `False`.\n* `use_shell`: Default: Use the shell when invoking Git. `False`.\n* `followlinks`: Follow symlinks when adding files. Default: `False`.\n* `cname`: Write a CNAME file with the given CNAME. Default: `None`.\n* `nojekyll`: Include a .nojekyll file in the branch. Default: `False`.\n\nWith Python's current working directory (cwd) inside your repository, do the\nfollowing:\n\n```python\nfrom ghp_import import ghp_import\nghp_import('docs', push=True, cname='example.com')\n```",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "1.1.0",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.5",
    "0.1.6",
    "0.1.7",
    "0.1.8",
    "0.2.0",
    "0.2.1",
    "0.2.2",
    "0.2.3",
    "0.2.4",
    "0.3.0",
    "0.3.1",
    "0.3.2",
    "0.4.0",
    "0.4.1",
    "0.4.2",
    "0.5.0",
    "0.5.1",
    "0.5.2",
    "0.5.3",
    "0.5.4",
    "0.5.5",
    "0.6.0",
    "1.0.0",
    "1.0.1",
    "1.1.0"
  ]
}