{
  "name": "web-compile",
  "description": "# web-compile\n\n[![PyPI][pypi-badge]][pypi-link]\n\nA CLI to compile/minify SCSS & JS, and associated pre-commit hook.\n\nThis CLI is a small wrapper around [libsass-python](https://github.com/sass/libsass-python),\n[rJSmin](http://opensource.perlig.de/rjsmin/) and [jinja2](https://jinja.palletsprojects.com),\nwhich also aims to be compatible with [pre-commit](https://pre-commit.com/),\nand provide a pre-commit hook.\n\n**NOTE**: The package in on alpha release, but looks to be working as intended,\nand will be trialled in [sphinx-panels](https://github.com/executablebooks/sphinx-panels),\nand then [sphinx-book-theme](https://github.com/executablebooks/sphinx-book-theme).\n\n[pypi-badge]: https://img.shields.io/pypi/v/web-compile.svg\n[pypi-link]: https://pypi.org/project/web-compile\n\n## Installation\n\nTo use directly as a CLI:\n\n```console\npip install web-compile\nweb-compile --help\n```\n\nTo use *via* pre-commit:\n\nAdd to your `.pre-commit-config.yaml`\n\n```yaml\n-   repo: https://github.com/executablebooks/web-compile\n    rev: v0.2.0\n    hooks:\n      - id: web-compile\n        # optional\n        args: [--config=config.yml]\n        files: >-\n            (?x)^(\n                web-compile-config.yml|\n                src/.*|\n                dist/.*\n            )$\n```\n\nBy default, the hook will be initiated for all text file changes.\nBut it is advisable to constrain this to the known configuration file, and input/output folders.\n\n## Configuration\n\nYou can can configure the compilation directly *via* the CLI or using a configuration file;\nsimply replace `-` with `_`, CLI takes priority over the file:\n\n```console\n$ web-compile --help\nUsage: web-compile [OPTIONS]\n\n  Compile web assets.\n\nOptions:\n  --version                       Show the version and exit.\n  -c, --config FILE               Allowed extensions: json, toml, yml, yaml\n                                  [default: web-compile-config.yml]\n\n  --sass-files DICT               File mapping (config only)\n  --sass-format [nested|expanded|compact|compressed]\n                                  [default: compressed]\n  --sass-precision INTEGER        precision for numbers.  [default: 5]\n  --sass-sourcemap                Output source map.\n  --sass-encoding TEXT            [default: utf8]\n  --js-files DICT                 File mapping (config only)\n  --js-comments                   Keep comments starting with '/*!'.\n  --js-encoding TEXT              [default: utf8]\n  --jinja-files DICT              File mapping (config only)\n  --jinja-variables DICT          Global variable mapping (config only)\n  --jinja-encoding TEXT           [default: utf8]\n  --git-add / --no-git-add        Add new files to git index.  [default: True]\n  --continue-on-error             Do not stop on the first error.\n  --exit-code INTEGER             Exit code when files changed.  [default: 3]\n  --test-run                      Do not delete/create any files.\n  -q, --quiet                     Remove stdout logging.\n  -v, --verbose                   Increase stdout logging.\n  --help                          Show this message and exit.\n```\n\n`--config` can point to any of three file-formats:\n\n`config.yml`/`config.yaml`:\n\n```yaml\nweb-compile:\n  sass:\n    encoding: utf8\n    files:\n      tests/example_src/example1.scss: tests/example_dist/example1.[hash].css\n      tests/example_src/example2.scss: tests/example_dist/example2.[hash].css\n    format: compressed\n    precision: 5\n    sourcemap: true\n  js:\n    comments: false\n    encoding: utf8\n    files:\n      tests/example_src/example1.js: tests/example_dist/example1.[hash].js\n  jinja:\n    files:\n      tests/example_src/example1.j2: tests/example_dist/example1.txt\n      tests/example_src/example3.j2: tests/example_dist/example3.txt\n    variables:\n      a: b\n  continue_on_error: true\n  exit_code: 2\n  test_run: false\n  verbose: false\n  quiet: false\n```\n\n`config.toml`:\n\n```toml\n[web-compile]\nexit_code = 2\nverbose = false\ntest_run = false\ncontinue_on_error = true\nquiet = false\n\n[web-compile.sass]\nprecision = 5\nsourcemap = true\nformat = \"compressed\"\nencoding = \"utf8\"\n\n[web-compile.js]\ncomments = false\nencoding = \"utf8\"\n\n[web-compile.sass.files]\n\"tests/example_src/example1.scss\" = \"tests/example_dist/example1.[hash].css\"\n\"tests/example_src/example2.scss\" = \"tests/example_dist/example2.[hash].css\"\n\n[web-compile.js.files]\n\"tests/example_src/example1.js\" = \"tests/example_dist/example1.[hash].js\"\n\n[web-compile.jinja.files]\n\"tests/example_src/example1.j2\" = \"tests/example_dist/example1.txt\"\n\"tests/example_src/example3.j2\" = \"tests/example_dist/example3.txt\"\n\n[web-compile.jinja.variables]\na = \"b\"\n```\n\n`config.json`:\n\n```json\n{\n  \"web-compile\": {\n    \"sass\": {\n      \"files\": {\n        \"tests/example_src/example1.scss\": \"tests/example_dist/example1.[hash].css\",\n        \"tests/example_src/example2.scss\": \"tests/example_dist/example2.[hash].css\"\n      },\n      \"precision\": 5,\n      \"sourcemap\": true,\n      \"format\": \"compressed\",\n      \"encoding\": \"utf8\"\n    },\n    \"js\": {\n      \"files\": {\n        \"tests/example_src/example1.js\": \"tests/example_dist/example1.[hash].js\"\n      },\n      \"comments\": false,\n      \"encoding\": \"utf8\"\n    },\n    \"jinja\": {\n      \"files\": {\n        \"tests/example_src/example1.j2\": \"tests/example_dist/example1.txt\",\n        \"tests/example_src/example3.j2\": \"tests/example_dist/example3.txt\"\n      },\n      \"variables\": {\n        \"a\": \"b\"\n      }\n    },\n    \"exit_code\": 2,\n    \"verbose\": false,\n    \"test_run\": false,\n    \"continue_on_error\": true,\n    \"quiet\": false\n  }\n}\n```\n\n## Usage\n\n### SCSS Compilation\n\nSimply map a source SCSS file to an output CSS filename.Paths should be relative to the configuration files and `@import` \\ `@use`ed partial files will also be read:\n\n```yaml\nweb-compile:\n  sass:\n    files:\n      src/file.scss: dist/file.css\n```\n\n```console\n$ web-compile\n```\n\n```\nsrc/\n    _partial.scss\n    file.scss\ndist/\n    file.css\n```\n\nIf you use the `sourcemap` option, then a sourcemap will also be output,\nand a `sourceMappingURL` comment added to the CSS:\n\n```yaml\nweb-compile:\n  sass:\n    files:\n      src/file.scss: dist/file.css\n    sourcemap: true\n```\n\n```console\n$ web-compile\n```\n\n```\ndist/\n    file.css\n    file.scss.map.json\n```\n\nIf you add `[hash]` to the CSS filename, then it will be replaced with the content hash.\nAlso, any existing files, matching the pattern, with a different hash will be removed:\n\n```yaml\nweb-compile:\n  sass:\n    files:\n      src/file.scss: dist/file.[hash].css\n```\n\n```console\n$ web-compile\n```\n\n```\ndist/\n    file.beabd761a3703567b4ce06c9a6adde55.css\n```\n\n### JavaScript\n\nJavascript files are minified and are configured similarly to SCSS.\n\n```yaml\nweb-compile:\n  js:\n    files:\n      src/file.js: dist/file.[hash].js\n```\n\n```console\n$ web-compile\n```\n\n```\ndist/\n    file.beabd761a3703567b4ce06c9a6adde55.js\n```\n\n### Jinja Templates\n\nFiles can be created from Jinja templates.\nThese are created after the SCSS and JS files are compiled, and allow for a special `compiled_name` filter,\nwhich converts ab input file path to the compiled file name:\n\n`src/file.j2`:\n```jinja\n{{ \"src/file.scss\" | compiled_name }}\n{{ var1 }}\n```\n\n```yaml\nweb-compile:\n  sass:\n    files:\n      src/file.scss: dist/file.[hash].css\n  jinja:\n    files:\n      src/file.j2: dist/file.txt\n    variables:\n      var1: other\n```\n\n```console\n$ web-compile\n```\n\n`dist/file.txt`:\n```\nfile.beabd761a3703567b4ce06c9a6adde55.css\nother\n```\n\n## Development\n\nTo run the tests:\n\n```console\npip install tox\ntox -e py37\n```\n\nTo test out the CLI:\n\n```console\ntox -e py37-cli\n```\n\nTo test the pre-commit hook:\n\n```console\ntox -e try-repo\n```\n\nFor code style:\n\n```console\npip install pre-commit\npre-commit run --all\n```\n\n\n",
  "requires_dist": [
    "click (~=7.1.2)",
    "jinja2 (~=2.11.2)",
    "libsass (~=0.20.1)",
    "gitpython (~=3.1.8)",
    "pyyaml",
    "rjsmin (~=1.1.0)",
    "toml",
    "pytest (~=6.0.1) ; extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.2.1",
  "released_versions": [
    "0.2.0",
    "0.2.1"
  ]
}