{
  "name": "bump2version",
  "description": "\n# bump2version\n\n[![image](https://img.shields.io/pypi/v/bump2version.svg)](https://pypi.org/project/bump2version/)\n[![image](https://img.shields.io/pypi/l/bump2version.svg)](https://pypi.org/project/bump2version/)\n[![image](https://img.shields.io/pypi/pyversions/bump2version.svg)](https://pypi.org/project/bump2version/)\n[![Travis](https://img.shields.io/travis/c4urself/bump2version/master.svg?logo=travis)](https://travis-ci.org/c4urself/bump2version)\n[![AppVeyor](https://img.shields.io/appveyor/ci/c4urself/bump2version.svg?logo=appveyor)](https://ci.appveyor.com/project/c4urself/bump2version)\n\n## NOTE\n\nThis is a maintained fork of the excellent [bumpversion project](https://github.com/peritus/bumpversion).\n\n## Overview\n\nVersion-bump your software with a single command!\n\nA small command line tool to simplify releasing software by updating all\nversion strings in your source code by the correct increment. Also creates\ncommits and tags:\n\n* version formats are highly configurable\n* works without any VCS, but happily reads tag information from and writes\n  commits and tags to Git and Mercurial if available\n* just handles text files, so it's not specific to any programming language\n* supports Python 3 and PyPy3\n\nIf you want to use Python 2, use `pip>=9` and you'll get the last supported version,\nor pin `bump2version<1`.\n\n## Alternatives\n\nIf bump2version does not fully suit your needs, you could take a look\nat other tools doing similar or related tasks:\n[ALTERNATIVES.md](https://github.com/c4urself/bump2version/blob/master/RELATED.md).\n\n## Installation\n\nYou can download and install the latest version of this software from the Python package index (PyPI) as follows:\n\n    pip install --upgrade bump2version\n\n**NOTE: `pip install bumpversion` now installs the latest bump2version!**\n\n## Changelog\n\nPlease find the changelog here: [CHANGELOG.md](CHANGELOG.md)\n\n## Usage\n\nNOTE: Throughout this document you can use `bumpversion` or `bump2version` interchangeably.\n\nThere are two modes of operation: On the command line for single-file operation\nand using a configuration file (`bumpversion.cfg`) for more complex multi-file operations.\n\n    bump2version [options] part [file]\n\n#### `part`\n  _**required**_<br />\n\n  The part of the version to increase, e.g. `minor`.\n\n  Valid values include those given in the `--serialize` / `--parse` option.\n\n  Example bumping 0.5.1 to 0.6.0:\n\n     bump2version --current-version 0.5.1 minor src/VERSION\n\n#### `file`\n  _**[optional]**_<br />\n  **default**: none\n\n  The file that will be modified.\n\n  This file is added to the list of files specified in `[bumpversion:file:\u2026]`\n  sections from the configuration file. If you want to rewrite only files\n  specified on the command line, use `--no-configured-files`.\n\n  Example bumping 1.1.9 to 2.0.0:\n\n     bump2version --current-version 1.1.9 major setup.py\n\n## Configuration file\n\nAll options can optionally be specified in a config file called\n`.bumpversion.cfg` so that once you know how `bump2version` needs to be\nconfigured for one particular software package, you can run it without\nspecifying options later. You should add that file to VCS so others can also\nbump versions.\n\nOptions on the command line take precedence over those from the config file,\nwhich take precedence over those derived from the environment and then from the\ndefaults.\n\nExample `.bumpversion.cfg`:\n\n```ini\n[bumpversion]\ncurrent_version = 0.2.9\ncommit = True\ntag = True\n\n[bumpversion:file:setup.py]\n```\n\nIf no `.bumpversion.cfg` exists, `bump2version` will also look into\n`setup.cfg` for configuration.\n\n### Configuration file -- Global configuration\n\nGeneral configuration is grouped in a `[bumpversion]` section.\n\n#### `current_version`\n  _**required**_<br />\n  **default**: none\n\n  The current version of the software package before bumping.\n\n  Also available as `--current-version` (e.g. `bump2version --current-version 0.5.1 patch setup.py`)\n\n#### `new_version`\n  _**[optional]**_<br />\n  **default**: none\n\n  The version of the software package after the increment. If not given will be\n  automatically determined.\n\n  Also available as `--new-version` (e.g. `to go from 0.5.1 directly to\n  0.6.1`: `bump2version --current-version 0.5.1 --new-version 0.6.1 patch\n  setup.py`).\n\n#### `tag = (True | False)`\n  _**[optional]**_<br />\n  **default**: False (Don't create a tag)\n\n  Whether to create a tag, that is the new version, prefixed with the character\n  \"`v`\". If you are using git, don't forget to `git-push` with the\n  `--tags` flag.\n\n  Also available on the command line as `(--tag | --no-tag)`.\n\n#### `sign_tags = (True | False)`\n  _**[optional]**_<br />\n  **default**: False (Don't sign tags)\n\n  Whether to sign tags.\n\n  Also available on the command line as `(--sign-tags | --no-sign-tags)`.\n\n#### `tag_name =`\n  _**[optional]**_<br />\n  **default:** `v{new_version}`\n\n  The name of the tag that will be created. Only valid when using `--tag` / `tag = True`.\n\n  This is templated using the [Python Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n  Available in the template context are `current_version` and `new_version`\n  as well as `current_[part]` and `new_[part]` (e.g. '`current_major`'\n  or '`new_patch`').\n  In addition, all environment variables are exposed, prefixed with `$`.\n  You can also use the variables `now` or `utcnow` to get a current timestamp. Both accept\n  datetime formatting (when used like as in `{now:%d.%m.%Y}`).\n\n  Also available as command-line flag `tag-name`.  Example usage:\n  `bump2version --tag-name 'release-{new_version}' patch`\n\n  In addition, it is also possible to provide a tag message by using `--tag-message TAG_MESSAGE`. Example usage:\n  `bump2version --tag-name 'release-{new_version}' --tag-message \"Release {new_version}\" patch`\n\n  * If neither tag message or sign tag is provided, `bumpversion` uses a `lightweight` tag in Git. Otherwise, it utilizes an `annotated` Git tag. You can read more about Git tagging [here](https://git-scm.com/book/en/v2/Git-Basics-Tagging).\n\n#### `commit = (True | False)`\n  _**[optional]**_<br />\n  **default:** False (Don't create a commit)\n\n  Whether to create a commit using git or Mercurial.\n\n  Also available as `(--commit | --no-commit)`.\n\n  In many projects it is common to have a pre-commit hook that runs prior to a\n  commit and in case of failure aborts the commit. For some use cases it might\n  be desired that when bumping a version and having `commit = True`, the\n  pre-commit hook should perform slightly different actions than in regular\n  commits. For example run an extended set of checks only for actual releases of\n  the software. To allow the pre-commit hooks to distinguish a bumpversion\n  commit, the `BUMPVERSION_CURRENT_VERSION` and `BUMPVERSION_NEW_VERSION`\n  environment variables are set when executing the commit command.\n\n#### `message =`\n  _**[optional]**_<br />\n  **default:** `Bump version: {current_version} \u2192 {new_version}`\n\n  The commit message to use when creating a commit. Only valid when using `--commit` / `commit = True`.\n\n  This is templated using the [Python Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n  Available in the template context are `current_version` and `new_version`\n  as well as `current_[part]` and `new_[part]` (e.g. '`current_major`'\n  or '`new_patch`').\n  In addition, all environment variables are exposed, prefixed with `$`.\n  You can also use the variables `now` or `utcnow` to get a current timestamp. Both accept\n  datetime formatting (when used like as in `{now:%d.%m.%Y}`).\n\n  Also available as command-line flag `--message`.  Example usage:\n  `bump2version --message '[{now:%Y-%m-%d}] Jenkins Build {$BUILD_NUMBER}: {new_version}' patch`)\n\n#### `commit_args =`\n  _**[optional**_<br />\n  **default:** empty\n\n  Extra arguments to pass to commit command. Only valid when using `--commit` /\n  `commit = True`.\n\n  This is for example useful to add `-s` to generate `Signed-off-by:` line in\n  the commit message.\n\n  Multiple arguments can be specified on separate lines.\n\n  Also available as command-line flag `--commit-args`, in which case only one\n  argument can be specified.\n\n\n### Configuration file -- Part specific configuration\n\nA version string consists of one or more parts, e.g. the version `1.0.2`\nhas three parts, separated by a dot (`.`) character. In the default\nconfiguration these parts are named `major`, `minor`, `patch`, however you can\ncustomize that using the `parse`/`serialize` option.\n\nBy default all parts are considered numeric, that is their initial value is `0`\nand they are increased as integers. Also, the value `0` is considered to be\noptional if it's not needed for serialization, i.e. the version `1.4.0` is\nequal to `1.4` if `{major}.{minor}` is given as a `serialize` value.\n\nFor advanced versioning schemes, non-numeric parts may be desirable (e.g. to\nidentify [alpha or beta versions](http://en.wikipedia.org/wiki/Software_release_life_cycle#Stages_of_development)\nto indicate the stage of development, the flavor of the software package or\na release name). To do so, you can use a `[bumpversion:part:\u2026]` section\ncontaining the part's name (e.g. a part named `release_name` is configured in\na section called `[bumpversion:part:release_name]`.\n\nThe following options are valid inside a part configuration:\n\n#### `values =`\n  **default**: numeric (i.e. `0`, `1`, `2`, \u2026)\n\n  Explicit list of all values that will be iterated when bumping that specific\n  part.\n\n  Example:\n\n```ini\n[bumpversion:part:release_name]\nvalues =\n  witty-warthog\n  ridiculous-rat\n  marvelous-mantis\n```\n\n#### `optional_value =`\n  **default**: The first entry in `values =`.\n\n  If the value of the part matches this value it is considered optional, i.e.\n  its representation in a `--serialize` possibility is not required.\n\n  Example:\n\n```ini\n[bumpversion]\ncurrent_version = 1.alpha\nparse = (?P<num>\\d+)(\\.(?P<release>.*))?\nserialize =\n  {num}.{release}\n  {num}\n\n[bumpversion:part:release]\noptional_value = gamma\nvalues =\n  alpha\n  beta\n  gamma\n```\n\n  Here, `bump2version release` would bump `1.alpha` to `1.beta`. Executing\n  `bump2version release` again would bump `1.beta` to `1`, because\n  `release` being `gamma` is configured optional.\n\n#### `first_value =`\n  **default**: The first entry in `values =`.\n\n  When the part is reset, the value will be set to the value specified here.\n\n### Configuration file -- File specific configuration\n\nThis configuration is in the section: `[bumpversion:file:\u2026]` or `[bumpversion:glob:\u2026]`\n\nBoth, `file:` and `glob:` are configured the same. Their difference is that\nfile will match file names directly like `requirements.txt`. While glob also\nmatches multiple files via wildcards like `**/pom.xml`.\n\nNote: The configuration file format requires each section header to be\nunique. If you want to process a certain file multiple times,\nyou may append a description between parens to the `file` keyword:\n`[bumpversion:file (special one):\u2026]`.\n\n#### `parse =`\n  **default:** `(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)`\n\n  Regular expression (using [Python regular expression syntax](https://docs.python.org/3/library/re.html#regular-expression-syntax)) on\n  how to find and parse the version string.\n\n  Is required to parse all strings produced by `serialize =`. Named matching\n  groups (\"`(?P<name>...)`\") provide values to as the `part` argument.\n\n  Also available as `--parse`\n\n#### `serialize =`\n  **default:** `{major}.{minor}.{patch}`\n\n  Template specifying how to serialize the version parts back to a version\n  string.\n\n  This is templated using the [Python Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n  Available in the template context are parsed values of the named groups\n  specified in `parse =` as well as all environment variables (prefixed with\n  `$`).\n\n  Can be specified multiple times, bumpversion will try the serialization\n  formats beginning with the first and choose the last one where all values can\n  be represented like this:\n\n```ini\nserialize =\n  {major}.{minor}\n  {major}\n```\n\n  Given the example above, the new version `1.9` will be serialized as\n  `1.9`, but the version `2.0` will be serialized as `2`.\n\n  Also available as `--serialize`. Multiple values on the command line are\n  given like `--serialize {major}.{minor} --serialize {major}`\n\n#### `search =`\n  **default:** `{current_version}`\n\n  Template string how to search for the string to be replaced in the file.\n  Useful if the remotest possibility exists that the current version number\n  might be present multiple times in the file and you mean to only bump one of the\n  occurrences. Can be multiple lines, templated using [Python Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax)\n\n#### `replace =`\n  **default:** `{new_version}`\n\n  Template to create the string that will replace the current version number in\n  the file.\n\n  Given this `requirements.txt`:\n\n    Django>=1.5.6,<1.6\n    MyProject==1.5.6\n\n  using this `.bumpversion.cfg` will ensure only the line containing\n  `MyProject` will be changed:\n\n```ini\n[bumpversion]\ncurrent_version = 1.5.6\n\n[bumpversion:file:requirements.txt]\nsearch = MyProject=={current_version}\nreplace = MyProject=={new_version}\n```\n\n  Can be multiple lines, templated using [Python Format String Syntax](https://docs.python.org/3/library/string.html#format-string-syntax).\n\n## Command-line Options\n\nMost of the configuration values above can also be given as an option on the command-line.\nAdditionally, the following options are available:\n\n`--dry-run, -n`\n  Don't touch any files, just pretend. Best used with `--verbose`.\n\n`--allow-dirty`\n  Normally, bumpversion will abort if the working directory is dirty to protect\n  yourself from releasing unversioned files and/or overwriting unsaved changes.\n  Use this option to override this check.\n\n`--no-configured-files`\n  Will not update/check files specified in the bumpversion.cfg.\n  Similar to dry-run, but will also avoid checking the files.\n  Also useful when you want to update just one file with e.g.,\n    `bump2version --no-configured-files major my-file.txt`\n\n`--verbose`\n  Print useful information to stderr\n\n`--list`\n  List machine readable information to stdout for consumption by other\n  programs.\n\n  Example output:\n\n    current_version=0.0.18\n    new_version=0.0.19\n\n`-h, --help`\n  Print help and exit\n\n## Using bumpversion in a script\n\nIf you need to use the version generated by bumpversion in a script you can make use of\nthe `--list` option, combined with `grep` and `sed`.\n\nSay for example that you are using git-flow to manage your project and want to automatically\ncreate a release. When you issue `git flow release start` you already need to know the\nnew version, before applying the change.\n\nThe standard way to get it in a bash script is\n\n    bump2version --dry-run --list <part> | grep <field name> | sed -r s,\"^.*=\",,\n\nwhere `part` is as usual the part of the version number you are updating. You need to specify\n`--dry-run` to avoid bumpversion actually bumping the version number.\n\nFor example, if you are updating the minor number and looking for the new version number this becomes\n\n    bump2version --dry-run --list minor | grep new_version | sed -r s,\"^.*=\",,\n\n## Using bumpversion to maintain a go.mod file within a Go project\n\nIn a module-aware Go project, when you create a major version of your module beyond v1, your module name will need\nto include the major version # (e.g. `github.com/myorg/myproject/v2`).\n\nYou can use bump2version to maintain the major version # within the go.mod file by using the `parse` and `serialize`\noptions, as in this example:\n\n- Example `.bumpversion.cfg` file:\n\n```\n    [bumpversion]\n    current_version = 2.0.0\n    commit = True\n\n    [bumpversion:file:go.mod]\n    parse = (?P<major>\\d+)\n    serialize = {major}\n    search = module github.com/myorg/myproject/v{current_version}\n    replace = module github.com/myorg/myproject/v{new_version}\n```\n\n- Example `go.mod` file:\n\n```\n    module github.com/myorg/myproject/v2\n\n    go 1.12\n\n    require (\n        ...\n    )\n```\n\nThen run this command to create version 3.0.0 of your project:\n\n```\n    bump2version --new-version 3.0.0 major\n```\nYour `go.mod` file now contains this module directive:\n\n```\n    module github.com/myorg/myproject/v3\n```\n\n## Development & Contributing\n\nThank you contributors! You can find a full list here: https://github.com/c4urself/bump2version/graphs/contributors\n\nSee also our [CONTRIBUTING.md](CONTRIBUTING.md)\n\nDevelopment of this happens on GitHub, patches including tests, documentation\nare very welcome, as well as bug reports! Also please open an issue if this\ntool does not support every aspect of bumping versions in your development\nworkflow, as it is intended to be very versatile.\n\n## License\n\nbump2version is licensed under the MIT License - see the [LICENSE.rst](LICENSE.rst) file for details\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.5",
  "current_version": "1.0.1",
  "released_versions": [
    "0.5.10",
    "0.5.11",
    "0.5.4",
    "0.5.5",
    "0.5.6",
    "0.5.6.dev0",
    "0.5.7",
    "0.5.8",
    "1.0.0",
    "1.0.1"
  ]
}