{
  "name": "gsw",
  "description": "# gsw Python package\n\n![https://travis-ci.org/TEOS-10/GSW-Python](https://travis-ci.org/TEOS-10/GSW-Python.svg?branch=master) ![https://conda.anaconda.org/conda-forge](https://anaconda.org/conda-forge/gsw/badges/installer/conda.svg)\n\n\nThis Python implementation of the Thermodynamic Equation of\nSeawater 2010 (TEOS-10) is based primarily on numpy ufunc wrappers of\nthe GSW-C implementation.  We expect it to replace the original\n[python-gsw](https://github.com/TEOS-10/python-gsw)\npure-python implementation after a brief overlap period.\nThe primary reasons for this change are that by building on the\nC implementation we reduce code duplication and we gain an immediate\nupdate to the 75-term equation.  Additional benefits include a\nmajor increase in speed, a reduction in memory usage, and the\ninclusion of more functions.  The penalty is that a C (or MSVC C++ for\nWindows) compiler is required to build the package from source.\n\n**Warning: this is for Python >=3.5 only.**\n\nDocumentation is provided at https://teos-10.github.io/GSW-Python/.\n\nFor the core functionality, we use an auto-generated C extension\nmodule to wrap the C functions as numpy\n[ufuncs](https://docs.scipy.org/doc/numpy/reference/ufuncs.html),\nand then use an\nautogenerated Python module to add docstrings and handle masked\narrays.  165 scalar C functions with only double-precision\narguments and return values are wrapped as ufuncs, and 158 of\nthese are exposed in the ``gsw`` namespace with an additional\nwrapper in Python.\n\nA hand-written wrapper is used for one C function, and others\nare re-implemented directly in Python instead of being wrapped.\nAdditional functions present in GSW-Matlab but not in GSW-C may\nbe re-implemented in Python, but there is no expectation that\nall such functions will be provided.\n\nThe package can be installed from a clone of the repo using\n``pip install .``.  It is neither necessary nor recommended\nto run the code generators, and no instructions are provided\nfor them; their output is\nincluded in the repo.  You will need a suitable compiler: gcc or\nclang for unix-like systems, or the MSVC compiler set used for Python\nitself on Windows.  For Windows, some of the source code has been\nmodified to C++ because the MSVC C compiler does not support the\nC99 complex data type used in original GSW-C.\n\nTo test, after installation, run \"pytest\" from the source directory.\n\n\n",
  "requires_dist": [
    "numpy"
  ],
  "requires_python": ">=3.6",
  "current_version": "3.4.0",
  "released_versions": [
    "3.0.1",
    "3.0.2",
    "3.0.3",
    "3.0.6",
    "3.1.0",
    "3.1.1",
    "3.2.0",
    "3.2.1",
    "3.3.0",
    "3.3.1",
    "3.3.1.post1",
    "3.4.0"
  ]
}