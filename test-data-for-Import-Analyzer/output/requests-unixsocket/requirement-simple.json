{
  "name": "requests-unixsocket",
  "description": "requests-unixsocket\n===================\n\n.. image:: https://badge.fury.io/py/requests-unixsocket.svg\n    :target: https://badge.fury.io/py/requests-unixsocket\n    :alt: Latest Version on PyPI\n\n.. image:: https://travis-ci.org/msabramo/requests-unixsocket.svg?branch=master\n    :target: https://travis-ci.org/msabramo/requests-unixsocket\n\nUse `requests <http://docs.python-requests.org/>`_ to talk HTTP via a UNIX domain socket\n\nUsage\n-----\n\nExplicit\n++++++++\n\nYou can use it by instantiating a special ``Session`` object:\n\n.. code-block:: python\n\n    import json\n\n    import requests_unixsocket\n\n    session = requests_unixsocket.Session()\n\n    r = session.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')\n    registry_config = r.json()['RegistryConfig']\n    print(json.dumps(registry_config, indent=4))\n\n\nImplicit (monkeypatching)\n+++++++++++++++++++++++++\n\nMonkeypatching allows you to use the functionality in this module, while making\nminimal changes to your code. Note that in the above example we had to\ninstantiate a special ``requests_unixsocket.Session`` object and call the\n``get`` method on that object. Calling ``requests.get(url)`` (the easiest way\nto use requests and probably very common), would not work. But we can make it\nwork by doing monkeypatching.\n\nYou can monkeypatch globally:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    requests_unixsocket.monkeypatch()\n\n    r = requests.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')\n    assert r.status_code == 200\n\nor you can do it temporarily using a context manager:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    with requests_unixsocket.monkeypatch():\n        r = requests.get('http+unix://%2Fvar%2Frun%2Fdocker.sock/info')\n        assert r.status_code == 200\n\n\nAbstract namespace sockets\n++++++++++++++++++++++++++\n\nTo connect to an `abstract namespace\nsocket <https://utcc.utoronto.ca/~cks/space/blog/python/AbstractUnixSocketsAndPeercred>`_\n(Linux only), prefix the name with a NULL byte (i.e.: `\\0`) - e.g.:\n\n.. code-block:: python\n\n    import requests_unixsocket\n\n    session = requests_unixsocket.Session()\n    res = session.get('http+unix://\\0test_socket/get')\n    print(res.text)\n\nFor an example program that illustrates this, see\n``examples/abstract_namespace.py`` in the git repo. Since abstract namespace\nsockets are specific to Linux, the program will only work on Linux.\n\n\nSee also\n--------\n\n- https://github.com/httpie/httpie-unixsocket - a plugin for `HTTPie <https://httpie.org/>`_ that allows you to interact with UNIX domain sockets\n\n\n\n",
  "requires_dist": [
    "requests (>=1.1)",
    "urllib3 (>=1.8)"
  ],
  "requires_python": "",
  "current_version": "0.2.0",
  "released_versions": [
    "0.1.0",
    "0.1.0.1.g46ab6a7",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.2.0"
  ]
}