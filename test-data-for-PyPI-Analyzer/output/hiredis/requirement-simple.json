{
  "name": "hiredis",
  "description": "# hiredis-py\n\n[![Build Status](https://travis-ci.org/redis/hiredis-py.svg?branch=master)](https://travis-ci.org/redis/hiredis-py)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/muso9gbe316tjsac/branch/master?svg=true)](https://ci.appveyor.com/project/duyue/hiredis-py/)\n\nPython extension that wraps protocol parsing code in [hiredis][hiredis].\nIt primarily speeds up parsing of multi bulk replies.\n\n[hiredis]: http://github.com/redis/hiredis\n\n## Install\n\nhiredis-py is available on [PyPI](https://pypi.org/project/hiredis/), and can\nbe installed with:\n\n```\npip install hiredis\n```\n\n### Requirements\n\nhiredis-py requires **Python 3.6+**.\n\nMake sure Python development headers are available when installing hiredis-py.\nOn Ubuntu/Debian systems, install them with `apt-get install python3-dev`.\n\n## Usage\n\nThe `hiredis` module contains the `Reader` class. This class is responsible for\nparsing replies from the stream of data that is read from a Redis connection.\nIt does not contain functionality to handle I/O.\n\n### Reply parser\n\nThe `Reader` class has two methods that are used when parsing replies from a\nstream of data. `Reader.feed` takes a string argument that is appended to the\ninternal buffer. `Reader.gets` reads this buffer and returns a reply when the\nbuffer contains a full reply. If a single call to `feed` contains multiple\nreplies, `gets` should be called multiple times to extract all replies.\n\nExample:\n\n```python\n>>> reader = hiredis.Reader()\n>>> reader.feed(\"$5\\r\\nhello\\r\\n\")\n>>> reader.gets()\nb'hello'\n```\n\nWhen the buffer does not contain a full reply, `gets` returns `False`. This\nmeans extra data is needed and `feed` should be called again before calling\n`gets` again:\n\n```python\n>>> reader.feed(\"*2\\r\\n$5\\r\\nhello\\r\\n\")\n>>> reader.gets()\nFalse\n>>> reader.feed(\"$5\\r\\nworld\\r\\n\")\n>>> reader.gets()\n[b'hello', b'world']\n```\n\n#### Unicode\n\n`hiredis.Reader` is able to decode bulk data to any encoding Python supports.\nTo do so, specify the encoding you want to use for decoding replies when\ninitializing it:\n\n```python\n>>> reader = hiredis.Reader(encoding=\"utf-8\", errors=\"strict\")\n>>> reader.feed(b\"$3\\r\\n\\xe2\\x98\\x83\\r\\n\")\n>>> reader.gets()\n'\u2603'\n```\n\nDecoding of bulk data will be attempted using the specified encoding and\nerror handler. If the error handler is `'strict'` (the default), a\n`UnicodeDecodeError` is raised when data cannot be dedcoded. This is identical\nto Python's default behavior. Other valid values to `errors` include\n`'replace'`, `'ignore'`, and `'backslashreplace'`. More information on the\nbehavior of these error handlers can be found\n[here](https://docs.python.org/3/howto/unicode.html#the-string-type).\n\n\nWhen the specified encoding cannot be found, a `LookupError` will be raised\nwhen calling `gets` for the first reply with bulk data.\n\n#### Error handling\n\nWhen a protocol error occurs (because of multiple threads using the same\nsocket, or some other condition that causes a corrupt stream), the error\n`hiredis.ProtocolError` is raised. Because the buffer is read in a lazy\nfashion, it will only be raised when `gets` is called and the first reply in\nthe buffer contains an error. There is no way to recover from a faulty protocol\nstate, so when this happens, the I/O code feeding data to `Reader` should\nprobably reconnect.\n\nRedis can reply with error replies (`-ERR ...`). For these replies, the custom\nerror class `hiredis.ReplyError` is returned, **but not raised**.\n\nWhen other error types should be used (so existing code doesn't have to change\nits `except` clauses), `Reader` can be initialized with the `protocolError` and\n`replyError` keywords. These keywords should contain a *class* that is a\nsubclass of `Exception`. When not provided, `Reader` will use the default\nerror types.\n\n## Benchmarks\n\nThe repository contains a benchmarking script in the `benchmark` directory,\nwhich uses [gevent](http://gevent.org/) to have non-blocking I/O and redis-py\nto handle connections. These benchmarks are done with a patched version of\nredis-py that uses hiredis-py when it is available.\n\nAll benchmarks are done with 10 concurrent connections.\n\n* SET key value + GET key\n  * redis-py: 11.76 Kops\n  * redis-py *with* hiredis-py: 13.40 Kops\n  * improvement: **1.1x**\n\nList entries in the following tests are 5 bytes.\n\n* LRANGE list 0 **9**:\n  * redis-py: 4.78 Kops\n  * redis-py *with* hiredis-py: 12.94 Kops\n  * improvement: **2.7x**\n* LRANGE list 0 **99**:\n  * redis-py: 0.73 Kops\n  * redis-py *with* hiredis-py: 11.90 Kops\n  * improvement: **16.3x**\n* LRANGE list 0 **999**:\n  * redis-py: 0.07 Kops\n  * redis-py *with* hiredis-py: 5.83 Kops\n  * improvement: **83.2x**\n\nThroughput improvement for simple SET/GET is minimal, but the larger multi bulk replies\nget, the larger the performance improvement is.\n\n## License\n\nThis code is released under the BSD license, after the license of hiredis.\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.6",
  "current_version": "2.0.0",
  "released_versions": [
    "0.0.1",
    "0.0.3",
    "0.0.4",
    "0.1.0",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.1.6",
    "0.2.0",
    "0.3.0",
    "0.3.1",
    "1.0.0",
    "1.0.1",
    "1.1.0",
    "2.0.0",
    "2.0.0.dev0"
  ]
}