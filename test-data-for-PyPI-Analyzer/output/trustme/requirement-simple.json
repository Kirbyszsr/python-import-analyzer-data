{
  "name": "trustme",
  "description": ".. note that this README gets 'include'ed into the main documentation\n\n==============================================\n trustme: #1 quality TLS certs while you wait\n==============================================\n\n.. image:: https://vignette2.wikia.nocookie.net/jadensadventures/images/1/1e/Kaa%27s_hypnotic_eyes.jpg/revision/latest?cb=20140310173415\n   :width: 200px\n   :align: right\n\nYou wrote a cool network client or server. It encrypts connections\nusing `TLS\n<https://en.wikipedia.org/wiki/Transport_Layer_Security>`__. Your test\nsuite needs to make TLS connections to itself.\n\nUh oh. Your test suite *probably* doesn't have a valid TLS\ncertificate. Now what?\n\n``trustme`` is a tiny Python package that does one thing: it gives you\na `fake <https://martinfowler.com/bliki/TestDouble.html>`__\ncertificate authority (CA) that you can use to generate fake TLS certs\nto use in your tests. Well, technically they're real certs, they're\njust signed by your CA, which nobody trusts. But you can trust\nit. Trust me.\n\n\nVital statistics\n================\n\n**Install:** ``pip install -U trustme``\n\n**Documentation:** https://trustme.readthedocs.io\n\n**Bug tracker and source code:** https://github.com/python-trio/trustme\n\n**Tested on:** Python 2.7 and Python 3.5+, CPython and PyPy\n\n**License:** MIT or Apache 2, your choice.\n\n**Code of conduct:** Contributors are requested to follow our `code of\nconduct\n<https://github.com/python-trio/trustme/blob/master/CODE_OF_CONDUCT.md>`__\nin all project spaces.\n\n\nCheat sheet\n===========\n\nProgrammatic usage:\n\n.. code-block:: python\n\n   import trustme\n\n   # ----- Creating certs -----\n\n   # Look, you just created your certificate authority!\n   ca = trustme.CA()\n\n   # And now you issued a cert signed by this fake CA\n   # https://en.wikipedia.org/wiki/Example.org\n   server_cert = ca.issue_cert(u\"test-host.example.org\")\n\n   # That's it!\n\n   # ----- Using your shiny new certs -----\n\n   # You can configure SSL context objects to trust this CA:\n   ca.configure_trust(ssl_context)\n   # Or configure them to present the server certificate\n   server_cert.configure_cert(ssl_context)\n   # You can use standard library or PyOpenSSL context objects here,\n   # trustme is happy either way.\n\n   # ----- or -----\n\n   # Save the PEM-encoded data to a file to use in non-Python test\n   # suites:\n   ca.cert_pem.write_to_path(\"ca.pem\")\n   server_cert.private_key_and_cert_chain_pem.write_to_path(\"server.pem\")\n\n   # ----- or -----\n\n   # Put the PEM-encoded data in a temporary file, for libraries that\n   # insist on that:\n   with ca.cert_pem.tempfile() as ca_temp_path:\n       requests.get(\"https://...\", verify=ca_temp_path)\n\nCommand line usage:\n\n.. code-block:: console\n\n   $ # Certs may be generated from anywhere. Here's where we are:\n   $ pwd\n   /tmp\n   $ # ----- Creating certs -----\n   $ python -m trustme\n   Generated a certificate for 'localhost', '127.0.0.1', '::1'\n   Configure your server to use the following files:\n     cert=/tmp/server.pem\n     key=/tmp/server.key\n   Configure your client to use the following files:\n     cert=/tmp/client.pem\n   $ # ----- Using certs -----\n   $ gunicorn --keyfile server.key --certfile server.pem app:app\n   $ curl --cacert client.pem https://localhost:8000/\n   Hello, world!\n\n\nFAQ\n===\n\n**Should I use these certs for anything real?** Certainly not.\n\n**Why not just use self-signed certificates?** These are more\nrealistic. You don't have to disable your certificate validation code\nin your test suite, which is good because you want to test what you\nrun in production, and you would *never* disable your certificate\nvalidation code in production, right? Plus, they're just as easy to\nwork with. Actually easier, in many cases.\n\n**What if I want to test how my code handles some bizarre TLS\nconfiguration?** Sure, I'm happy to extend the API to give more\ncontrol over the generated certificates, at least as long as it\ndoesn't turn into a second-rate re-export of everything in\n`cryptography <https://cryptography.io>`__. (If you need a\nfully general X.509 library, then they do a great job at that.) `Let's\ntalk <https://github.com/python-trio/trustme/issues/new>`__, or send a\nPR.\n\n\n",
  "requires_dist": [
    "cryptography",
    "idna",
    "ipaddress ; python_version < \"3.3\""
  ],
  "requires_python": "",
  "current_version": "0.7.0",
  "released_versions": [
    "0.1.0",
    "0.2.0",
    "0.3.0",
    "0.4.0",
    "0.5.0",
    "0.5.1",
    "0.5.2",
    "0.5.3",
    "0.6.0",
    "0.7.0"
  ]
}