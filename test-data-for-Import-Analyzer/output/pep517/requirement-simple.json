{
  "name": "pep517",
  "description": "API to call PEP 517 hooks\n=========================\n\n`PEP 517 <https://www.python.org/dev/peps/pep-0517/>`_ specifies a standard\nAPI for systems which build Python packages.\n\nThis package contains wrappers around the hooks specified by PEP 517. It\nprovides:\n\n- A mechanism to call the hooks in a subprocess, so they are isolated from\n  the current process.\n- Fallbacks for the optional hooks, so that frontends can call the hooks without\n  checking which are defined.\n\nRun the tests with ``pytest`` or `tox <https://pypi.org/project/tox>`_.\n\nUsage\u2014you are responsible for ensuring build requirements are available:\n\n.. code-block:: python\n\n    import os\n    import toml\n    from pep517.wrappers import Pep517HookCaller\n\n    src = 'path/to/source'  # Folder containing 'pyproject.toml'\n    with open(os.path.join(src, 'pyproject.toml')) as f:\n        build_sys = toml.load(f)['build-system']\n\n    print(build_sys['requires'])  # List of static requirements\n    # The caller is responsible for installing these and running the hooks in\n    # an environment where they are available.\n\n    hooks = Pep517HookCaller(\n        src, \n        build_backend=build_sys['build-backend'],\n        backend_path=build_sys.get('backend-path'),\n    )\n\n    config_options = {}   # Optional parameters for backend\n    # List of dynamic requirements:\n    print(hooks.get_requires_for_build_wheel(config_options))\n    # Again, the caller is responsible for installing these build requirements\n\n    destination = 'also/a/folder'\n    whl_filename = hooks.build_wheel(destination, config_options)\n    assert os.path.isfile(os.path.join(destination, whl_filename))\n\nDeprecated high-level\n---------------------\n\nFor now, ``pep517`` also contains higher-level functions which install the build\ndependencies into a temporary environment and build a wheel/sdist using them.\nThis is a rough implementation, e.g. it does not do proper build isolation.\nThe `PyPA build project <https://github.com/pypa/build>`_ is recommended as an\nalternative, although it's still quite young in October 2020.\nThis layer of functionality in ``pep517`` is now deprecated, but won't be\nremoved for some time, as there is code relying on it.\n\nHigh level usage, with build requirements handled:\n\n.. code-block:: python\n\n    import os\n    from pep517.envbuild import build_wheel, build_sdist\n\n    src = 'path/to/source'  # Folder containing 'pyproject.toml'\n    destination = 'also/a/folder'\n    whl_filename = build_wheel(src, destination)\n    assert os.path.isfile(os.path.join(destination, whl_filename))\n\n    targz_filename = build_sdist(src, destination)\n    assert os.path.isfile(os.path.join(destination, targz_filename))\n\nTo test the build backend for a project, run in a system shell:\n\n.. code-block:: shell\n\n    python3 -m pep517.check path/to/source  # source dir containing pyproject.toml\n\nTo build a backend into source and/or binary distributions, run in a shell:\n\n.. code-block:: shell\n\n    python -m pep517.build path/to/source  # source dir containing pyproject.toml\n\nAll of this high-level functionality is deprecated.\n",
  "requires_dist": [
    "toml",
    "importlib_metadata;python_version<'3.8'",
    "zipp;python_version<'3.8'"
  ],
  "requires_python": "",
  "current_version": "0.10.0",
  "released_versions": [
    "0.1",
    "0.10.0",
    "0.2",
    "0.3",
    "0.4.0",
    "0.5.0",
    "0.6.0",
    "0.7.0",
    "0.8.1",
    "0.8.2",
    "0.9.1"
  ]
}