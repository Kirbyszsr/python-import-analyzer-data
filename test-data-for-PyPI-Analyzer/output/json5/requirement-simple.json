{
  "name": "json5",
  "description": "# pyjson5\n\nA Python implementation of the JSON5 data format.\n\n[JSON5](https://json5.org) extends the\n[JSON](http://www.json.org) data interchange format to make it\nslightly more usable as a configuration language:\n\n* JavaScript-style comments (both single and multi-line) are legal.\n\n* Object keys may be unquoted if they are legal ECMAScript identifiers\n\n* Objects and arrays may end with trailing commas.\n\n* Strings can be single-quoted, and multi-line string literals are allowed.\n\nThere are a few other more minor extensions to JSON; see the above page for\nthe full details.\n\nThis project implements a reader and writer implementation for Python;\nwhere possible, it mirrors the\n[standard Python JSON API](https://docs.python.org/library/json.html)\npackage for ease of use.\n\nThere is one notable difference from the JSON api: the `load()` and\n`loads()` methods support optionally checking for (and rejecting) duplicate\nobject keys; pass `allow_duplicate_keys=False` to do so (duplicates are\nallowed by default).\n\nThis is an early release. It has been reasonably well-tested, but it is\n**SLOW**. It can be 1000-6000x slower than the C-optimized JSON module,\nand is 200x slower (or more) than the pure Python JSON module.\n\n## Known issues\n\n* Did I mention that it is **SLOW**?\n\n* The implementation follows Python3's `json` implementation where\n  possible. This means that the `encoding` method to `dump()` is\n  ignored, and unicode strings are always returned.\n\n* The `cls` keyword argument that `json.load()`/`json.loads()` accepts\n  to specify a custom subclass of ``JSONDecoder`` is not and will not be\n  supported, because this implementation uses a completely different\n  approach to parsing strings and doesn't have anything like the\n  `JSONDecoder` class.\n\n* The `cls` keyword argument that `json.dump()`/`json.dumps()` accepts\n  is also not supported, for consistency with `json5.load()`. The `default`\n  keyword *is* supported, though, and might be able to serve as a\n  workaround.\n\n## Running the tests\nTo run the tests, setup a venv and install the required dependencies with\n`pip install -e '.[dev]'`, then run the tests with `python setup.py test`.\n\n\n## Version History / Release Notes\n\n* v0.9.5 (2020-05-26)\n    * Miscellaneous non-source cleanups in the repo, including setting\n      up GitHub Actions for a CI system. No changes to the library from\n      v0.9.4, other than updating the version.\n\n* v0.9.4 (2020-03-26)\n    * [GitHub pull #38](https://github.com/dpranke/pyjson5/pull/38)\n      Fix from fredrik@fornwall.net for dumps() crashing when passed\n      an empty string as a key in an object.\n\n* v0.9.3 (2020-03-17)\n    * [GitHub pull #35](https://github.com/dpranke/pyjson5/pull/35)\n      Fix from pastelmind@ for dump() not passing the right args to dumps().\n    * Fix from p.skouzos@novafutur.com to remove the tests directory from\n      the setup call, making the package a bit smaller.\n\n* v0.9.2 (2020-03-02)\n    * [GitHub pull #34](https://github.com/dpranke/pyjson5/pull/34)\n      Fix from roosephu@ for a badly formatted nested list.\n\n* v0.9.1 (2020-02-09)\n    * [GitHub issue #33](https://github.com/dpranke/pyjson5/issues/33):\n       Fix stray trailing comma when dumping an object with an invalid key.\n\n* v0.9.0 (2020-01-30)\n    * [GitHub issue #29](https://github.com/dpranke/pyjson5/issues/29):\n       Fix an issue where objects keys that started with a reserved\n       word were incorrectly quoted.\n    * [GitHub issue #30](https://github.com/dpranke/pyjson5/issues/30):\n       Fix an issue where dumps() incorrectly thought a data structure\n       was cyclic in some cases.\n    * [GitHub issue #32](https://github.com/dpranke/pyjson5/issues/32):\n       Allow for non-string keys in dicts passed to ``dump()``/``dumps()``.\n       Add an ``allow_duplicate_keys=False`` to prevent possible\n       ill-formed JSON that might result.\n\n* v0.8.5 (2019-07-04)\n    * [GitHub issue #25](https://github.com/dpranke/pyjson5/issues/25):\n      Add LICENSE and README.md to the dist.\n    * [GitHub issue #26](https://github.com/dpranke/pyjson5/issues/26):\n      Fix printing of empty arrays and objects with indentation, fix\n      misreporting of the position on parse failures in some cases.\n\n* v0.8.4 (2019-06-11)\n    * Updated the version history, too.\n\n* v0.8.3 (2019-06-11)\n    * Tweaked the README, bumped the version, forgot to update the version\n      history :).\n\n* v0.8.2 (2019-06-11)\n    * Actually bump the version properly, to 0.8.2.\n\n* v0.8.1 (2019-06-11)\n    * Fix bug in setup.py that messed up the description. Unfortunately,\n      I forgot to bump the version for this, so this also identifies as 0.8.0.\n\n* v0.8.0 (2019-06-11)\n    * Add `allow_duplicate_keys=True` as a default argument to\n      `json5.load()`/`json5.loads()`. If you set the key to `False`, duplicate\n      keys in a single dict will be rejected. The default is set to `True`\n      for compatibility with `json.load()`, earlier versions of json5, and\n      because it's simply not clear if people would want duplicate checking\n      enabled by default.\n\n* v0.7 (2019-03-31)\n    * Changes dump()/dumps() to not quote object keys by default if they are\n      legal identifiers. Passing `quote_keys=True` will turn that off\n      and always quote object keys.\n    * Changes dump()/dumps() to insert trailing commas after the last item\n      in an array or an object if the object is printed across multiple lines\n      (i.e., if `indent` is not None). Passing `trailing_commas=False` will\n      turn that off.\n    * The `json5.tool` command line tool now supports the `--indent`,\n      `--[no-]quote-keys`, and `--[no-]trailing-commas` flags to allow\n      for more control over the output, in addition to the existing\n      `--as-json` flag.\n    * The `json5.tool` command line tool no longer supports reading from\n      multiple files, you can now only read from a single file or\n      from standard input.\n    * The implementation no longer relies on the standard `json` module\n      for anything. The output should still match the json module (except\n      as noted above) and discrepancies should be reported as bugs.\n\n* v0.6.2 (2019-03-08)\n    * Fix [GitHub issue #23](https://github.com/dpranke/pyjson5/issues/23) and\n      pass through unrecognized escape sequences.\n\n* v0.6.1 (2018-05-22)\n    * Cleaned up a couple minor nits in the package.\n\n* v0.6.0 (2017-11-28)\n    * First implementation that attempted to implement 100% of the spec.\n\n* v0.5.0 (2017-09-04)\n    * First implementation that supported the full set of kwargs that\n      the `json` module supports.\n\n\n",
  "requires_dist": [
    "hypothesis ; extra == 'dev'"
  ],
  "requires_python": "",
  "current_version": "0.9.5",
  "released_versions": [
    "0.1.0",
    "0.1.1",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.2.0",
    "0.2.1",
    "0.2.2",
    "0.2.3",
    "0.2.4",
    "0.4.0",
    "0.5.0",
    "0.5.1",
    "0.5.1rc0",
    "0.6.0",
    "0.6.1",
    "0.6.2",
    "0.7.0",
    "0.8.2",
    "0.8.4",
    "0.8.5",
    "0.9.0",
    "0.9.1",
    "0.9.2",
    "0.9.3",
    "0.9.4",
    "0.9.5"
  ]
}