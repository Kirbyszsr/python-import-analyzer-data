{
  "name": "linkify-it-py",
  "description": "# linkify-it-py\n\n[![CI](https://github.com/tsutsu3/linkify-it-py/workflows/CI/badge.svg?branch=main)](https://github.com/tsutsu3/linkify-it-py/actions)\n[![pypi](https://img.shields.io/pypi/v/linkify-it-py)](https://pypi.org/project/linkify-it-py/)\n[![codecov](https://codecov.io/gh/tsutsu3/linkify-it-py/branch/main/graph/badge.svg)](https://codecov.io/gh/tsutsu3/linkify-it-py)\n[![Maintainability](https://api.codeclimate.com/v1/badges/6341fd3ec5f05fde392f/maintainability)](https://codeclimate.com/github/tsutsu3/linkify-it-py/maintainability)\n\nThis is Python port of [linkify-it](https://github.com/markdown-it/linkify-it).\n\n> Links recognition library with FULL unicode support.\n> Focused on high quality link patterns detection in plain text.\n\n__[Javascript Demo](http://markdown-it.github.io/linkify-it/)__\n\nWhy it's awesome:\n\n- Full unicode support, _with astral characters_!\n- International domains support.\n- Allows rules extension & custom normalizers.\n\n\n## Install\n\n```bash\npip install linkify-it-py\n```\n\n## Usage examples\n\n### Example 1. Simple use\n\n```python\nfrom linkify_it import LinkifyIt\n\n\nlinkify = LinkifyIt()\n\nprint(linkify.test(\"Site github.com!\"))\n# => True\n\nprint(linkify.match(\"Site github.com!\"))\n# => [linkify_it.main.Match({\n#         'schema': '',\n#         'index': 5,\n#         'last_index': 15,\n#         'raw': 'github.com',\n#         'text': 'github.com',\n#         'url': 'http://github.com'\n#     }]\n```\n\n### Example 2. With options\n\n```python\nfrom linkify_it import LinkifyIt\nfrom linkify_it.tlds import TLDS\n\n\n# Reload full tlds list & add unofficial `.onion` domain.\nlinkify = (\n    LinkifyIt()\n    .tlds(TLDS)               # Reload with full tlds list\n    .tlds(\"onion\", True)      # Add unofficial `.onion` domain\n    .add(\"git:\", \"http:\")     # Add `git:` protocol as \"alias\"\n    .add(\"ftp:\", None)        # Disable `ftp:` protocol\n    .set({\"fuzzy_ip\": True})  # Enable IPs in fuzzy links (without schema)\n)\nprint(linkify.test(\"Site tamanegi.onion!\"))\n# => True\n\nprint(linkify.match(\"Site tamanegi.onion!\"))\n# => [linkify_it.main.Match({\n#         'schema': '',\n#         'index': 5,\n#         'last_index': 19,\n#         'raw': 'tamanegi.onion',\n#         'text': 'tamanegi.onion',\n#         'url': 'http://tamanegi.onion'\n#     }]\n```\n\n### Example 3. Add twitter mentions handler\n\n```python\nfrom linkify import LinkfiyIt\n\n\nlinkifyit = LinkifyIt()\n\ndef validate(self, text, pos):\n    tail = text[pos:]\n\n    if not self.re.get(\"twitter\"):\n        self.re[\"twitter\"] = re.compile(\n            \"^([a-zA-Z0-9_]){1,15}(?!_)(?=$|\" + self.re[\"src_ZPCc\"] + \")\"\n        )\n    if self.re[\"twitter\"].search(tail):\n        if pos > 2 and tail[pos - 2] == \"@\":\n            return False\n        return len(self.re[\"twitter\"].search(tail).group())\n    return 0\n\ndef normalize(self, m):\n    m.url = \"https://twitter.com/\" + re.sub(r\"^@\", \"\", m.url)\n\nlinkifyit.add(\"@\", {\"validate\": validate, \"normalize\": normalize})\n```\n\n\n## API\n\n[API documentation](https://linkify-it-py.readthedocs.io/en/latest/)\n\n### LinkifyIt(schemas, options)\n\nCreates new linkifier instance with optional additional schemas.\n\nBy default understands:\n\n- `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n- \"fuzzy\" links and emails (google.com, foo@bar.com).\n\n`schemas` is an dict, where each key/value describes protocol/rule:\n\n- __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n  for example). `linkify-it-py` makes sure that prefix is not preceded with\n  alphanumeric char.\n- __value__ - rule to check tail after link prefix\n  - _str_\n    - just alias to existing rule\n  - _dict_\n    - _validate_ - either a `re.Pattern` (start with `^`, and don't include the\n      link prefix itself), or a validator `function` which, given arguments\n      _self_, _text_ and _pos_, returns the length of a match in _text_\n      starting at index _pos_.  _pos_ is the index right after the link prefix.\n      _self_ can be used to access the linkify object to cache data.\n    - _normalize_ - optional function to normalize text & url of matched result\n      (for example, for twitter mentions).\n\n`options`:\n\n- __fuzzy_link__ - recognize URL-s without `http(s)://` head. Default `True`.\n- __fuzzy_ip__ - allow IPs in fuzzy links above. Can conflict with some texts\n  like version numbers. Default `False`.\n- __fuzzy_email__ - recognize emails without `mailto:` prefix. Default `True`.\n- __---__ - set `True` to terminate link with `---` (if it's considered as long dash).\n\n\n### .test(text)\n\nSearches linkifiable pattern and returns `True` on success or `False` on fail.\n\n\n### .pretest(text)\n\nQuick check if link MAY BE can exist. Can be used to optimize more expensive\n`.test()` calls. Return `False` if link can not be found, `True` - if `.test()`\ncall needed to know exactly.\n\n\n### .test_schema_at(text, name, position)\n\nSimilar to `.test()` but checks only specific protocol tail exactly at given\nposition. Returns length of found pattern (0 on fail).\n\n\n### .match(text)\n\nReturns `list` of found link matches or null if nothing found.\n\nEach match has:\n\n- __schema__ - link schema, can be empty for fuzzy links, or `//` for\n  protocol-neutral links.\n- __index__ - offset of matched text\n- __last_index__ - index of next char after mathch end\n- __raw__ - matched text\n- __text__ - normalized text\n- __url__ - link, generated from matched text\n\n\n### .tlds(list_tlds, keep_old=False)\n\nLoad (or merge) new tlds list. Those are needed for fuzzy links (without schema)\nto avoid false positives. By default:\n\n- 2-letter root zones are ok.\n- biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444 are ok.\n- encoded (`xn--...`) root zones are ok.\n\nIf that's not enough, you can reload defaults with more detailed zones list.\n\n### .add(key, value)\n\nAdd a new schema to the schemas object. As described in the constructor\ndefinition, `key` is a link prefix (`skype:`, for example), and `value`\nis a `str` to alias to another schema, or an `dict` with `validate` and\noptionally `normalize` definitions.  To disable an existing rule, use\n`.add(key, None)`.\n\n\n### .set(options)\n\nOverride default options. Missed properties will not be changed.\n\n\n## License\n\n[MIT](https://github.com/tsutsu3/linkify-it-py/blob/master/LICENSE)\n\n\n",
  "requires_dist": [
    "uc-micro-py",
    "pytest ; extra == 'benchmark'",
    "pytest-benchmark ; extra == 'benchmark'",
    "pre-commit ; extra == 'dev'",
    "isort ; extra == 'dev'",
    "flake8 ; extra == 'dev'",
    "black ; extra == 'dev'",
    "sphinx ; extra == 'doc'",
    "sphinx-book-theme ; extra == 'doc'",
    "myst-parser ; extra == 'doc'",
    "coverage ; extra == 'test'",
    "pytest ; extra == 'test'",
    "pytest-cov ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "current_version": "1.0.1",
  "released_versions": [
    "0.0.1",
    "1.0.0",
    "1.0.1"
  ]
}