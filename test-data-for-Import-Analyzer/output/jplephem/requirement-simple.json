{
  "name": "jplephem",
  "description": "\nCite as: `Astrophysics Source Code Library, record ascl:1112.014\n<https://ascl.net/1112.014>`_\n\nThis package can load and use a Jet Propulsion Laboratory (JPL)\nephemeris for predicting the position and velocity of a planet or other\nSolar System body.  It only needs `NumPy <http://www.numpy.org/>`_,\nwhich ``pip`` will automatically attempt to install alongside\n``pyephem`` when you run::\n\n    $ pip install jplephem\n\nIf you see NumPy compilation errors, then try downloading and installing\nNumPy directly from `its web site <http://www.numpy.org/>`_ or simply\nuse a distribution of Python with science tools already installed, like\n`Anaconda <http://continuum.io/downloads>`_.\n\nNote that ``jplephem`` offers only the logic necessary to produce plain\nthree-dimensional vectors.  Most programmers interested in astronomy\nwill want to look at `Skyfield <http://rhodesmill.org/skyfield/>`_\ninstead, which uses ``jplephem`` but converts the numbers into more\ntraditional measurements like right ascension and declination.\n\nMost users will use ``jplephem`` with the Satellite Planet Kernel (SPK)\nfiles that the NAIF facility at NASA JPL offers for use with their own\nSPICE toolkit.  They have collected their most useful kernels beneath\nthe directory:\n\nhttp://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/\n\nTo learn more about SPK files, the official `SPK Required Reading\n<http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/FORTRAN/req/spk.html>`_\ndocument is available from the NAIF facility\u2019s web site under the NASA\nJPL domain.\n\nCommand Line Tool\n-----------------\n\nIf you have downloaded a ``.bsp`` file, you can run ``jplephem`` from\nthe command line to display the data inside of it::\n\n    python -m jplephem comment de421.bsp\n    python -m jplephem daf de421.bsp\n    python -m jplephem spk de421.bsp\n\nYou can also take a large ephemeris and produce a smaller excerpt by\nlimiting the range of dates that it covers::\n\n    python -m jplephem excerpt 2018/1/1 2018/4/1 de421.bsp excerpt421.bsp\n\nYou can also filter by the integer codes for the targets you need.\nUnrecognized targets will not raise an error, to let you apply a master\nlist of targets to a whole series of SPK files that might or might not\neach have all of the targets::\n\n    python -m jplephem excerpt --targets 1,2,3 2018/1/1 2018/4/1 de421.bsp excerpt421.bsp\n\nIf the input ephemeris is a URL, then `jplephem` will try to save\nbandwidth by fetching only the blocks of the remote file that are\nnecessary to cover the dates you have specified.  For example, the\nJupiter satellite ephemeris `jup310.bsp` is famously large, weighing in\na nearly a gigabyte.  But if all you need are Jupiter's satellites for a\nfew months, you can download considerably less data::\n\n    $ python -m jplephem excerpt 2018/1/1 2018/4/1 \\\n        https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/satellites/jup310.bsp \\\n        excerpt.bsp\n    $ ls -lh excerpt.bsp\n    -rw-r----- 1 brandon brandon 1.2M Feb 11 13:36 excerpt.bsp\n\nIn this case only about one-thousandth of the ephemeris's data needed to\nbe downloaded.\n\nGetting Started With DE421\n--------------------------\n\nThe DE421 ephemeris is a useful starting point.  It weighs in at 17\u00a0MB,\nbut provides predictions over the years 1900\u20132050:\n\nhttps://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/planets/a_old_versions/de421.bsp\n\nAfter the kernel has downloaded, you can use ``jplephem`` to load this\nSPK file and learn about the segments it offers:\n\n>>> from jplephem.spk import SPK\n>>> kernel = SPK.open('de421.bsp')\n>>> print(kernel)\nFile type DAF/SPK and format LTL-IEEE with 15 segments:\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Mercury Barycenter (1)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Venus Barycenter (2)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Earth Barycenter (3)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Mars Barycenter (4)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Jupiter Barycenter (5)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Saturn Barycenter (6)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Uranus Barycenter (7)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Neptune Barycenter (8)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Pluto Barycenter (9)\n2414864.50..2471184.50  Type 2  Solar System Barycenter (0) -> Sun (10)\n2414864.50..2471184.50  Type 2  Earth Barycenter (3) -> Moon (301)\n2414864.50..2471184.50  Type 2  Earth Barycenter (3) -> Earth (399)\n2414864.50..2471184.50  Type 2  Mercury Barycenter (1) -> Mercury (199)\n2414864.50..2471184.50  Type 2  Venus Barycenter (2) -> Venus (299)\n2414864.50..2471184.50  Type 2  Mars Barycenter (4) -> Mars (499)\n\nSince the next few examples involve vector output, let\u2019s tell NumPy to\nmake vector output attractive.\n\n>>> import numpy as np\n>>> np.set_printoptions(precision=3)\n\nEach segment of the file lets you predict the position of an object with\nrespect to some other reference point.  If you want the coordinates of\nMars at 2457061.5 (2015 February\u00a08) with respect to the center of the\nsolar system, this ephemeris only requires you to take a single step:\n\n>>> position = kernel[0,4].compute(2457061.5)\n>>> print(position)\n[2.057e+08 4.251e+07 1.394e+07]\n\nBut learning the position of Mars with respect to the Earth takes three\nsteps, from Mars to the Solar System barycenter to the Earth-Moon\nbarycenter and finally to Earth itself:\n\n>>> position = kernel[0,4].compute(2457061.5)\n>>> position -= kernel[0,3].compute(2457061.5)\n>>> position -= kernel[3,399].compute(2457061.5)\n>>> print(position)\n[ 3.161e+08 -4.679e+07 -2.476e+07]\n\nYou can see that the output of this ephemeris is in kilometers.  If you\nuse another ephemeris, check its documentation to be sure of the units\nthat it employs.\n\nIf you supply the date as a NumPy array, then each component that is\nreturned will itself be a vector as long as your date:\n\n>>> jd = np.array([2457061.5, 2457062.5, 2457063.5, 2457064.5])\n>>> position = kernel[0,4].compute(jd)\n>>> print(position)\n[[2.057e+08 2.053e+08 2.049e+08 2.045e+08]\n [4.251e+07 4.453e+07 4.654e+07 4.855e+07]\n [1.394e+07 1.487e+07 1.581e+07 1.674e+07]]\n\nSome ephemerides include velocity inline by returning a 6-vector instead\nof a 3-vector.  For an ephemeris that does not, you can ask for the\nChebyshev polynomial to be differentiated to produce a velocity, which\nis delivered as a second return value:\n\n>>> position, velocity = kernel[0,4].compute_and_differentiate(2457061.5)\n>>> print(position)\n[2.057e+08 4.251e+07 1.394e+07]\n>>> print(velocity)\n[-363896.059 2019662.996  936169.773]\n\nThe velocity will by default be distance traveled per day, in whatever\nunits for distance the ephemeris happens to use.  To get a velocity per\nsecond, simply divide by the number of seconds in a day:\n\n>>> velocity_per_second = velocity / 86400.0\n>>> print(velocity_per_second)\n[-4.212 23.376 10.835]\n\nDetails of the API\n------------------\n\nHere are a few details for people ready to go beyond the high-level API\nprovided above and read through the code to learn more.\n\n* Instead of reading an entire ephemeris into memory, ``jplephem``\n  memory-maps the underlying file so that the operating system can\n  efficiently page into RAM only the data that your code is using.\n\n* Once the metadata has been parsed from the binary SPK file, the\n  polynomial coefficients themselves are loaded by building a NumPy\n  array object that has access to the raw binary file contents.\n  Happily, NumPy already knows how to interpret a packed array of\n  double-precision floats.  You can learn about the underlying DAF\n  \u201cDouble Precision Array File\u201d format, in case you ever need to open\n  other such array files in Python, through the ``DAF`` class in the\n  module ``jplephem.daf``.\n\n* An SPK file is made of segments.  When you first create an ``SPK``\n  kernel object ``k``, it examines the file and creates a list of\n  ``Segment`` objects that it keeps in a list under an attribute named\n  ``k.segments`` which you are free to examine in your own code by\n  looping over it.\n\n* There is more information about each segment beyond the one-line\n  summary that you get when you print out the SPK file, which you can\n  see by asking the segment to print itself verbosely:\n\n  >>> segment = kernel[3,399]\n  >>> print(segment.describe())\n  2414864.50..2471184.50  Type 2  Earth Barycenter (3) -> Earth (399)\n    frame=1 source=DE-0421LE-0421\n\n* Each ``Segment`` loaded from the kernel has a number of attributes\n  that are loaded from the SPK file:\n\n  >>> from jplephem.spk import BaseSegment\n  >>> help(BaseSegment)\n  Help on class BaseSegment in module jplephem.spk:\n  ...\n   |  segment.source - official ephemeris name, like 'DE-0430LE-0430'\n   |  segment.start_second - initial epoch, as seconds from J2000\n   |  segment.end_second - final epoch, as seconds from J2000\n   |  segment.start_jd - start_second, converted to a Julian Date\n   |  segment.end_jd - end_second, converted to a Julian Date\n   |  segment.center - integer center identifier\n   |  segment.target - integer target identifier\n   |  segment.frame - integer frame identifier\n   |  segment.data_type - integer data type identifier\n   |  segment.start_i - index where segment starts\n   |  segment.end_i - index where segment ends\n  ...\n\n* If you want to access the raw coefficients, use the segment\n  ``load_array()`` method.  It returns two floats and a NumPy array:\n\n  >>> initial_epoch, interval_length, coefficients = segment.load_array()\n  >>> print(coefficients.shape)\n  (3, 14080, 13)\n\n* The square-bracket lookup mechanism ``kernel[3,399]`` is a\n  non-standard convenience that returns only the last matching segment\n  in the file.  While the SPK standard does say that the last segment\n  takes precedence, it also says that earlier segments for a particular\n  center-target pair should be fallen back upon for dates that the last\n  segment does not cover.  So, if you ever tackle a complicated kernel,\n  you will need to implement fallback rules that send some dates to the\n  final segment for a given center and target, but that send other dates\n  to earlier segments that are qualified to cover them.\n\n* If you are accounting for light travel time and require repeated\n  computation of the position, but then need the velocity at the end,\n  and want to avoid repeating the expensive position calculation, then\n  try out the ``segment.generate()`` method - it will let you ask for\n  the position, and then only proceed to the velocity once you are sure\n  that the light-time error is now small enough.\n\nHigh-Precision Dates\n--------------------\n\nSince all modern Julian dates are numbers larger than 2.4 million, a\nstandard 64-bit Python or NumPy float necessarily leaves only a limited\nnumber of bits available for the fractional part.  *Technical Note\n2011-02* from the United States Naval Observatory's Astronomical\nApplications Department suggests that the `precision possible with a\n64-bit floating point Julian date is around 20.1\u00a0\u00b5s\n<http://jplephem.s3.amazonaws.com/JD_precision_test.pdf>`_.\n\nIf you need to supply times and receive back planetary positions with\ngreater precision than 20.1\u00a0\u00b5s, then you have two options.\n\nFirst, you can supply times using the special ``float96`` NumPy type,\nwhich is also aliased to the name ``longfloat``.  If you provide either\na ``float96`` scalar or a ``float96`` array as your ``tdb`` parameter to\nany ``jplephem`` routine, you should get back a high-precision result.\n\nSecond, you can split your date or dates into two pieces, and supply\nthem as a pair of arguments two ``tdb`` and ``tdb2``.  One popular\napproach for how to split your date is to use the ``tdb`` float for the\ninteger Julian date, and ``tdb2`` for the fraction that specifies the\ntime of day.  Nearly all ``jplephem`` routines accept this optional\n``tdb2`` argument if you wish to provide it, thanks to the work of\nMarten van Kerkwijk!\n\nSupport for Binary PCKs\n-----------------------\n\nYou can also load and produce rotation matrices from a binary PCK file.\nIts segments are available through the ``segments`` attributes of the\nreturned object.\n\n>>> from jplephem.pck import PCK\n>>> p = PCK.open('moon_pa_de421_1900-2050.bpc')\n>>> p.segments[0].body\n31006\n>>> p.segments[0].frame\n1\n>>> p.segments[0].data_type\n2\n\nGiven a solary system barycenter Julian date, the segment will return\nthe three angles necessary to build a rotation matrix: right ascension\nof the pole, declination of the pole, and cumulative rotation of the\nbody\u2019s axis.  Typically these will all be in radians.\n\n>>> tdb = 2454540.34103\n>>> print(p.segments[0].compute(tdb, 0.0, False))\n[3.928e-02 3.878e-01 3.253e+03]\n\nYou can ask for velocity as well.\n\n>>> r, v = p.segments[0].compute(tdb, 0.0, True)\n>>> print(r)\n[3.928e-02 3.878e-01 3.253e+03]\n>>> print(v)\n[6.707e-09 4.838e-10 2.655e-06]\n\nLegacy Ephemeris Packages\n-------------------------\n\nBack before I learned about SPICE and SPK files, I had run across the\ntext-file formatted JPL ephemerides at:\n\nftp://ssd.jpl.nasa.gov/pub/eph/planets/ascii/\n\nI laboriously assembled the data in these text files into native NumPy\narray files and wrapped them each in a Python package so that users\ncould install an ephemeris with a simple command::\n\n    pip install de421\n\nIf you want to use one of these pip-installable ephemerides, you will be\nusing a slightly older API, and will lose the benefit of the efficient\nmemory-mapping that the newer SPK code performs.  With the old API, here\nis how you would load DE421 and compute a position, given a barycentric\ndynamical time expressed as a Julian date::\n\n    import de421\n    from jplephem import Ephemeris\n\n    eph = Ephemeris(de421)\n    x, y, z = eph.position('mars', 2444391.5)  # 1980.06.01\n\nFor more information about the legacy API, consult the ``jplephem``\nentry on PyPI for the final release of the 1.x series:\n\nhttps://pypi.python.org/pypi/jplephem/1.2\n\nThe ephemerides that were made available as Python packages (the\nfollowing links explain the differences between them) are:\n\n* `DE405 <http://pypi.python.org/pypi/de405>`_ (May 1997)\n  \u2014 54\u00a0MB covering years 1600 through 2200\n* `DE406 <http://pypi.python.org/pypi/de406>`_ (May 1997)\n  \u2014 190\u00a0MB covering years -3000 through 3000\n* `DE421 <http://pypi.python.org/pypi/de421>`_ (February 2008)\n  \u2014 27\u00a0MB covering years 1900 through 2050\n* `DE422 <http://pypi.python.org/pypi/de422>`_ (September 2009)\n  \u2014 531\u00a0MB covering years -3000 through 3000\n* `DE423 <http://pypi.python.org/pypi/de423>`_ (February 2010)\n  \u2014 36\u00a0MB covering years 1800 through 2200\n\n\nReporting issues\n----------------\n\nYou can report any issues, bugs, or problems at the GitHub repository:\n\nhttps://github.com/brandon-rhodes/python-jplephem/\n\n\nChangelog\n---------\n\n**2020 September 2 \u2014 Version 2.15**\n\n* The ``excerpt`` subcommand now accepts a ``--targets`` option to save\n  space by copying only matching segments into the output SPK file.\n\n**2020 March 26 \u2014 Version 2.14**\n\n* Fall back to plain file I/O on platforms that support ``fileno()`` but\n  that don\u2019t support ``mmap()``, like the `Pyodide platform\n  <https://github.com/iodide-project/pyodide>`_.\n\n**2020 February 22 \u2014 Version 2.13**\n\n* The exception raised when a segment is given a Julian date outside the\n  segment\u2019s date range is now an instance of the ``ValueError`` subclass\n  ``OutOfRangeError`` that reminds the caller of the range of dates\n  supported by the SPK segment, and carries an array attribute\n  indicating which input dates were at fault.\n\n**2019 December 13 \u2014 Version 2.12**\n\n* Replaced use of NumPy ``flip()`` with a reverse slice ``[::-1]`` after\n  discovering the function was a recent addition that some user installs\n  of NumPy do not support.\n\n**2019 December 13 \u2014 Version 2.11**\n\n* Reverse the order in which Chebyshev polynomials are computed to\n  slightly increase speed, to simplify the code, and in one case\n  (comparing PCK output to NASA) to gain a partial digit of extra\n  precision.\n\n**2019 December 11 \u2014 Version 2.10**\n\n* Document and release support for ``.bcp`` binary PCK kernel files\n  through the new ``jplephem.pck`` module.\n\n**2019 January 3 \u2014 Version 2.9**\n\n* Added the ``load_array()`` method to the segment class.\n\n**2018 July 22 \u2014 Version 2.8**\n\n* Switched to a making a single memory map of the entire file, to avoid\n  running out of file descriptors when users load an ephemeris with\n  hundreds of segments.\n\n**2018 February 11 \u2014 Version 2.7**\n\n* Expanded the command line tool, most notably with the ability to fetch\n  over HTTP only those sections of a large ephemeris that cover a\n  specific range of dates, producing a smaller ``.bsp`` file.\n\n**2016 December 19 \u2014 Version 2.6**\n\n* Fixed the ability to invoke the module from the command line with\n  ``python -m jplephem``, and added a test to keep it fixed.\n\n**2015 November 9 \u2014 Version 2.5**\n\n* Move ``fileno()`` call out of the ``DAF`` constructor to support\n  fetching at least summary information from ``StringIO`` objects.\n\n**2015 November 1 \u2014 Version 2.4**\n\n* Add Windows compatibility by switching ``mmap()`` from using\n  ``PAGESIZE`` to ``ALLOCATIONGRANULARITY``.\n\n* Avoid a new NumPy deprecation warning by being careful to use only\n  integers in the NumPy ``shape`` tuple.\n\n* Add names \"TDB\" and \"TT\" to the names database for DE430.\n\n**2015 August 16 \u2014 Version 2.3**\n\n* Added auto-detection and support for old NAIF/DAF kernels like\n  ``de405.bsp`` to the main ``DAF`` class itself, instead of requiring\n  the awkward use of an entirely different alternative class.\n\n**2015 August 5 \u2014 Version 2.2**\n\n* You can now invoke ``jplephem`` from the command line.\n\n* Fixes an exception that was raised for SPK segments with a coefficient\n  count of only 2, like the DE421 and DE430 segments that provide the\n  offset of Mercury from the Mercury barycenter.\n\n* Supports old NAIF/DAF kernels like ``de405.bsp``.\n\n* The ``SPK()`` constructor is now simpler, taking a ``DAF`` object\n  instead of an open file.  This is considered an internal API change \u2014\n  the public API is the constructor ``SPK.open()``.\n\n**2015 February 24 \u2014 Version 2.1**\n\n* Switched from mapping an entire SPK file into memory at once to\n  memory-mapping each segment separately on demand.\n\n**2015 February 8 \u2014 Version 2.0**\n\n* Added support for SPICE SPK kernel files downloaded directly from\n  NASA, and designated old Python-packaged ephemerides as \u201clegacy.\u201d\n\n**2013 November 26 \u2014 Version 1.2**\n\n* Helge Eichhorn fixed the default for the ``position_and_velocity()``\n  argument ``tdb2`` so it defaults to zero days instead of 2.0 days.\n  Tests were added to prevent any future regression.\n\n**2013 July 10 \u2014 Version 1.1**\n\n* Deprecates the old ``compute()`` method in favor of separate\n  ``position()`` and ``position_and_velocity()`` methods.\n\n* Supports computing position and velocity in two separate phases by\n  saving a \u201cbundle\u201d of coefficients returned by ``compute_bundle()``.\n\n* From Marten van Kerkwijk: a second ``tdb2`` time argument, for users\n  who want to build higher precision dates out of two 64-bit floats.\n\n**2013 January 18 \u2014 Version 1.0**\n\n* Initial release\n\n\nReferences\n----------\n\nThe Jet Propulsion Laboratory's \u201cSolar System Dynamics\u201d page introduces\nthe various options for doing solar system position computations:\nhttp://ssd.jpl.nasa.gov/?ephemerides\n\nThe plain ASCII format element sets from which the ``jplephem`` Python\nephemeris packages are built, along with documentation, can be found at:\nftp://ssd.jpl.nasa.gov/pub/eph/planets/ascii/\n\nEquivalent FORTRAN code for using the ephemerides be found at the same\nFTP site: ftp://ssd.jpl.nasa.gov/pub/eph/planets/fortran/\n\n",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "2.15",
  "released_versions": [
    "0.1",
    "1.0",
    "1.1",
    "1.2",
    "2.0",
    "2.1",
    "2.10",
    "2.11",
    "2.12",
    "2.13",
    "2.14",
    "2.15",
    "2.2",
    "2.3",
    "2.4",
    "2.5",
    "2.6",
    "2.7",
    "2.8",
    "2.9"
  ]
}