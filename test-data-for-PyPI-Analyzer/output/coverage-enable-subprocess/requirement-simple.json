{
  "name": "coverage-enable-subprocess",
  "description": "This package installs a pth file that enables the coveragepy process_startup\nfeature in this python prefix/virtualenv in subsequent runs.\n\nSee: http://nedbatchelder.com/code/coverage/subprocess.html\n\n\nDemo::\n\n    $ virtualenv tmpenv\n    $ . tmpenv/bin/activate\n    $ pip install coverage-enable-subprocess\n    $ touch .coveragerc\n    $ export COVERAGE_PROCESS_START=$PWD/.coveragerc\n    $ echo 'print(\"oh, hi!\")' > ohhi.py\n    $ python ohhi.py\n    oh, hi!\n\n    $ coverage report\n    Name                              Stmts   Miss  Cover\n    -----------------------------------------------------\n    /etc/python2.6/sitecustomize.py       5      1    80%\n    ohhi.py                               1      0   100%\n    tmpenv/lib/python2.6/site.py        433    392     9%\n    -----------------------------------------------------\n    TOTAL                               439    393    10%\n\n\nFor projects that need to cd during their test runs, and run many processes in parallel,\nI ensure a ``$TOP`` variable is exported, and I use this .coveragerc::\n\n    [run]\n    parallel = True\n    branch = True\n    data_file = $TOP/.coverage\n\n    [report]\n    exclude_lines =\n        # Have to re-enable the standard pragma\n        \\#.*pragma:\\s*no.?cover\n\n        # we can't get coverage for functions that don't return:\n        \\#.*never returns\n        \\#.*doesn't return\n\n        # Don't complain if tests don't hit defensive assertion code:\n        ^\\s*raise Impossible\\b\n        ^\\s*raise AssertionError\\b\n        ^\\s*raise NotImplementedError\\b\n        ^\\s*return NotImplemented\\b\n\n        # Don't complain if tests don't hit re-raise of unexpected errors:\n        ^\\s*raise$\n\n        # if main is covered, we're good:\n        ^\\s*exit\\(main\\(\\)\\)$\n    show_missing = True\n\n    [html]\n    directory = $TOP/coverage-html\n\n    # vim:ft=dosini",
  "requires_dist": [
    "coverage"
  ],
  "requires_python": "",
  "current_version": "1.0",
  "released_versions": [
    "0",
    "1.0"
  ]
}