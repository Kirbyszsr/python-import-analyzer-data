{
  "name": "pytest-openfiles",
  "description": "================\npytest-openfiles\n================\n\nThis package provides a plugin for the `pytest`_ framework that allows\ndevelopers to detect whether any file handles or other file-like objects were\ninadvertently left open at the end of a unit test. It has been moved from the\ncore `astropy`_ project since it is of use more generally.\n\n.. _pytest: https://pytest.org/en/latest/\n.. _astropy: https://astropy.org/en/latest/\n\nMotivation\n----------\n\nThe `pytest-openfiles`_ plugin allows for the detection of open I/O resources\nat the end of unit tests.  This is particularly useful for testing code that\nmanipulates file handles or other I/O resources. It allows developers to ensure\nthat this kind of code properly cleans up I/O resources when they are no longer\nneeded.\n\nInstallation\n------------\n\nThe ``pytest-openfiles`` plugin can be installed using ``pip``::\n\n    $ pip install pytest-openfiles\n\nIt is also possible to install the latest development version from the source\nrepository::\n\n    $ git clone https://github.com/astropy/pytest-openfiles\n    $ cd pytest-openfiles\n    $ python ./setup.py install\n\nIn either case, the plugin will automatically be registered for use with\n``pytest``.\n\nUsage\n-----\n\nThis plugin adds the ``--open-files`` option to the ``pytest`` command.  When\nrunning tests with ``--open-files``, if a file is opened during the course of a\nunit test but that file is not closed before the test finishes, the test will\nfail.\n\nIn some cases certain files are expected to remain open between tests. In order\nto prevent these files from causing tests to fail, they can be ignored using\nthe configuration file variable ``open_files_ignore``. This variable is added\nto the ``[tool:pytest]`` section of a package's top-level ``setup.cfg`` file.\n\nFiles can be ignored using a fully specified filename::\n\n    [tool:pytest]\n    open_files_ignore = \"/home/user/monty/output.log\"\n\nIt is also possible to ignore files with a particular name regardless of where\nthey reside in the file system::\n\n    [tool:pytest]\n    open_files_ignore = \"output.log\"\n\nIn this example, all files named ``output.log`` will be ignored if they are\nfound to remain open after a test completes. Paths and filenames can include\n``*`` and ``?`` as wildcards::\n\n    [tool:pytest]\n    open_files_ignore = \"*.ttf\"\n\nIt is also possible to ignore open files for particular test cases by\ndecorating them with the ``openfiles_ignore`` decorator:\n\n.. code::\n\n    import pytest\n\n    @pytest.mark.openfiles_ignore\n    def test_open_file_and_ignore():\n        \"\"\"We want to ignore this test when checking for open file handles.\"\"\"\n\n\nThe test function will not be skipped, but any files that are left open by the\ntest will be ignored by this plugin.\n\n\nDevelopment Status\n------------------\n\n.. image:: https://travis-ci.org/astropy/pytest-openfile.svg\n    :target: https://travis-ci.org/astropy/pytest-openfiles\n    :alt: Travis CI Status\n\nQuestions, bug reports, and feature requests can be submitted on `github`_.\n\n.. _github: https://github.com/astropy/pytest-openfiles\n\nLicense\n-------\nThis plugin is licensed under a 3-clause BSD style license - see the\n``LICENSE.rst`` file.\n\n\n",
  "requires_dist": [
    "psutil",
    "pytest (>=4.6)"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.5.0",
  "released_versions": [
    "0.1.0",
    "0.2.0",
    "0.3.0",
    "0.3.1",
    "0.3.2",
    "0.4.0",
    "0.5.0"
  ]
}