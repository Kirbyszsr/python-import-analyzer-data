{
  "name": "pytest-console-scripts",
  "description": "pytest-console-scripts\n======================\n\nPytest-console-scripts is a [pytest][1] plugin for running python scripts from\nwithin tests. It's quite similar to `subprocess.run()`, but it also has an\nin-process mode, where the scripts are executed by the interpreter that's\nrunning `pytest` (using some amount of sandboxing).\n\nIn-process mode significantly reduces the run time of the test suites that\nrun many external scripts. This is speeds up development. In the CI environment\nsubprocess mode can be used to make sure the scripts also work (and behave the\nsame) when run by a fresh interpreter.\n\nRequirements\n------------\n\n- Python 3.5+, or PyPy3,\n- Pytest 4.0 or newer.\n\nInstallation\n------------\n\nYou can install \"pytest-console-scripts\" via [pip][2] from [PyPI][3]:\n\n    $ pip install pytest-console-scripts\n\nNormally you would add it as a test dependency in `tox.ini` (see [tox\ndocumentation][9]).\n\nUsage\n-----\n\nThis plugin will run scripts that are installed via `console_scripts` entry\npoint in `setup.py`, python files in current directory (or anywhere else, if\ngiven the path), and Python scripts anywhere else in the path. It will also run\nexecutables that are not Python scripts, but only in subprocess mode (there's\nno benefit in using `pytest-console-scripts` for this, you should just use\n`subprocess.run`).\n\nHere's an example with `console_scripts` entry point. Imagine we have a python\npackage `foo` with the following `setup.py`:\n\n    setup(\n        name='foo',\n        version='0.0.1',\n        py_modules=['foo'],\n        entry_points={\n            'console_scripts': ['foobar=foo:bar']\n        },\n    )\n\nWe could use pytest-console-scripts to test the `foobar` script:\n\n    def test_foo_bar(script_runner):\n        ret = script_runner.run('foobar', '--version')\n        assert ret.success\n        assert ret.stdout == '3.2.1\\n'\n        assert ret.stderr == ''\n\nThis would use the `script_runner` fixture provided by the plugin to\nrun the script and capture its output.\n\nThe arguments of `script_runner.run` are the command name of the script and\nany command line arguments that should be passed to it. Additionally the\nfollowing keyword arguments can be used:\n\n- `cwd` - set the working directory of the script under test.\n- `env` - a dictionary with environment variables to use instead of the current\n  environment.\n- `stdin` - a file-like object that will be piped to standard input of the\n  script.\n\nConfiguring script execution mode\n---------------------------------\n\nIn the example above the `foobar` script would run in in-process mode (which is\nthe default). This is fast and good for quick iteration during development.\nAfter we're happy with the functionality, it's time to run the script in\nsubprocess mode to simulate real invocation more closely. There are several\nways to do this. We can configure it via pytest configuration (for example in\n`tox.ini`):\n\n     [pytest]\n     script_launch_mode = subprocess\n\nWe can give a command line option to pytest (this will override the\nconfiguration file):\n\n    $ pytest --script-launch-mode=subprocess test_foobar.py\n\nWe can also mark individual tests to run in a specific mode:\n\n    @pytest.mark.script_launch_mode('subprocess')\n    def test_foobar(script_runner):\n        ...\n\nBetween these three methods the marking of the tests has priority before the\ncommand line option that in turn overrides the configuration setting. All three\ncan take three possible values: \"inprocess\", \"subprocess\", and \"both\" (which\nwill cause the test to be run twice: in in-process and in subprocess modes).\n\nInteraction with mocking\n------------------------\n\nIt is possible to mock objects and functions inside of console scripts when\nthey are run using `pytest-console-scripts` but only in inprocess mode. When\nthe script is run in subprocess mode, it is executed by a separate Python\ninterpreter and the test can't mock anything inside of it.\n\nAnother limitation of mocking is that with simple Python scripts that are not\ninstalled via [`console_scripts` entry point][14] mocking of objects inside of\nthe main script will not work. The reason for that is that when we run\n`myscript.py` with `$ python myscript.py` the script gets imported into\n`__main__` namespace instead of `myscript` namespace. Our patching of\n`myscript.myfunction` will have no effect on what the code in `__main__`\nnamespace sees when it's calling `myfunction` defined in the same file.\n\nSee [this stackoverflow answer](https://stackoverflow.com/a/66693954/1595738)\nfor some ideas of how to get around this.\n\nSuppressing the printing of script run results\n----------------------------------------------\n\nWhen tests involving `pytest-console-scripts` fail, it tends to be quite\nuseful to see the output of the scripts that were executed in them. We try\nto be helpful and print it out just before returning the result from\n`script_runner.run()`. Normally PyTest [captures][12] all the output during a\ntest run and it's not shown to the user unless some tests fail. This is exactly\nwhat we want.\n\nHowever, in some cases it might be useful to disable the output capturing and\nPyTest provides [ways to do it][13]. When capturing is disabled, all test run\nresults will be printed out and this might make it harder to inspect the other\noutput of the tests. To deal with this, `pytest-console-scripts` has an option\nto disable the printing of script run results:\n\n    $ pytest --hide-run-results test_foobar.py\n\nIt's also possible to disable it just for one script run:\n\n    ret = script_runner.run('foobar', print_result=False)\n\nWhen printing of script run results is disabled, script output won't be\nvisisble even when the test fails. Unfortunately there's no easy way to print\nit only if the test fails because by the time a script run completes we don't\nyet know whether the test will fail or not. In any case, with this option and\ncapturing control we can configure what output gets displayed so it should be\npossible to get to the bottom of things.\n\nPackage installation and testing during development\n---------------------------------------------------\n\nSince `pytest-console-scripts` relies on the scripts being located in the path,\nit can only run the console scripts from packages that have been installed (if\nyou are interested in working on removing this limitation, take a look at [this\nticket](https://github.com/kvas-it/pytest-console-scripts/issues/34) and in\nparticular [this comment](https://github.com/kvas-it/pytest-console-scripts/issues/34#issuecomment-649497564)).\nIf you want to run the tests quickly during development, the additional\ninstallation step would add a significant overhead and slow you down.\n\nThere's a way around this: install your package in [development mode][10] using\n`python setup.py develop`. If you use [tox][9], you can take one of its\nexisting virtualenvs (they live in `.tox/`). Otherwise create a\n[virtualenv][11] just for development, activate it and run `python setup.py\ndevelop` to install your package in development mode. You will need to\nre-install every time you add a new console script, but otherwise all the\nchanges to your code will be immediately picked up by the tests.\n\nContributing\n------------\n\nContributions are very welcome. Tests can be run with `tox`, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nLicense\n-------\n\nDistributed under the terms of the [MIT][8] license, \"pytest-console-scripts\"\nis free and open source software.\n\nIssues\n------\n\nIf you encounter any problems, please [file an issue][7] along with a detailed\ndescription.\n\n----\n\nPytest-console-scripts was initially generated with [Cookiecutter][4] along\nwith [@hackebrot][5]'s [Cookiecutter-pytest-plugin][6] template.\n\n[1]: https://github.com/pytest-dev/pytest\n[2]: https://pypi.python.org/pypi/pip/\n[3]: https://pypi.python.org/pypi\n[4]: https://github.com/audreyr/cookiecutter\n[5]: https://github.com/hackebrot\n[6]: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n[7]: https://github.com/kvas-it/pytest-console-scripts/issues\n[8]: http://opensource.org/licenses/MIT\n[9]: https://tox.readthedocs.org/en/latest/\n[10]: https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode\n[11]: https://docs.python.org/3/library/venv.html\n[12]: https://docs.pytest.org/en/stable/capture.html\n[13]: https://docs.pytest.org/en/stable/capture.html#setting-capturing-methods-or-disabling-capturing\n[14]: https://python-packaging.readthedocs.io/en/latest/command-line-scripts.html#the-console-scripts-entry-point",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "1.2.0",
  "released_versions": [
    "0.1.0",
    "0.1.1",
    "0.1.10",
    "0.1.2",
    "0.1.3",
    "0.1.4",
    "0.1.5",
    "0.1.6",
    "0.1.7",
    "0.1.8",
    "0.1.9",
    "0.2.0",
    "1.0.0",
    "1.1.0",
    "1.2.0"
  ]
}