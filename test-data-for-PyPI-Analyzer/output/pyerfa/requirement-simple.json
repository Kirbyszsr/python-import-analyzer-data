{
  "name": "pyerfa",
  "description": "======\nPyERFA\n======\n\n|PyPI Status| |Zenodo| |Travis Status| |Documentation Status|\n\nPyERFA is the Python_ wrapper for the ERFA_ library (Essential Routines for\nFundamental Astronomy), a C library containing key algorithms for astronomy,\nwhich is based on the SOFA library published by the International Astronomical\nUnion (IAU).  All C routines are wrapped as Numpy_ `universal functions\n<https://numpy.org/devdocs/reference/ufuncs.html>`_, so that they can be\ncalled with scalar or array inputs.\n\nThe project is a split of ``astropy._erfa`` module, developed in the\ncontext of Astropy_ project, into a standalone package.  It contains\nthe ERFA_ C source code as a git submodule.  The wrapping is done\nwith help of the Jinja2_ template engine.\n\nIf you use this package in your research, please cita it via DOI\n`10.5281/zenodo.3940699 <https://doi.org/10.5281/zenodo.3940699>`_.\n\n.. Installation\n\nInstallation instructions\n-------------------------\n\nThe package can be installed from the package directory using a simple::\n\n  $ pip install .\n\nand similarly a wheel_ can be created with::\n\n  $ pip wheel .\n\n.. note:: If you already have the C library ``liberfa`` on your\n  system, you can use that by setting environment variable\n  ``PYERFA_USE_SYSTEM_LIBERFA=1``.\n\n\n.. _wheel: https://github.com/pypa/wheel\n\n\nTesting\n-------\n\nFor testing, one can install the packages together with its testing\ndependencies and then test it with::\n\n  $ pip install .[test]\n  $ pytest\n\nAlternatively, one can use ``tox``, which will set up a separate testing\nenvironment for you, with::\n\n  $ tox -e test\n\n\nUsage\n-----\n\nThe package can be imported as ``erfa`` which has all ERFA_ ufuncs wrapped with\npython code that tallies errors and warnings.  Also exposed are the constants\ndefined by ERFA_ in `erfam.h\n<https://github.com/liberfa/erfa/blob/master/src/erfam.h>`_, as well\nas `numpy.dtype` corresponding to structures used by ERFA_.  Examples::\n\n  >>> import erfa\n  >>> erfa.jd2cal(2460000., [0, 1, 2, 3])\n  (array([2023, 2023, 2023, 2023], dtype=int32),\n   array([2, 2, 2, 2], dtype=int32),\n   array([24, 25, 26, 27], dtype=int32),\n   array([0.5, 0.5, 0.5, 0.5]))\n  >>> erfa.plan94(2460000., [0, 1, 2, 3], 1)\n  array([([ 0.09083713, -0.39041392, -0.21797389], [0.02192341, 0.00705449, 0.00149618]),\n         ([ 0.11260694, -0.38275202, -0.21613731], [0.02160375, 0.00826891, 0.00217806]),\n         ([ 0.13401992, -0.37387798, -0.21361622], [0.0212094 , 0.00947838, 0.00286503]),\n         ([ 0.15500031, -0.36379788, -0.21040601], [0.02073822, 0.01068061, 0.0035561 ])],\n        dtype={'names':['p','v'], 'formats':[('<f8', (3,)),('<f8', (3,))], 'offsets':[0,24], 'itemsize':48, 'aligned':True})\n  >>> erfa.dt_pv\n  dtype([('p', '<f8', (3,)), ('v', '<f8', (3,))], align=True)\n  >>> erfa.dt_eraLDBODY\n  dtype([('bm', '<f8'), ('dl', '<f8'), ('pv', '<f8', (2, 3))], align=True)\n  >>> erfa.DAYSEC\n  86400.0\n\nIt is also possible to use the ufuncs directly, though then one has to\ndeal with the warning and error states explicitly.  For instance, compare::\n\n  >>> erfa.jd2cal(-600000., [0, 1, 2, 3])\n  Traceback (most recent call last):\n  ...\n  ErfaError: ERFA function \"jd2cal\" yielded 4 of \"unacceptable date (Note 1)\"\n  >>> erfa.ufunc.jd2cal(-600000., [0, 1, 2, 3])\n  (array([-1, -1, -1, -1], dtype=int32),\n   ...,\n   array([-1, -1, -1, -1], dtype=int32))\n\n\nLicense\n-------\n\nPyERFA is licensed under a 3-clause BSD style license - see the\n`LICENSE.rst <LICENSE.rst>`_ file.\n\n\n.. References\n.. _Python: https://www.python.org/\n.. _ERFA: https://github.com/liberfa/erfa\n.. _Numpy: https://numpy.org/\n.. _Astropy: https://www.astropy.org\n.. _Jinja2: https://palletsprojects.com/p/jinja/\n.. |PyPI Status| image:: https://img.shields.io/pypi/v/pyerfa.svg\n    :target: https://pypi.python.org/pypi/pyerfa\n    :alt: PyPI Status\n.. |Zenodo| image:: https://zenodo.org/badge/261332899.svg\n   :target: https://zenodo.org/badge/latestdoi/261332899\n   :alt: DOI 10.5281/zenodo.3940699\n.. |Travis Status| image:: https://img.shields.io/travis/liberfa/pyerfa/master?logo=travis%20ci&logoColor=white&label=Travis%20CI\n    :target: https://travis-ci.org/liberfa/pyerfa\n    :alt: Travis CI Status\n.. |Documentation Status| image:: https://img.shields.io/readthedocs/pyerfa/latest.svg?logo=read%20the%20docs&logoColor=white&label=Docs&version=stable\n    :target: http://pyerfa.readthedocs.org/en/stable/?badge=stable\n    :alt: Documentation Status\n\n\n",
  "requires_dist": [
    "numpy (>=1.16)",
    "sphinx-astropy (>=1.3) ; extra == 'docs'",
    "pytest ; extra == 'test'",
    "pytest-doctestplus (>=0.7) ; extra == 'test'"
  ],
  "requires_python": ">=3.6",
  "current_version": "1.7.3",
  "released_versions": [
    "1.7.0",
    "1.7.1",
    "1.7.1.1",
    "1.7.2",
    "1.7.3"
  ]
}