{
  "name": "keyring",
  "description": ".. image:: https://img.shields.io/pypi/v/keyring.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/keyring.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/keyring\n\n.. image:: https://github.com/jaraco/keyring/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/keyring/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/keyring/badge/?version=latest\n   :target: https://keyring.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://tidelift.com/badges/package/pypi/keyring\n   :target: https://tidelift.com/subscription/pkg/pypi-keyring?utm_source=pypi-keyring&utm_medium=readme\n\n.. image:: https://badges.gitter.im/jaraco/keyring.svg\n   :alt: Join the chat at https://gitter.im/jaraco/keyring\n   :target: https://gitter.im/jaraco/keyring?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\nThe Python keyring library provides an easy way to access the\nsystem keyring service from python. It can be used in any\napplication that needs safe password storage.\n\nThese recommended keyring backends are supported:\n\n* macOS `Keychain\n  <https://en.wikipedia.org/wiki/Keychain_%28software%29>`_\n* Freedesktop `Secret Service\n  <http://standards.freedesktop.org/secret-service/>`_ supports many DE including\n  GNOME (requires `secretstorage <https://pypi.python.org/pypi/secretstorage>`_)\n* KDE4 & KDE5 `KWallet <https://en.wikipedia.org/wiki/KWallet>`_\n  (requires `dbus <https://pypi.python.org/pypi/dbus-python>`_)\n* `Windows Credential Locker\n  <https://docs.microsoft.com/en-us/windows/uwp/security/credential-locker>`_\n\nOther keyring implementations are available through `Third-Party Backends`_.\n\nInstallation - Linux\n====================\n\nOn Linux, the KWallet backend relies on dbus-python_, which does not always\ninstall correctly when using pip (compilation is needed). For best results,\ninstall dbus-python as a system package.\n\n.. _dbus-python: https://gitlab.freedesktop.org/dbus/dbus-python\n\nUsing Keyring\n=============\n\nThe basic usage of keyring is pretty simple: just call\n``keyring.set_password`` and ``keyring.get_password``::\n\n    >>> import keyring\n    >>> keyring.set_password(\"system\", \"username\", \"password\")\n    >>> keyring.get_password(\"system\", \"username\")\n    'password'\n\nCommand-line Utility\n--------------------\n\nKeyring supplies a ``keyring`` command which is installed with the\npackage. After installing keyring in most environments, the\ncommand should be available for setting, getting, and deleting\npasswords. For more information on usage, invoke with no arguments\nor with ``--help`` as so::\n\n    $ keyring --help\n    $ keyring set system username\n    Password for 'username' in 'system':\n    $ keyring get system username\n    password\n\nThe command-line functionality is also exposed as an executable\npackage, suitable for invoking from Python like so::\n\n    $ python -m keyring --help\n    $ python -m keyring set system username\n    Password for 'username' in 'system':\n    $ python -m keyring get system username\n    password\n\nConfiguring\n===========\n\nThe python keyring lib contains implementations for several backends. The\nlibrary will attempt to\nautomatically choose the most suitable backend for the current\nenvironment. Users may also specify the preferred keyring in a\nconfig file or by calling the ``set_keyring()`` function.\n\nConfig file path\n----------------\n\nThe configuration is stored in a file named \"keyringrc.cfg\"\nfound in a platform-specific location. To determine\nwhere the config file is stored, run the following::\n\n    python -c \"import keyring.util.platform_; print(keyring.util.platform_.config_root())\"\n\nSome keyrings also store the keyring data in the file system.\nTo determine where the data files are stored, run::\n\n    python -c \"import keyring.util.platform_; print(keyring.util.platform_.data_root())\"\n\nConfig file content\n-------------------\n\nTo specify a keyring backend, set the **default-keyring** option to the\nfull path of the class for that backend, such as\n``keyring.backends.OS_X.Keyring``.\n\nIf **keyring-path** is indicated, keyring will add that path to the Python\nmodule search path before loading the backend.\n\nFor example, this config might be used to load the\n``SimpleKeyring`` from the ``simplekeyring`` module in\nthe ``./demo`` directory (not implemented)::\n\n    [backend]\n    default-keyring=simplekeyring.SimpleKeyring\n    keyring-path=demo\n\nThird-Party Backends\n====================\n\nIn addition to the backends provided by the core keyring package for\nthe most common and secure use cases, there\nare additional keyring backend implementations available for other\nuse-cases. Simply install them to make them available:\n\n- `keyrings.cryptfile <https://pypi.org/project/keyrings.cryptfile>`_\n  - Encrypted text file storage.\n- `keyring_jeepney <https://pypi.org/project/keyring_jeepney>`__ - a\n  pure Python backend using the secret service DBus API for desktop\n  Linux.\n- `keyrings.alt <https://pypi.org/project/keyrings.alt>`_ - \"alternate\",\n  possibly-insecure backends, originally part of the core package, but\n  available for opt-in.\n- `gsheet-keyring <https://pypi.org/project/gsheet-keyring>`_\n  - a backend that stores secrets in a Google Sheet. For use with\n  `ipython-secrets <https://pypi.org/project/ipython-secrets>`_.\n- `bitwarden-keyring <https://pypi.org/project/bitwarden-keyring/0.1.0/>`_\n  - a backend that stores secrets in the `BitWarden <https://bitwarden.com/>`_\n  password manager.\n- `sagecipher <https://pypi.org/project/sagecipher>`_ - an encryption\n  backend which uses the ssh agent protocol's signature operation to\n  derive the cipher key.\n- `keyrings.osx_keychain_keys <https://pypi.org/project/keyrings.osx-keychain-keys>`_\n  - OSX keychain key-management, for private, public and symmetric keys.\n\n\nWrite your own keyring backend\n==============================\n\nThe interface for the backend is defined by ``keyring.backend.KeyringBackend``.\nEvery backend should derive from that base class and define a ``priority``\nattribute and three functions: ``get_password()``, ``set_password()``, and\n``delete_password()``. The ``get_credential()`` function may be defined if\ndesired.\n\nSee the ``backend`` module for more detail on the interface of this class.\n\nKeyring employs entry points to allow any third-party package to implement\nbackends without any modification to the keyring itself. Those interested in\ncreating new backends are encouraged to create new, third-party packages\nin the ``keyrings`` namespace, in a manner modeled by the `keyrings.alt\npackage <https://github.com/jaraco/keyrings.alt>`_. See the\n``setup.cfg`` file\nin that project for a hints on how to create the requisite entry points.\nBackends that prove essential may be considered for inclusion in the core\nlibrary, although the ease of installing these third-party packages should\nmean that extensions may be readily available.\n\nTo create an extension for Keyring, please submit a pull request to\nhave your extension mentioned as an available extension.\n\nRuntime Configuration\n=====================\n\nKeyring additionally allows programmatic configuration of the\nbackend calling the api ``set_keyring()``. The indicated backend\nwill subsequently be used to store and retrieve passwords.\n\nTo invoke ``set_keyring``::\n\n    # define a new keyring class which extends the KeyringBackend\n    import keyring.backend\n\n    class TestKeyring(keyring.backend.KeyringBackend):\n        \"\"\"A test keyring which always outputs same password\n        \"\"\"\n        priority = 1\n\n        def set_password(self, servicename, username, password):\n            pass\n\n        def get_password(self, servicename, username):\n            return \"password from TestKeyring\"\n\n        def delete_password(self, servicename, username, password):\n            pass\n\n    # set the keyring for keyring lib\n    keyring.set_keyring(TestKeyring())\n\n    # invoke the keyring lib\n    try:\n        keyring.set_password(\"demo-service\", \"tarek\", \"passexample\")\n        print(\"password stored successfully\")\n    except keyring.errors.PasswordSetError:\n        print(\"failed to store password\")\n    print(\"password\", keyring.get_password(\"demo-service\", \"tarek\"))\n\n\nDisabling Keyring\n=================\n\nIn many cases, uninstalling keyring will never be necessary.\nEspecially on Windows and macOS, the behavior of keyring is\nusually degenerate, meaning it will return empty values to\nthe caller, allowing the caller to fall back to some other\nbehavior.\n\nIn some cases, the default behavior of keyring is undesirable and\nit would be preferable to disable the keyring behavior altogether.\nThere are several mechanisms to disable keyring:\n\n- Uninstall keyring. Most applications are tolerant to keyring\n  not being installed. Uninstalling keyring should cause those\n  applications to fall back to the behavior without keyring.\n  This approach affects that Python environment where keyring\n  would otherwise have been installed.\n\n- Configure the Null keyring in the environment. Set\n  ``PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring``\n  in the environment, and the ``Null`` (degenerate) backend\n  will be used. This approach affects all uses of Keyring where\n  that variable is set.\n\n- Permanently configure the Null keyring for the user by running\n  ``keyring --disable`` or ``python -m keyring --disable``.\n  This approach affects all uses of keyring for that user.\n\n\nAltering Keyring Behavior\n=========================\n\nKeyring provides a mechanism to alter the keyring's behavior through\nenvironment variables. Each backend implements a\n``KeyringBackend.set_properties_from_env``, which\nwhen invoked will find all environment variables beginning with\n``KEYRING_PROPERTY_{NAME}`` and will set a property for each\n``{NAME.lower()}`` on the keyring. This method is invoked during\ninitialization for the default/configured keyring.\n\nThis mechanism may be used to set some useful values on various\nkeyrings, including:\n\n- keychain; macOS, path to an alternate keychain file\n- appid; Linux/SecretService, alternate ID for the application\n\n\nUsing Keyring on Ubuntu 16.04\n=============================\n\nThe following is a complete transcript for installing keyring in a\nvirtual environment on Ubuntu 16.04.  No config file was used::\n\n  $ sudo apt install python3-venv libdbus-glib-1-dev\n  $ cd /tmp\n  $ pyvenv py3\n  $ source py3/bin/activate\n  $ pip install -U pip\n  $ pip install secretstorage dbus-python\n  $ pip install keyring\n  $ python\n  >>> import keyring\n  >>> keyring.get_keyring()\n  <keyring.backends.SecretService.Keyring object at 0x7f9b9c971ba8>\n  >>> keyring.set_password(\"system\", \"username\", \"password\")\n  >>> keyring.get_password(\"system\", \"username\")\n  'password'\n\n\nUsing Keyring on headless Linux systems\n=======================================\n\nIt is possible to use the SecretService backend on Linux systems without\nX11 server available (only D-Bus is required). In this case:\n\n* Install the `GNOME Keyring`_ daemon.\n* Start a D-Bus session, e.g. run ``dbus-run-session -- sh`` and run\n  the following commands inside that shell.\n* Run ``gnome-keyring-daemon`` with ``--unlock`` option. The description of\n  that option says:\n\n      Read a password from stdin, and use it to unlock the login keyring\n      or create it if the login keyring does not exist.\n\n  When that command is started, enter a password into stdin and\n  press Ctrl+D (end of data). After that, the daemon will fork into\n  background (use ``--foreground`` option to block).\n* Now you can use the SecretService backend of Keyring. Remember to\n  run your application in the same D-Bus session as the daemon.\n\n.. _GNOME Keyring: https://wiki.gnome.org/Projects/GnomeKeyring\n\nUsing Keyring on headless Linux systems in a Docker container\n=============================================================\n\nIt is possible to use keyring with the SecretService backend in Docker containers as well.\nAll you need to do is install the necessary dependencies and add the `--privileged` flag\nto avoid any `Operation not permitted` errors when attempting to unlock the system's keyring.\n\nThe following is a complete transcript for installing keyring on a Ubuntu 18:04 container::\n\n  docker run -it -d --privileged ubuntu:18.04\n\n  $ apt-get update\n  $ apt install -y gnome-keyring python3-venv python3-dev\n  $ python3 -m venv venv\n  $ source venv/bin/activate # source a virtual environment to avoid polluting your system\n  $ pip3 install --upgrade pip\n  $ pip3 install keyring\n  $ dbus-run-session -- sh # this will drop you into a new D-bus shell\n  $ echo 'somecredstorepass' | gnome-keyring-daemon --unlock # unlock the system's keyring\n\n  $ python\n  >>> import keyring\n  >>> keyring.get_keyring()\n  <keyring.backends.SecretService.Keyring object at 0x7f9b9c971ba8>\n  >>> keyring.set_password(\"system\", \"username\", \"password\")\n  >>> keyring.get_password(\"system\", \"username\")\n  'password'\n\nIntegration\n===========\n\nAPI\n---\n\nThe keyring lib has a few functions:\n\n* ``get_keyring()``: Return the currently-loaded keyring implementation.\n* ``get_password(service, username)``: Returns the password stored in the\n  active keyring. If the password does not exist, it will return None.\n* ``get_credential(service, username)``: Return a credential object stored\n  in the active keyring. This object contains at least ``username`` and\n  ``password`` attributes for the specified service, where the returned\n  ``username`` may be different from the argument.\n* ``set_password(service, username, password)``: Store the password in the\n  keyring.\n* ``delete_password(service, username)``: Delete the password stored in\n  keyring. If the password does not exist, it will raise an exception.\n\nIn all cases, the parameters (``service``, ``username``, ``password``)\nshould be Unicode text.\n\n\nExceptions\n----------\n\nThe keyring lib raises following exceptions:\n\n* ``keyring.errors.KeyringError``: Base Error class for all exceptions in keyring lib.\n* ``keyring.errors.InitError``: Raised when the keyring cannot be initialized.\n* ``keyring.errors.PasswordSetError``: Raised when password cannot be set in the keyring.\n* ``keyring.errors.PasswordDeleteError``: Raised when the password cannot be deleted in the keyring.\n\nGet Involved\n============\n\nPython keyring lib is an open community project and eagerly\nwelcomes contributors.\n\n* Repository: https://github.com/jaraco/keyring/\n* Bug Tracker: https://github.com/jaraco/keyring/issues/\n* Mailing list: http://groups.google.com/group/python-keyring\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-PROJECT?utm_source=pypi-PROJECT&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\nSecurity Considerations\n=======================\n\nEach builtin backend may have security considerations to understand\nbefore using this library. Authors of tools or libraries utilizing\n``keyring`` are encouraged to consider these concerns.\n\nAs with any list of known security concerns, this list is not exhaustive.\nAdditional issues can be added as needed.\n\n- macOS Keychain\n    - Any Python script or application can access secrets created by\n      ``keyring`` from that same Python executable without the operating\n      system prompting the user for a password. To cause any specific\n      secret to prompt for a password every time it is accessed, locate\n      the credential using the ``Keychain Access`` application, and in\n      the ``Access Control`` settings, remove ``Python`` from the list\n      of allowed applications.\n\n- Freedesktop Secret Service\n    - No analysis has been performed\n\n- KDE4 & KDE5 KWallet\n    - No analysis has been performed\n\n- Windows Credential Locker\n    - No analysis has been performed\n\nMaking Releases\n===============\n\nThis project makes use of automated releases continuous\nintegration. The\nsimple workflow is to tag a commit and push it to Github. If it\npasses tests in CI, it will be automatically deployed to PyPI.\n\nOther things to consider when making a release:\n\n- Check that the changelog is current for the intended release.\n\nRunning Tests\n=============\n\nTests are continuously run in Github Actions.\n\nTo run the tests locally, install and invoke\n`tox <https://pypi.org/project/tox>`_.\n\nBackground\n==========\n\nThe project was based on Tarek Ziade's idea in `this post`_. Kang Zhang\ninitially carried it out as a `Google Summer of Code`_ project, and Tarek\nmentored Kang on this project.\n\n.. _this post: http://tarekziade.wordpress.com/2009/03/27/pycon-hallway-session-1-a-keyring-library-for-python/\n.. _Google Summer of Code: http://socghop.appspot.com/\n\n\n",
  "requires_dist": [
    "importlib-metadata (>=3.6)",
    "SecretStorage (>=3.2) ; sys_platform == \"linux\"",
    "jeepney (>=0.4.2) ; sys_platform == \"linux\"",
    "pywin32-ctypes (!=0.1.0,!=0.1.1) ; sys_platform == \"win32\"",
    "sphinx ; extra == 'docs'",
    "jaraco.packaging (>=8.2) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "pytest (>=4.6) ; extra == 'testing'",
    "pytest-checkdocs (>=2.4) ; extra == 'testing'",
    "pytest-flake8 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler (>=1.0.1) ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\" and python_version < \"3.10\") and extra == 'testing'",
    "pytest-mypy ; (platform_python_implementation != \"PyPy\" and python_version < \"3.10\") and extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "current_version": "23.0.1",
  "released_versions": [
    "0.1",
    "0.10",
    "0.10.1",
    "0.2",
    "0.3",
    "0.4",
    "0.5",
    "0.5.1",
    "0.6.2",
    "0.7",
    "0.7.1",
    "0.8",
    "0.8.1",
    "0.9",
    "0.9.1",
    "0.9.2",
    "0.9.3",
    "1.0",
    "1.1",
    "1.1.1",
    "1.1.2",
    "1.2",
    "1.2.1",
    "1.2.2",
    "1.2.3",
    "1.2dev",
    "1.3",
    "1.4",
    "1.5",
    "1.6",
    "1.6.1",
    "10.0",
    "10.0.1",
    "10.0.2",
    "10.1",
    "10.2",
    "10.3",
    "10.3.1",
    "10.3.2",
    "10.3.3",
    "10.4.0",
    "10.5.0",
    "10.5.1",
    "10.6.0",
    "11.0.0",
    "11.1.0",
    "12.0.0",
    "12.0.1",
    "12.0.2",
    "12.1.0",
    "12.2.0",
    "12.2.1",
    "13.0.0",
    "13.1.0",
    "13.2.0",
    "13.2.1",
    "15.0.0",
    "15.1.0",
    "15.2.0",
    "16.0.0",
    "16.0.1",
    "16.0.2",
    "16.1.0",
    "16.1.1",
    "17.0.0",
    "17.1.0",
    "17.1.1",
    "18.0.0",
    "18.0.1",
    "19.0.0",
    "19.0.1",
    "19.0.2",
    "19.1.0",
    "19.2.0",
    "19.3.0",
    "2.0",
    "2.0.1",
    "2.0.2",
    "2.0.3",
    "2.1",
    "2.1.1",
    "20.0.0",
    "20.0.1",
    "21.0.0",
    "21.1.0",
    "21.1.1",
    "21.2.0",
    "21.2.1",
    "21.3.0",
    "21.3.1",
    "21.4.0",
    "21.5.0",
    "21.6.0",
    "21.7.0",
    "21.8.0",
    "22.0.0",
    "22.0.1",
    "22.1.0",
    "22.2.0",
    "22.3.0",
    "22.4.0",
    "23.0.0",
    "23.0.1",
    "3.0",
    "3.0.1",
    "3.0.2",
    "3.0.3",
    "3.0.4",
    "3.0.5",
    "3.1",
    "3.2",
    "3.2.1",
    "3.3",
    "3.4",
    "3.5",
    "3.6",
    "3.7",
    "3.8",
    "4.0",
    "4.1",
    "4.1.1",
    "5.0",
    "5.1",
    "5.2",
    "5.2.1",
    "5.3",
    "5.4",
    "5.5",
    "5.5.1",
    "5.6",
    "5.7",
    "5.7.1",
    "6.0",
    "6.1",
    "6.1.1",
    "7.0",
    "7.0.1",
    "7.0.2",
    "7.1",
    "7.1.1",
    "7.1.2",
    "7.2",
    "7.3",
    "7.3.1",
    "8.0",
    "8.0.1",
    "8.1",
    "8.1.1",
    "8.2",
    "8.3",
    "8.4",
    "8.4.1",
    "8.5",
    "8.5.1",
    "8.6",
    "8.6.1",
    "8.7",
    "9.0",
    "9.1",
    "9.2",
    "9.2.1",
    "9.3",
    "9.3.1"
  ]
}