{
  "name": "path",
  "description": ".. image:: https://img.shields.io/pypi/v/path.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/path.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/path\n\n.. image:: https://github.com/jaraco/path/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/path/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/path/badge/?version=latest\n   :target: https://path.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://tidelift.com/badges/package/pypi/path\n   :target: https://tidelift.com/subscription/pkg/pypi-path?utm_source=pypi-path&utm_medium=readme\n\n\n``path`` (aka path pie, formerly ``path.py``) implements path\nobjects as first-class entities, allowing common operations on\nfiles to be invoked on those path objects directly. For example:\n\n.. code-block:: python\n\n    from path import Path\n\n    d = Path(\"/home/guido/bin\")\n    for f in d.files(\"*.py\"):\n        f.chmod(0o755)\n\n    # Globbing\n    for f in d.files(\"*.py\"):\n        f.chmod(\"u+rwx\")\n\n    # Changing the working directory:\n    with Path(\"somewhere\"):\n        # cwd in now `somewhere`\n        ...\n\n    # Concatenate paths with /\n    foo_txt = Path(\"bar\") / \"foo.txt\"\n\nPath pie is `hosted at Github <https://github.com/jaraco/path>`_.\n\nFind `the documentation here <https://path.readthedocs.io>`_.\n\nGuides and Testimonials\n=======================\n\nYasoob wrote the Python 101 `Writing a Cleanup Script\n<http://freepythontips.wordpress.com/2014/01/23/python-101-writing-a-cleanup-script/>`_\nbased on ``path``.\n\nAdvantages\n==========\n\nPython 3.4 introduced\n`pathlib <https://docs.python.org/3/library/pathlib.html>`_,\nwhich shares many characteristics with ``path``. In particular,\nit provides an object encapsulation for representing filesystem paths.\nOne may have imagined ``pathlib`` would supersede ``path``.\n\nBut the implementation and the usage quickly diverge, and ``path``\nhas several advantages over ``pathlib``:\n\n- ``path`` implements ``Path`` objects as a subclass of\n  ``str``, and as a result these ``Path``\n  objects may be passed directly to other APIs that expect simple\n  text representations of paths, whereas with ``pathlib``, one\n  must first cast values to strings before passing them to\n  APIs unaware of ``pathlib``. This shortcoming was `addressed\n  by PEP 519 <https://www.python.org/dev/peps/pep-0519/>`_,\n  in Python 3.6.\n- ``path`` goes beyond exposing basic functionality of a path\n  and exposes commonly-used behaviors on a path, providing\n  methods like ``rmtree`` (from shlib) and ``remove_p`` (remove\n  a file if it exists).\n- As a PyPI-hosted package, ``path`` is free to iterate\n  faster than a stdlib package. Contributions are welcome\n  and encouraged.\n- ``path`` provides a uniform abstraction over its Path object,\n  freeing the implementer to subclass it readily. One cannot\n  subclass a ``pathlib.Path`` to add functionality, but must\n  subclass ``Path``, ``PosixPath``, and ``WindowsPath``, even\n  if one only wishes to add a ``__dict__`` to the subclass\n  instances.  ``path`` instead allows the ``Path.module``\n  object to be overridden by subclasses, defaulting to the\n  ``os.path``. Even advanced uses of ``path.Path`` that\n  subclass the model do not need to be concerned with\n  OS-specific nuances.\n\nAlternatives\n============\n\nIn addition to\n`pathlib <https://docs.python.org/3/library/pathlib.html>`_, the\n`pylib project <https://pypi.org/project/py/>`_ implements a\n`LocalPath <https://github.com/pytest-dev/py/blob/72601dc8bbb5e11298bf9775bb23b0a395deb09b/py/_path/local.py#L106>`_\nclass, which shares some behaviors and interfaces with ``path``.\n\nDevelopment\n===========\n\nTo install a development version, use the Github links to clone or\ndownload a snapshot of the latest code. Alternatively, if you have git\ninstalled, you may be able to use ``pip`` to install directly from\nthe repository::\n\n    pip install git+https://github.com/jaraco/path.git\n\nTesting\n=======\n\nTests are invoked with `tox <https://pypi.org/project/tox>`_. After\nhaving installed tox, simply invoke ``tox`` in a checkout of the repo\nto invoke the tests.\n\nTests are also run in continuous integration. See the badges above\nfor links to the CI runs.\n\nReleasing\n=========\n\nTagged releases are automatically published to PyPI by Azure\nPipelines, assuming the tests pass.\n\nOrigins\n=======\n\nThe ``path.py`` project was initially released in 2003 by Jason Orendorff\nand has been continuously developed and supported by several maintainers\nover the years.\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-path?utm_source=pypi-path&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\n",
  "requires_dist": [
    "sphinx ; extra == 'docs'",
    "jaraco.packaging (>=8.2) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "pytest (!=3.7.3,>=3.5) ; extra == 'testing'",
    "pytest-checkdocs (>=1.2.3) ; extra == 'testing'",
    "pytest-flake8 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-enabler ; extra == 'testing'",
    "appdirs ; extra == 'testing'",
    "packaging ; extra == 'testing'",
    "pygments ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "pytest-mypy ; (platform_python_implementation != \"PyPy\") and extra == 'testing'"
  ],
  "requires_python": ">=3.6",
  "current_version": "15.1.2",
  "released_versions": [
    "13.0.0",
    "13.1.0",
    "13.2.0",
    "13.3.0",
    "14.0.0",
    "14.0.1",
    "15.0.0",
    "15.0.1",
    "15.1.0",
    "15.1.1",
    "15.1.2"
  ]
}