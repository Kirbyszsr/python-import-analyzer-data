{
  "name": "pytest-mypy-plugins",
  "description": "<img src=\"http://mypy-lang.org/static/mypy_light.svg\" alt=\"mypy logo\" width=\"300px\"/>\n\n# pytest plugin for testing mypy types, stubs, and plugins\n\n[![Build Status](https://travis-ci.org/typeddjango/pytest-mypy-plugins.svg?branch=master)](https://travis-ci.org/typeddjango/pytest-mypy-plugins)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n[![Gitter](https://badges.gitter.im/mypy-django/Lobby.svg)](https://gitter.im/mypy-django/Lobby)\n\n## Installation\n\n```bash\npip install pytest-mypy-plugins\n```\n\n## Usage\n\n### Running\n\nPlugin, after installation, is automatically picked up by `pytest` therefore it is sufficient to\njust execute:\n\n```bash\npytest\n```\n\n### Paths\n\nThe `PYTHONPATH` and `MYPYPATH` environment variables, if set, are passed to `mypy` on invocation.\nThis may be helpful if you are testing a local plugin and need to provide an import path to it.\n\nBe aware that when `mypy` is run in a subprocess (the default) the test cases are run in temporary working directories\nwhere relative paths such as `PYTHONPATH=./my_plugin` do not reference the directory which you are running `pytest` from.\nIf you encounter this, consider invoking `pytest` with `--mypy-same-process` or make your paths absolute,\ne.g. `PYTHONPATH=$(pwd)/my_plugin pytest`.\n\nYou can also specify `PYTHONPATH`, `MYPYPATH`, or any other environment variable in `env:` section of `yml` spec:\n\n```yml\n- case: mypy_path_from_env\n  main: |\n    from pair import Pair\n\n    instance: Pair\n    reveal_type(instance)  # N: Revealed type is 'pair.Pair'\n  env:\n    - MYPYPATH=./pytest_mypy_plugins/tests/fixtures\n```\n\n\n### What is a test case?\n\nIn general each test case is just an element in an array written in a properly formatted `YAML` file.\nOn top of that, each case must comply to following types:\n\n| Property        | Type                                                   | Description                                                                                                     |\n| --------------- | ------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\n| `case`          | `str`                                                  | Name of the test case, complies to `[a-zA-Z0-9]` pattern                                                        |\n| `main`          | `str`                                                  | Portion of the code as if written in `.py` file                                                                 |\n| `files`         | `Optional[List[File]]=[]`\\*                            | List of extra files to simulate imports if needed                                                               |\n| `disable_cache` | `Optional[bool]=False`                                 | Set to `true` disables `mypy` caching                                                                           |\n| `mypy_config`   | `Optional[Dict[str, Union[str, int, bool, float]]]={}` | Inline `mypy` configuration, passed directly to `mypy` as `--config-file` option                                |\n| `env`           | `Optional[Dict[str, str]]={}`                          | Environmental variables to be provided inside of test run                                                       |\n| `parametrized`  | `Optional[List[Parameter]]=[]`\\*                       | List of parameters, similar to [`@pytest.mark.parametrize`](https://docs.pytest.org/en/stable/parametrize.html) |\n| `skip`          | `str`                                                  | Expression evaluated with following globals set: `sys`, `os`, `pytest` and `platform`                           |\n\nAppendix to **pseudo** types used above:\n\n```python\nclass File:\n    path: str\n    content: Optional[str] = None\nParameter = Mapping[str, Any]\n```\n\nImplementation notes:\n\n- `main` must be non-empty string that evaluates to valid **Python** code,\n- `content` of each of extra files must evaluate to valid **Python** code,\n- `parametrized` entries must all be the objects of the same _type_. It simply means that each\n  entry must have **exact** same set of keys,\n- `skip` - an expression set in `skip` is passed directly into\n  [`eval`](https://docs.python.org/3/library/functions.html#eval). It is advised to take a peek and\n  learn about how `eval` works.\n\n### Example\n\n#### 1. Inline type expectations\n\n```yaml\n# typesafety/test_request.yml\n- case: request_object_has_user_of_type_auth_user_model\n  main: |\n    from django.http.request import HttpRequest\n    reveal_type(HttpRequest().user)  # N: Revealed type is 'myapp.models.MyUser'\n    # check that other fields work ok\n    reveal_type(HttpRequest().method)  # N: Revealed type is 'Union[builtins.str, None]'\n  files:\n    - path: myapp/__init__.py\n    - path: myapp/models.py\n      content: |\n        from django.db import models\n        class MyUser(models.Model):\n            pass\n```\n\n#### 2. `@parametrized`\n\n```yaml\n- case: with_params\n  parametrized:\n    - val: 1\n      rt: builtins.int\n    - val: 1.0\n      rt: builtins.float\n  main: |\n    reveal_type({[ val }})  # N: Revealed type is '{{ rt }}'\n```\n\n#### 3. Longer type expectations\n\n```yaml\n- case: with_out\n  main: |\n    reveal_type('str')\n  out: |\n    main:1: note: Revealed type is 'builtins.str'\n```\n\n## Options\n\n```\nmypy-tests:\n  --mypy-testing-base=MYPY_TESTING_BASE\n                        Base directory for tests to use\n  --mypy-ini-file=MYPY_INI_FILE\n                        Which .ini file to use as a default config for tests\n  --mypy-same-process\n                        Now, to help with various issues in django-stubs, it runs every single test in the subprocess mypy call.\n                        Some debuggers cannot attach to subprocess, so enable this flag to make mypy check happen in the same process.\n                        (Could cause cache issues)\n```\n\n## Further reading\n\n- [Testing mypy stubs, plugins, and types](https://sobolevn.me/2019/08/testing-mypy-types)\n\n## License\n\n[MIT](https://github.com/typeddjango/pytest-mypy-plugins/blob/master/LICENSE)\n\n\n",
  "requires_dist": [
    "pytest (>=6.0.0)",
    "mypy (>=0.790)",
    "decorator",
    "pyyaml",
    "pystache (>=0.5.4)"
  ],
  "requires_python": ">=3.6",
  "current_version": "1.6.1",
  "released_versions": [
    "0.1.0",
    "0.1.1",
    "0.2.0",
    "0.3.0",
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.3.0",
    "1.4.0",
    "1.5.0",
    "1.6.0",
    "1.6.1"
  ]
}