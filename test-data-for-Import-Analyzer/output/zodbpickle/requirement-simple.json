{
  "name": "zodbpickle",
  "description": "``zodbpickle`` README\n=====================\n\n.. image:: https://travis-ci.org/zopefoundation/zodbpickle.svg?branch=master\n        :target: https://travis-ci.org/zopefoundation/zodbpickle\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/zodbpickle/badge.svg\n   :target: https://coveralls.io/github/zopefoundation/zodbpickle\n   :alt: Coverage status\n\n.. image:: https://img.shields.io/pypi/v/zodbpickle.svg\n        :target: https://pypi.python.org/pypi/zodbpickle\n        :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/zodbpickle.svg\n        :target: https://pypi.python.org/pypi/zodbpickle\n        :alt: Python versions\n\nThis package presents a uniform pickling interface for ZODB:\n\n- Under Python2, this package forks both Python 2.7's ``pickle`` and\n  ``cPickle`` modules, adding support for the ``protocol 3`` opcodes.\n  It also provides a new subclass of ``bytes``, ``zodbpickle.binary``,\n  which Python2 applications can use to pickle binary values such that\n  they will be unpickled as ``bytes`` under Py3k.\n\n- Under Py3k, this package forks the ``pickle`` module (and the supporting\n  C extension) from both Python 3.2 and Python 3.3.  The fork add support\n  for the ``noload`` operations used by ZODB.\n\nCaution\n-------\n\n``zodbpickle`` relies on Python's ``pickle`` module.\nThe ``pickle`` module is not intended to be secure against erroneous or\nmaliciously constructed data. Never unpickle data received from an\nuntrusted or unauthenticated source as arbitrary code might be executed.\n\nAlso see https://docs.python.org/3.6/library/pickle.html\n\nGeneral Usage\n-------------\n\nTo get compatibility between Python 2 and 3 pickling, replace::\n\n    import pickle\n\nby::\n\n    from zodbpickle import pickle\n\nThis provides compatibility, but has the effect that you get the fast implementation\nin Python 3, while Python 2 uses the slow version.\n\nTo get a more deterministic choice of the implementation, use one of::\n\n    from zodbpickle import fastpickle # always C\n    from zodbpickle import slowpickle # always Python\n\nBoth modules can co-exist which is helpful for comparison.\n\nBut there is a bit more to consider, so please read on!\n\nLoading/Storing Python 2 Strings\n--------------------------------\n\nIn all their wisdom, the Python developers have decided that Python 2 ``str``\ninstances should be loaded as Python 3 ``str`` objects (i.e. unicode\nstrings). Patches were proposed in Python `issue 6784`__ but were never\napplied. This code base contains those patches.\n\n.. __: http://bugs.python.org/issue6784\n\nExample 1: Loading Python 2 pickles on Python 3 ::\n\n    $ python2\n    >>> import pickle\n    >>> pickle.dumps('\\xff', protocol=0)\n    \"S'\\\\xff'\\np0\\n.\"\n    >>> pickle.dumps('\\xff', protocol=1)\n    'U\\x01\\xffq\\x00.'\n    >>> pickle.dumps('\\xff', protocol=2)\n    '\\x80\\x02U\\x01\\xffq\\x00.'\n\n    $ python3\n    >>> from zodbpickle import pickle\n    >>> pickle.loads(b\"S'\\\\xff'\\np0\\n.\", encoding='bytes')\n    b'\\xff'\n    >>> pickle.loads(b'U\\x01\\xffq\\x00.', encoding='bytes')\n    b'\\xff'\n    >>> pickle.loads(b'\\x80\\x02U\\x01\\xffq\\x00.', encoding='bytes')\n    b'\\xff'\n\nExample 2: Loading Python 3 pickles on Python 2 ::\n\n    $ python3\n    >>> from zodbpickle import pickle\n    >>> pickle.dumps(b\"\\xff\", protocol=0)\n    b'c_codecs\\nencode\\np0\\n(V\\xff\\np1\\nVlatin1\\np2\\ntp3\\nRp4\\n.'\n    >>> pickle.dumps(b\"\\xff\", protocol=1)\n    b'c_codecs\\nencode\\nq\\x00(X\\x02\\x00\\x00\\x00\\xc3\\xbfq\\x01X\\x06\\x00\\x00\\x00latin1q\\x02tq\\x03Rq\\x04.'\n    >>> pickle.dumps(b\"\\xff\", protocol=2)\n    b'\\x80\\x02c_codecs\\nencode\\nq\\x00X\\x02\\x00\\x00\\x00\\xc3\\xbfq\\x01X\\x06\\x00\\x00\\x00latin1q\\x02\\x86q\\x03Rq\\x04.'\n\n    $ python2\n    >>> import pickle\n    >>> pickle.loads('c_codecs\\nencode\\np0\\n(V\\xff\\np1\\nVlatin1\\np2\\ntp3\\nRp4\\n.')\n    '\\xff'\n    >>> pickle.loads('c_codecs\\nencode\\nq\\x00(X\\x02\\x00\\x00\\x00\\xc3\\xbfq\\x01X\\x06\\x00\\x00\\x00latin1q\\x02tq\\x03Rq\\x04.')\n    '\\xff'\n    >>> pickle.loads('\\x80\\x02c_codecs\\nencode\\nq\\x00X\\x02\\x00\\x00\\x00\\xc3\\xbfq\\x01X\\x06\\x00\\x00\\x00latin1q\\x02\\x86q\\x03Rq\\x04.')\n    '\\xff'\n\nExample 3: everything breaks down ::\n\n    $ python2\n    >>> class Foo(object):\n    ...     def __init__(self):\n    ...         self.x = 'hello'\n    ...\n    >>> import pickle\n    >>> pickle.dumps(Foo(), protocol=0)\n    \"ccopy_reg\\n_reconstructor\\np0\\n(c__main__\\nFoo\\np1\\nc__builtin__\\nobject\\np2\\nNtp3\\nRp4\\n(dp5\\nS'x'\\np6\\nS'hello'\\np7\\nsb.\"\n    >>> pickle.dumps(Foo(), protocol=1)\n    'ccopy_reg\\n_reconstructor\\nq\\x00(c__main__\\nFoo\\nq\\x01c__builtin__\\nobject\\nq\\x02Ntq\\x03Rq\\x04}q\\x05U\\x01xq\\x06U\\x05helloq\\x07sb.'\n    >>> pickle.dumps(Foo(), protocol=2)\n    '\\x80\\x02c__main__\\nFoo\\nq\\x00)\\x81q\\x01}q\\x02U\\x01xq\\x03U\\x05helloq\\x04sb.'\n\n    $ python3\n    >>> from zodbpickle import pickle\n    >>> class Foo(object): pass\n    ...\n    >>> foo = pickle.loads(\"ccopy_reg\\n_reconstructor\\np0\\n(c__main__\\nFoo\\np1\\nc__builtin__\\nobject\\np2\\nNtp3\\nRp4\\n(dp5\\nS'x'\\np6\\nS'hello'\\np7\\nsb.\", encoding='bytes')\n    >>> foo.x\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AttributeError: 'Foo' object has no attribute 'x'\n\nwait what? ::\n\n    >>> foo.__dict__\n    {b'x': b'hello'}\n\noooh.  So we use ``encoding='ASCII'`` (the default) and ``errors='bytes'`` and\nhope it works::\n\n    >>> foo = pickle.loads(\"ccopy_reg\\n_reconstructor\\np0\\n(c__main__\\nFoo\\np1\\nc__builtin__\\nobject\\np2\\nNtp3\\nRp4\\n(dp5\\nS'x'\\np6\\nS'hello'\\np7\\nsb.\", errors='bytes')\n    >>> foo.x\n    'hello'\n\nfalling back to bytes if necessary ::\n\n    >>> pickle.loads(b'\\x80\\x02U\\x01\\xffq\\x00.', errors='bytes')\n    b'\\xff'\n\n\nSupport for ``noload()``\n------------------------\n\nThe ZODB uses `cPickle`'s ``noload()`` method to retrieve all persistent\nreferences from a pickle without loading any objects. This feature was removed\nfrom Python 3's pickle. Unfortuantely, this unnecessarily fills the pickle\ncache.\n\nThis module provides a ``noload()`` method again.\n\n\n===========\n Changelog\n===========\n\n2.0.0 (2019-11-13)\n==================\n\n- CPython 2: Make ``zodbpickle.binary`` objects smaller and untracked\n  by the garbage collector. Now they behave more like the native bytes\n  object. Just like it, and just like on Python 3, they cannot have\n  arbitrary attributes or be weakly referenced. See `issue 53\n  <https://github.com/zopefoundation/zodbpickle/issues/53>`_.\n\n1.1 (2019-11-09)\n================\n\n- Add support for Python 3.8.\n\n- Drop support for Python 3.4.\n\n\n1.0.4 (2019-06-12)\n==================\n\n- Fix pickle corruption under certain conditions. See `pull request 47\n  <https://github.com/zopefoundation/zodbpickle/pull/47>`_.\n\n\n1.0.3 (2018-12-18)\n==================\n\n- Fix a bug: zodbpickle.slowpickle assigned `_Pickler` to `Unpickler`.\n\n\n1.0.2 (2018-08-10)\n==================\n\n- Add support for Python 3.7.\n\n\n1.0.1 (2018-05-16)\n==================\n\n- Fix a memory leak in pickle protocol 3 under Python 2. See `issue 36\n  <https://github.com/zopefoundation/zodbpickle/issues/36>`_.\n\n\n1.0 (2018-02-09)\n================\n\n- Add a warning to the readme not to use untrusted pickles.\n\n- Drop support for Python 3.3.\n\n\n0.7.0 (2017-09-22)\n==================\n\n- Drop support for Python 2.6 and 3.2.\n\n- Add support for Jython 2.7.\n\n- Add support for Python 3.5 and 3.6.\n\n0.6.0 (2015-04-02)\n==================\n\n- Restore the ``noload`` behaviour from Python 2.6 and provide the\n  ``noload`` method on the non-C-accelerated unpicklers under PyPy and\n  Python 2.\n\n- Add support for PyPy, PyPy3, and Python 3.4.\n\n0.5.2 (2013-08-17)\n==================\n\n- Import accelerator from *our* extension module under Py3k.\n  See https://github.com/zopefoundation/zodbpickle/issues/6,\n  https://github.com/zopefoundation/zodbpickle/issues/7.\n\n- Fix unpickler's ``load_short_binstring`` across supported platforms.\n\n0.5.1 (2013-07-06)\n==================\n\n- Update all code and tests to Python 2.6.8, 2.7.5, 3.2.5, 3.3.2 .\n\n- Add the modules ``zodbpickle.fastpickle`` and ``zodbpickle.slowpickle``.\n  This provides a version-independent choice of the C or Python\n  implementation.\n\n- Fix a minor bug on OS X\n\n0.5.0 (2013-06-14)\n==================\n\n- Removed support for the ``bytes_as_strings`` arguments to pickling APIs:\n  the pickles created when that argument was true might not be unpickled\n  without passing ``encoding='bytes'``, which ZODB couldn't reliably enforce.\n  On Py3k, ZODB will be using ``protocol=3`` pickles anyway.\n\n0.4.4 (2013-06-07)\n==================\n\n- Add protocol 3 opcodes to the C version of the ``noload()`` dispatcher.\n\n0.4.3 (2013-06-07)\n==================\n\n- Packaging error:  remove spurious ``-ASIDE`` file from sdist.\n\n0.4.2 (2013-06-07)\n==================\n\n- Fix NameError in pure-Python version of ``Unpickler.noload_appends``.\n\n- Fix NameError in pure-Python version of ``Unpickler.noload_setitems``.\n\n0.4.1 (2013-04-29)\n==================\n\n- Fix typo in Python2 version of ``zodbpickle.pickle`` module.\n\n0.4 (2013-04-28)\n================\n\n- Support the common pickle module interface for Python 2.6, 2.7, 3.2, and 3.3.\n\n- Split the Python implementations / tests into Python2- and Py3k-specific\n  variants.\n\n- Added a fork of the Python 2.7 ``_pickle.c``, for use under Python2.\n  The fork adds support for the Py3k ``protocol 3`` opcodes.\n\n- Added a custom ``binary`` type for use in Python2 apps.\n  Derived from ``bytes``, the ``binary`` type allows Python2 apps to pickle\n  binary data using opcodes which will cause it to be unpickled as ``bytes``\n  on Py3k.  Under Py3k, the ``binary`` type is just an alias for ``bytes``.\n\n0.3 (2013-03-18)\n================\n\n- Added ``noload`` code to Python 3.2 version of ``Unpickler``.  As with\n  the Python 3.3 version, this code remains untested.\n\n- Added ``bytes_as_strings`` option to the Python 3.2 version of\n  ``Pickler``, ``dump``, and ``dumps``.\n\n0.2 (2013-03-05)\n================\n\n- Added ``bytes_as_strings`` option to ``Pickler``, ``dump``, and ``dumps``.\n\n- Incomplete support for Python 3.2:\n\n  - Move ``_pickle.c`` -> ``_pickle_33.c``.\n\n  - Clone Python 3.2.3's ``_pickle.c`` -> ``_pickle_32.c`` and apply the\n    same patch.\n\n  - Choose between them at build time based on ``sys.version_info``.\n\n  - Disable some tests of 3.3-only features.\n\n  - Missing: implementation of ``noload()`` in ``_pickle_32.c``.\n\n  - Missing: implementation of ``bytes_as_strings=True`` in ``_pickle_32.c``.\n\n\n0.1.0 (2013-02-27)\n==================\n\n- Initial release of Python 3.3's pickle with the patches of Python\n  `issue 6784`__ applied.\n\n.. __: http://bugs.python.org/issue6784#msg156166\n\n- Added support for ``errors=\"bytes\"``.\n\n\n",
  "requires_dist": [
    "setuptools"
  ],
  "requires_python": "",
  "current_version": "2.0.0",
  "released_versions": [
    "0.1.0",
    "0.2",
    "0.3",
    "0.4",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.4.4",
    "0.5.0",
    "0.5.1",
    "0.5.2",
    "0.6.0",
    "0.7.0",
    "1.0",
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.0.4",
    "1.1",
    "2.0.0"
  ]
}