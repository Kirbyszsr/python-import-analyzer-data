{
  "name": "RestrictedPython",
  "description": ".. image:: https://api.travis-ci.org/zopefoundation/RestrictedPython.svg?branch=master\n    :target: https://travis-ci.org/zopefoundation/RestrictedPython\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/RestrictedPython/badge.svg?branch=master\n    :target: https://coveralls.io/github/zopefoundation/RestrictedPython?branch=master\n\n.. image:: https://readthedocs.org/projects/restrictedpython/badge/\n    :target: https://restrictedpython.readthedocs.org/\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/RestrictedPython.svg\n    :target: https://pypi.org/project/RestrictedPython/\n    :alt: Current version on PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/RestrictedPython.svg\n    :target: https://pypi.org/project/RestrictedPython/\n    :alt: Supported Python versions\n\n.. image:: https://github.com/zopefoundation/RestrictedPython/raw/master/docs/logo.jpg\n\n================\nRestrictedPython\n================\n\nRestrictedPython is a tool that helps to define a subset of the Python language which allows to provide a program input into a trusted environment.\nRestrictedPython is not a sandbox system or a secured environment, but it helps to define a trusted environment and execute untrusted code inside of it.\n\n.. warning::\n\n   RestrictedPython only supports CPython. It does _not_ support PyPy and other Python implementations as it cannot provide its restrictions there.\n\nFor full documentation please see http://restrictedpython.readthedocs.io/.\n\nExample\n=======\n\nTo give a basic understanding what RestrictedPython does here two examples:\n\nAn unproblematic code example\n-----------------------------\n\nPython allows you to execute a large set of commands.\nThis would not harm any system.\n\n.. code-block:: pycon\n\n    >>> from RestrictedPython import compile_restricted\n    >>> from RestrictedPython import safe_globals\n    >>>\n    >>> source_code = \"\"\"\n    ... def example():\n    ...     return 'Hello World!'\n    ... \"\"\"\n    >>>\n    >>> loc = {}\n    >>> byte_code = compile_restricted(source_code, '<inline>', 'exec')\n    >>> exec(byte_code, safe_globals, loc)\n    >>>\n    >>> loc['example']()\n    'Hello World!'\n\nProblematic code example\n------------------------\n\nThis example directly executed in Python could harm your system.\n\n.. code-block:: pycon\n\n    >>> from RestrictedPython import compile_restricted\n    >>> from RestrictedPython import safe_globals\n    >>>\n    >>> source_code = \"\"\"\n    ... import os\n    ...\n    ... os.listdir('/')\n    ... \"\"\"\n    >>> byte_code = compile_restricted(source_code, '<inline>', 'exec')\n    >>> exec(byte_code, safe_globals, {})\n    Traceback (most recent call last):\n    ImportError: __import__ not found\n\nChanges\n=======\n\n5.1 (2020-10-07)\n----------------\n\nFeatures\n++++++++\n\n- Add support for (Python 3.8+) assignment expressions (i.e. the ``:=`` operator)\n\n- Add support for Python 3.9 after checking the security implications of the\n  syntax changes made in that version.\n\n- Add support for the ``bytes`` and ``sorted`` builtins\n  (`#186 <https://github.com/zopefoundation/RestrictedPython/issues/186>`_)\n\nDocumentation\n+++++++++++++\n\n- Document parameter ``mode`` for the ``compile_restricted`` functions\n  (`#157 <https://github.com/zopefoundation/RestrictedPython/issues/157>`_)\n\n- Fix documentation for ``compile_restricted_function``\n  (`#158 <https://github.com/zopefoundation/RestrictedPython/issues/158>`_)\n\nFixes\n+++++\n\n- Fix ``compile_restricted_function`` with SyntaxErrors that have no text\n  (`#181 <https://github.com/zopefoundation/RestrictedPython/issues/181>`_)\n\n- Drop install dependency on ``setuptools``.\n  (`#189 <https://github.com/zopefoundation/RestrictedPython/issues/189>`_)\n\n\n5.0 (2019-09-03)\n----------------\n\nBreaking changes\n++++++++++++++++\n\n- Revert the Allowance of the ``...`` (Ellipsis) statement, as of 4.0. It is not needed to support Python 3.8.\n  The security implications of the Ellipsis Statement is not 100 % clear and is not checked.\n  ``...`` (Ellipsis) is disallowed again.\n\nFeatures\n++++++++\n\n- Add support for f-strings in Python 3.6+.\n  (`#123 <https://github.com/zopefoundation/RestrictedPython/issues/123>`_)\n\n\n4.0 (2019-05-10)\n----------------\n\nChanges since 3.6.0:\n\nBreaking changes\n++++++++++++++++\n\n- The ``compile_restricted*`` functions now return a\n  ``namedtuple CompileResult`` instead of a simple ``tuple``.\n\n- Drop the old implementation of version 3.x: `RCompile.py`,\n  `SelectCompiler.py`, `MutatingWorker.py`, `RestrictionMutator.py` and\n  `tests/verify.py`.\n\n- Drop support for long-deprecated ``sets`` module.\n\nSecurity related issues\n+++++++++++++++++++++++\n\n- RestrictedPython now ships with a default implementation for\n  ``_getattr_`` which prevents from using the ``format()`` method on\n  str/unicode as it is not safe, see:\n  http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/\n\n  **Caution:** If you do not already have secured the access to this\n  ``format()`` method in your ``_getattr_`` implementation use\n  ``RestrictedPython.Guards.safer_getattr()`` in your implementation to\n  benefit from this fix.\n\nFeatures\n++++++++\n\n- Mostly complete rewrite based on Python AST module.\n  [loechel (Alexander Loechel), icemac (Michael Howitz),\n  stephan-hof (Stephan Hofmockel), tlotze (Thomas Lotze)]\n\n- Add support for Python 3.5, 3.6, 3.7.\n\n- Add preliminary support for Python 3.8. as of 3.8.0a3 is released.\n\n- Warn when using another Python implementation than CPython as it is not safe\n  to use RestrictedPython with other versions than CPyton.\n  See https://bitbucket.org/pypy/pypy/issues/2653 for PyPy.\n\n- Allow the ``...`` (Ellipsis) statement. It is needed to support Python 3.8.\n\n- Allow `yield` and `yield from` statements.\n  Generator functions would now work in RestrictedPython.\n\n- Allow the following magic methods to be defined on classes.\n  (`#104 <https://github.com/zopefoundation/RestrictedPython/issues/104>`_)\n  They cannot be called directly but by the built-in way to use them (e. g.\n  class instantiation, or comparison):\n\n  + ``__init__``\n  + ``__contains__``\n  + ``__lt__``\n  + ``__le__``\n  + ``__eq__``\n  + ``__ne__``\n  + ``__gt__``\n  + ``__ge__``\n\n- Imports like ``from a import *`` (so called star imports) are now forbidden\n  as they allow to import names starting with an underscore which could\n  override protected build-ins.\n  (`#102 <https://github.com/zopefoundation/RestrictedPython/issues/102>`_)\n\n- Allow to use list comprehensions in the default implementation of\n  ``RestrictionCapableEval.eval()``.\n\n- Switch to pytest as test runner.\n\n- Bring test coverage to 100 %.\n\nBug fixes\n+++++++++\n\n- Improve `.Guards.safer_getattr` to prevent accessing names starting with\n  underscore.\n  (`#142 <https://github.com/zopefoundation/RestrictedPython/issues/142>`_)\n\n\n3.6.0 (2010-07-09)\n------------------\n\n- Add name check for names assigned during imports using the\n  ``from x import y`` format.\n\n- Add test for name check when assigning an alias using multiple-context\n  ``with`` statements in Python 2.7.\n\n- Add tests for protection of the iterators for dict and set comprehensions\n  in Python 2.7.\n\n3.6.0a1 (2010-06-05)\n--------------------\n\n- Remove support for ``DocumentTemplate.sequence`` - this is handled in the\n  DocumentTemplate package itself.\n\n3.5.2 (2010-04-30)\n------------------\n\n- Remove a testing dependency on ``zope.testing``.\n\n3.5.1 (2009-03-17)\n------------------\n\n- Add tests for ``Utilities`` module.\n\n- Filter DeprecationWarnings when importing Python's ``sets`` module.\n\n3.5.0 (2009-02-09)\n------------------\n\n- Drop legacy support for Python 2.1 / 2.2 (``__future__`` imports\n  of ``nested_scopes`` / ``generators``.).\n\n3.4.3 (2008-10-26)\n------------------\n\n- Fix deprecation warning: ``with`` is now a reserved keyword on\n  Python 2.6. That means RestrictedPython should run on Python 2.6\n  now. Thanks to Ranjith Kannikara, GSoC Student for the patch.\n\n- Add tests for ternary if expression and for ``with`` keyword and\n  context managers.\n\n3.4.2 (2007-07-28)\n------------------\n\n- Changed homepage URL to the PyPI site\n\n- Improve ``README.txt``.\n\n3.4.1 (2007-06-23)\n------------------\n\n- Fix http://www.zope.org/Collectors/Zope/2295: Bare conditional in\n  a Zope 2 PythonScript followed by a comment causes SyntaxError.\n\n3.4.0 (2007-06-04)\n------------------\n\n- RestrictedPython now has its own release cycle as a separate project.\n\n- Synchronized with RestrictedPython from Zope 2 tree.\n\n3.2.0 (2006-01-05)\n------------------\n\n- Corresponds to the verison of the RestrictedPython package shipped\n  as part of the Zope 3.2.0 release.\n\n- No changes from 3.1.0.\n\n3.1.0 (2005-10-03)\n------------------\n\n- Corresponds to the verison of the RestrictedPython package shipped\n  as part of the Zope 3.1.0 release.\n\n- Remove unused fossil module, ``SafeMapping``.\n\n- Replaced use of deprecated ``whrandom`` module with ``random`` (aliased\n  to ``whrandom`` for backward compatibility).\n\n3.0.0 (2004-11-07)\n------------------\n\n- Corresponds to the verison of the RestrictedPython package shipped\n  as part of the Zope X3.0.0 release.\n\n\n",
  "requires_dist": [
    "Sphinx ; extra == 'docs'",
    "sphinx-rtd-theme ; extra == 'docs'",
    "pytest ; extra == 'test'",
    "pytest-mock ; extra == 'test'"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <3.10",
  "current_version": "5.1",
  "released_versions": [
    "3.4.2",
    "3.4.3",
    "3.5.0",
    "3.5.1",
    "3.5.2",
    "3.6.0",
    "3.6.0a1",
    "4.0",
    "4.0a1",
    "4.0a2",
    "4.0a3",
    "4.0b1",
    "4.0b2",
    "4.0b3",
    "4.0b4",
    "4.0b5",
    "4.0b6",
    "4.0b7",
    "4.0b8",
    "5.0",
    "5.1"
  ]
}