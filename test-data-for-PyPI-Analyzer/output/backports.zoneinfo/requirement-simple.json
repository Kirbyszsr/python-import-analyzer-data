{
  "name": "backports.zoneinfo",
  "description": "# `backports.zoneinfo`: Backport of the standard library module `zoneinfo`\n\nThis package was originally the reference implementation for [PEP 615](https://www.python.org/dev/peps/pep-0615/), which proposes support for the IANA time zone database in the standard library, and now serves as a backport to Python 3.6+ (including PyPy).\n\nThis exposes the `backports.zoneinfo` module, which is a backport of the [`zoneinfo`](https://docs.python.org/3.9/library/zoneinfo.html#module-zoneinfo) module. The backport's documentation can be found [on readthedocs](https://zoneinfo.readthedocs.io/en/latest/).\n\nThe module uses the system time zone data if available, and falls back to the [`tzdata`](https://tzdata.readthedocs.io/en/latest/) package (available [on PyPI](https://pypi.org/project/tzdata/)) if installed.\n\n## Installation and depending on this library\n\nThis module is called [`backports.zoneinfo`](https://pypi.org/project/backports.zoneinfo) on PyPI. To install it in your local environment, use:\n\n```\npip install backports.zoneinfo\n```\n\nOr (particularly on Windows), you can also use the `tzdata` extra (which basically just declares a dependency on `tzdata`, so this doesn't actually save you any typing \ud83d\ude05):\n\n```\npip install backports.zoneinfo[tzdata]\n```\n\nIf you want to use this in your application, it is best to use [PEP 508 environment markers](https://www.python.org/dev/peps/pep-0508/#environment-markers) to declare a dependency *conditional on the Python version*:\n\n```\nbackports.zoneinfo;python_version<\"3.9\"\n```\n\nSupport for `backports.zoneinfo` in Python 3.9+ is currently minimal, since it is expected that you would use the standard library `zoneinfo` module instead.\n\n## Use\n\nThe `backports.zoneinfo` module should be a drop-in replacement for the Python 3.9 standard library module `zoneinfo`. If you do not support anything earlier than Python 3.9, **you do not need this library**; if you are supporting Python 3.6+, you may want to use this idiom to \"fall back\" to ``backports.zoneinfo``:\n\n```python\ntry:\n    import zoneinfo\nexcept ImportError:\n    from backports import zoneinfo\n```\n\nTo get access to time zones with this module, construct a `ZoneInfo` object and attach it to your datetime:\n\n```python\n>>> from backports.zoneinfo import ZoneInfo\n>>> from datetime import datetime, timedelta, timezone\n>>> dt = datetime(1992, 3, 1, tzinfo=ZoneInfo(\"Europe/Minsk\"))\n>>> print(dt)\n1992-03-01 00:00:00+02:00\n>>> print(dt.utcoffset())\n2:00:00\n>>> print(dt.tzname())\nEET\n```\n\nArithmetic works as expected without the need for a \"normalization\" step:\n\n```python\n>>> dt += timedelta(days=90)\n>>> print(dt)\n1992-05-30 00:00:00+03:00\n>>> dt.utcoffset()\ndatetime.timedelta(seconds=10800)\n>>> dt.tzname()\n'EEST'\n```\n\nAmbiguous and imaginary times are handled using the `fold` attribute added in [PEP 495](https://www.python.org/dev/peps/pep-0495/):\n\n```python\n>>> dt = datetime(2020, 11, 1, 1, tzinfo=ZoneInfo(\"America/Chicago\"))\n>>> print(dt)\n2020-11-01 01:00:00-05:00\n>>> print(dt.replace(fold=1))\n2020-11-01 01:00:00-06:00\n\n>>> UTC = timezone.utc\n>>> print(dt.astimezone(UTC))\n2020-11-01 06:00:00+00:00\n>>> print(dt.replace(fold=1).astimezone(UTC))\n2020-11-01 07:00:00+00:00\n```\n\n# Contributing\n\nCurrently we are not accepting contributions to this repository because we have not put the CLA in place and we would like to avoid complicating the process of adoption into the standard library. Contributions to [CPython](https://github.com/python/cpython) will eventually be backported to this repository \u2014 see [the Python developer's guide](https://devguide.python.org/) for more information on how to contribute to CPython.\n\n\n",
  "requires_dist": [
    "importlib-resources ; python_version < \"3.7\"",
    "tzdata ; extra == 'tzdata'"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.2.1",
  "released_versions": [
    "0.1.0",
    "0.1.0b0",
    "0.1.0b1",
    "0.2.0",
    "0.2.1"
  ]
}