{
  "name": "aspectlib",
  "description": "========\nOverview\n========\n\n\n\n``aspectlib`` is an aspect-oriented programming, monkey-patch and decorators library. It is useful when changing\nbehavior in existing code is desired. It includes tools for debugging and testing: simple mock/record and a complete\ncapture/replay framework.\n\n* Free software: BSD 2-Clause License\n\nInstallation\n============\n\n::\n\n    pip install aspectlib\n\nDocumentation\n=============\n\nDocs are hosted at readthedocs.org: `python-aspectlib docs <http://python-aspectlib.readthedocs.org/en/latest/>`_.\n\nImplementation status\n=====================\n\nWeaving functions, methods, instances and classes is completed.\n\nPending:\n\n* *\"Concerns\"* (see `docs/todo.rst`)\n\nIf ``aspectlib.weave`` doesn't work for your scenario please report a bug!\n\nRequirements\n============\n\n:OS: Any\n:Runtime: Python 2.6, 2.7, 3.3, 3.4 or PyPy\n\nPython 3.2, 3.1 and 3.0 are *NOT* supported (some objects are too crippled).\n\nSimilar projects\n================\n\n* `function_trace <https://github.com/RedHatQE/function_trace>`_ - extremely simple\n\nChangelog\n=========\n\n1.5.2 (2020-11-15)\n------------------\n\n* Fixed broken import on Python 3.9.\n  Contributed by Felix Yan in `#19 <https://github.com/ionelmc/python-aspectlib/pull/19>`_.\n\n1.5.1 (2020-06-11)\n------------------\n\n* Remove some debug leftover prints from `v1.5.0`.\n\n1.5.0 (2020-04-05)\n------------------\n\n* Fixed ``weave`` to stop reading attributes that don't match the method selector.\n  Contributed by Jonas Maurus in `#14 <https://github.com/ionelmc/python-aspectlib/pull/14>`_.\n* Added support for Python 3.7 and 3.8 (``async def`` functions and generators).\n\n1.4.2 (2016-05-10)\n------------------\n\n* Fix forgotten debug prints.\n\n1.4.1 (2016-05-06)\n------------------\n\n* Fixed weaving of objects that don't live on root-level modules.\n\n1.4.0 (2016-04-09)\n------------------\n\n* Corrected weaving of methods, the weaved function should be unbound.\n* Rolling back only applies undos once.\n* Added a convenience ``weave`` fixture for pytest.\n\n1.3.3 (2015-10-02)\n------------------\n\n* Fixed typo in ``ABSOLUTELLY_ALL_METHODS`` name (now ``ABSOLUTELY_ALL_METHODS``). Old name is still there for\n  backwards compatibility.\n\n1.3.2 (2015-09-22)\n------------------\n\n* Fixed another tricky bug in the generator advising wrappers - result was not returned if only `Proceed` was yielded.\n\n1.3.1 (2015-09-12)\n------------------\n\n* Corrected result handling when using Aspects on generators.\n\n1.3.0 (2015-06-06)\n------------------\n\n* Added ``messages`` property to ``aspectlib.test.LogCapture``. Change ``call`` to have level name instead of number.\n* Fixed a bogus warning from ``aspectlib.patch_module``` when patching methods on old style classes.\n\n1.2.2 (2014-11-25)\n------------------\n\n* Added support for weakrefs in the ``__logged__`` wrapper from ``aspectlib.debug.log`` decorator.\n\n1.2.1 (2014-10-15)\n------------------\n\n* Don't raise exceptions from ``Replay.__exit__`` if there would be an error (makes original cause hard to debug).\n\n1.2.0 (2014-06-24)\n------------------\n\n* Fixed weaving methods that were defined in some baseclass (and not on the target class).\n* Fixed wrong qualname beeing used in the Story/Replay recording. Now used the alias given to the weaver instead of\n  whatever is the realname on the current platform.\n\n1.1.1 (2014-06-14)\n------------------\n\n* Use ``ASPECTLIB_DEBUG`` for every logger in ``aspectlib``.\n\n1.1.0 (2014-06-13)\n------------------\n\n* Added a `bind` option to ``aspectlib.Aspect`` so you can access the cutpoint from the advisor.\n* Replaced automatic importing in ``aspectlib.test.Replay`` with extraction of context variables (locals and globals\n  from the calling ``aspectlib.test.Story``). Works better than the previous inference of module from AST of the\n  result.\n* All the methods on the replay are now properties: ``aspectlib.test.Story.diff``,\n  ``aspectlib.test.Story.unexpected`` and ``aspectlib.test.Story.missing``.\n* Added ``aspectlib.test.Story.actual`` and ``aspectlib.test.Story.expected``.\n* Added an ``ASPECTLIB_DEBUG`` environment variable option to switch on debug logging in ``aspectlib``'s internals.\n\n1.0.0 (2014-05-03)\n------------------\n\n* Reworked the internals ``aspectlib.test.Story`` to keep call ordering, to allow dependencies and improved the\n  serialization (used in the diffs and the missing/unexpected lists).\n\n\n0.9.0 (2014-04-16)\n------------------\n\n* Changed ``aspectlib.test.record``:\n\n    * Renamed `history` option to `calls`.\n    * Renamed `call` option to `iscalled`.\n    * Added `callback` option.\n    * Added `extended` option.\n\n* Changed ``aspectlib.weave``:\n\n    * Allow weaving everything in a module.\n    * Allow weaving instances of new-style classes.\n\n* Added ``aspectlib.test.Story`` class for capture-replay and stub/mock testing.\n\n0.8.1 (2014-04-01)\n------------------\n\n* Use simpler import for the py3support.\n\n0.8.0 (2014-03-31)\n------------------\n\n* Change ``aspectlib.debug.log`` to use ``aspectlib.Aspect`` and work as expected with coroutines or generators.\n* Fixed ``aspectlib.debug.log`` to work on Python 3.4.\n* Remove the undocumented ``aspectlib.Yield`` advice. It was only usable when decorating generators.\n\n0.7.0 (2014-03-28)\n------------------\n\n* Add support for decorating generators and coroutines in ``aspectlib.Aspect``.\n* Made aspectlib raise better exceptions.\n\n0.6.1 (2014-03-22)\n------------------\n\n* Fix checks inside ``aspectlib.debug.log`` that would inadvertently call ``__bool__``/``__nonzero``.\n\n0.6.0 (2014-03-17)\n------------------\n\n* Don't include __getattribute__ in ALL_METHODS - it's too dangerous dangerous dangerous dangerous dangerous dangerous\n  ... ;)\n* Do a more reliable check for old-style classes in debug.log\n* When weaving a class don't weave attributes that are callable but are not actually routines (functions, methods etc)\n\n0.5.0 (2014-03-16)\n------------------\n\n* Changed ``aspectlib.debug.log``:\n\n    * Renamed `arguments` to `call_args`.\n    * Renamed `arguments_repr` to `call_args_repr`.\n    * Added `call` option.\n    * Fixed issue with logging from old-style methods (object name was a generic \"instance\").\n\n* Fixed issues with weaving some types of builtin methods.\n* Allow to apply multiple aspects at the same time.\n* Validate string targets before weaving. ``aspectlib.weave('mod.invalid name', aspect)`` now gives a clear error\n  (``invalid name`` is not a valid identifier)\n* Various documentation improvements and examples.\n\n0.4.1 (2014-03-08)\n------------------\n\n* Remove junk from 0.4.0's source distribution.\n\n0.4.0 (2014-03-08)\n------------------\n\n* Changed ``aspectlib.weave``:\n\n    * Replaced `only_methods`, `skip_methods`, `skip_magicmethods` options with `methods`.\n    * Renamed `on_init` option to `lazy`.\n    * Added `aliases` option.\n    * Replaced `skip_subclasses` option with `subclasses`.\n\n* Fixed weaving methods from a string target.\n\n0.3.1 (2014-03-05)\n------------------\n\n* ???\n\n0.3.0 (2014-03-05)\n------------------\n\n* First public release.\n\n\n",
  "requires_dist": [
    "fields"
  ],
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
  "current_version": "1.5.2",
  "released_versions": [
    "0.1",
    "0.3.0",
    "0.3.1",
    "0.4.0",
    "0.4.1",
    "0.5.0",
    "0.6.0",
    "0.6.1",
    "0.7.0",
    "0.8.0",
    "0.8.1",
    "0.9.0",
    "1.0",
    "1.1.0",
    "1.1.1",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.3.0",
    "1.3.1",
    "1.3.2",
    "1.3.3",
    "1.4.0",
    "1.4.1",
    "1.4.2",
    "1.5.0",
    "1.5.1",
    "1.5.2"
  ]
}