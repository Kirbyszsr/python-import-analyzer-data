{
  "name": "sphinxcontrib-napoleon",
  "description": "Napoleon - *Marching toward legible docstrings*\n===============================================\n\n.. note:: As of Sphinx 1.3, the napoleon extension will come packaged with\n   Sphinx under `sphinx.ext.napoleon`. The `sphinxcontrib.napoleon` extension\n   will continue to work with Sphinx <= 1.2.\n\nAre you tired of writing docstrings that look like this::\n\n    :param path: The path of the file to wrap\n    :type path: str\n    :param field_storage: The :class:`FileStorage` instance to wrap\n    :type field_storage: FileStorage\n    :param temporary: Whether or not to delete the file when the File\n       instance is destructed\n    :type temporary: bool\n    :returns: A buffered writable file descriptor\n    :rtype: BufferedFileStorage\n\n`ReStructuredText`_ is great, but it creates visually dense, hard to read\n`docstrings`_. Compare the jumble above to the same thing rewritten\naccording to the `Google Python Style Guide`_::\n\n    Args:\n        path (str): The path of the file to wrap\n        field_storage (FileStorage): The :class:`FileStorage` instance to wrap\n        temporary (bool): Whether or not to delete the file when the File\n           instance is destructed\n\n    Returns:\n        BufferedFileStorage: A buffered writable file descriptor\n\nMuch more legible, no?\n\nNapoleon is a `Sphinx extension`_ that enables Sphinx to parse both `NumPy`_\nand `Google`_ style docstrings - the style recommended by `Khan Academy`_.\n\nNapoleon is a pre-processor that parses `NumPy`_ and `Google`_ style\ndocstrings and converts them to reStructuredText before Sphinx attempts to\nparse them. This happens in an intermediate step while Sphinx is processing\nthe documentation, so it doesn't modify any of the docstrings in your actual\nsource code files.\n\n.. _ReStructuredText: http://docutils.sourceforge.net/rst.html\n.. _docstrings: http://www.python.org/dev/peps/pep-0287/\n.. _Google Python Style Guide:\n   http://google.github.io/styleguide/pyguide.html\n.. _Sphinx extension: http://sphinx-doc.org/extensions.html\n.. _Google:\n   http://google.github.io/styleguide/pyguide.html#Comments\n.. _NumPy:\n   https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n.. _Khan Academy:\n   https://sites.google.com/a/khanacademy.org/forge/for-developers/styleguide/python#TOC-Docstrings\n\nGetting Started\n---------------\n\n1. Install the napoleon extension::\n\n       $ pip install sphinxcontrib-napoleon\n\n2. After `setting up Sphinx`_ to build your docs, enable napoleon in the\n   Sphinx `conf.py` file::\n\n       # conf.py\n\n       # Add napoleon to the extensions list\n       extensions = ['sphinxcontrib.napoleon']\n\n2. Use `sphinx-apidoc` to build your API documentation::\n\n       $ sphinx-apidoc -f -o docs/source projectdir\n\n.. _setting up Sphinx: http://sphinx-doc.org/tutorial.html\n\nDocstrings\n----------\n\nNapoleon interprets every docstring that `Sphinx autodoc`_ can find,\nincluding docstrings on: ``modules``, ``classes``, ``attributes``,\n``methods``, ``functions``, and ``variables``. Inside each docstring,\nspecially formatted `Sections`_ are parsed and converted to\nreStructuredText.\n\nAll standard reStructuredText formatting still works as expected.\n\n.. _Sphinx autodoc: http://sphinx-doc.org/ext/autodoc.html\n\n\n.. _Sections:\n\nDocstring Sections\n------------------\n\nAll of the following section headers are supported:\n\n    * ``Args`` *(alias of Parameters)*\n    * ``Arguments`` *(alias of Parameters)*\n    * ``Attributes``\n    * ``Example``\n    * ``Examples``\n    * ``Keyword Args`` *(alias of Keyword Arguments)*\n    * ``Keyword Arguments``\n    * ``Methods``\n    * ``Note``\n    * ``Notes``\n    * ``Other Parameters``\n    * ``Parameters``\n    * ``Return`` *(alias of Returns)*\n    * ``Returns``\n    * ``Raises``\n    * ``References``\n    * ``See Also``\n    * ``Warning``\n    * ``Warnings`` *(alias of Warning)*\n    * ``Warns``\n    * ``Yield`` *(alias of Yields)*\n    * ``Yields``\n\nGoogle vs NumPy\n---------------\n\nNapoleon supports two styles of docstrings: `Google`_ and `NumPy`_. The\nmain difference between the two styles is that Google uses indention to\nseparate sections, whereas NumPy uses underlines.\n\nGoogle style::\n\n    def func(arg1, arg2):\n        \"\"\"Summary line.\n\n        Extended description of function.\n\n        Args:\n            arg1 (int): Description of arg1\n            arg2 (str): Description of arg2\n\n        Returns:\n            bool: Description of return value\n\n        \"\"\"\n        return True\n\nNumPy style::\n\n    def func(arg1, arg2):\n        \"\"\"Summary line.\n\n        Extended description of function.\n\n        Parameters\n        ----------\n        arg1 : int\n            Description of arg1\n        arg2 : str\n            Description of arg2\n\n        Returns\n        -------\n        bool\n            Description of return value\n\n        \"\"\"\n        return True\n\nNumPy style tends to require more vertical space, whereas Google style\ntends to use more horizontal space. Google style tends to be easier to\nread for short and simple docstrings, whereas NumPy style tends be easier\nto read for long and in-depth docstrings.\n\nThe `Khan Academy`_ recommends using Google style.\n\nThe choice between styles is largely aesthetic, but the two styles should\nnot be mixed. Choose one style for your project and be consistent with it.\n\n\nFor full documentation see https://sphinxcontrib-napoleon.readthedocs.io\n\n\n",
  "requires_dist": [
    "six (>=1.5.2)",
    "pockets (>=0.3)"
  ],
  "requires_python": "",
  "current_version": "0.7",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.1dev-20130718",
    "0.2",
    "0.2.1",
    "0.2.10",
    "0.2.11",
    "0.2.2",
    "0.2.3",
    "0.2.4",
    "0.2.5",
    "0.2.6",
    "0.2.7",
    "0.2.8",
    "0.2.9",
    "0.3",
    "0.3.1",
    "0.3.10",
    "0.3.11",
    "0.3.2",
    "0.3.3",
    "0.3.4",
    "0.3.5",
    "0.3.6",
    "0.3.7",
    "0.3.8",
    "0.3.9",
    "0.4",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.4.4",
    "0.5.0",
    "0.5.1",
    "0.5.2",
    "0.5.3",
    "0.5.4",
    "0.6.0",
    "0.6.1",
    "0.7"
  ]
}