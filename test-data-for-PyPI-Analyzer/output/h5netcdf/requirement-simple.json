{
  "name": "h5netcdf",
  "description": "h5netcdf\n========\n\n.. image:: https://github.com/h5netcdf/h5netcdf/workflows/CI/badge.svg\n    :target: https://github.com/h5netcdf/h5netcdf/actions\n.. image:: https://badge.fury.io/py/h5netcdf.svg\n    :target: https://pypi.python.org/pypi/h5netcdf/\n\nA Python interface for the netCDF4_ file-format that reads and writes local or\nremote HDF5 files directly via h5py_ or h5pyd_, without relying on the Unidata\nnetCDF library.\n\n.. _netCDF4: http://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html#netcdf_4_spec\n.. _h5py: http://www.h5py.org/\n.. _h5pyd: https://github.com/HDFGroup/h5pyd\n\nWhy h5netcdf?\n-------------\n\n- It has one less binary dependency (netCDF C). If you already have h5py\n  installed, reading netCDF4 with h5netcdf may be much easier than installing\n  netCDF4-Python.\n- We've seen occasional reports of better performance with h5py than\n  netCDF4-python, though in many cases performance is identical. For\n  `one workflow`_, h5netcdf was reported to be almost **4x faster** than\n  `netCDF4-python`_.\n- Anecdotally, HDF5 users seem to be unexcited about switching to netCDF --\n  hopefully this will convince them that netCDF4 is actually quite sane!\n- Finally, side-stepping the netCDF C library (and Cython bindings to it)\n  gives us an easier way to identify the source of performance issues and\n  bugs in the netCDF libraries/specification.\n\n.. _one workflow: https://github.com/Unidata/netcdf4-python/issues/390#issuecomment-93864839\n.. _xarray: http://github.com/pydata/xarray/\n\nInstall\n-------\n\nEnsure you have a recent version of h5py installed (I recommend using conda_).\nAt least version 2.1 is required (for dimension scales); versions 2.3 and newer\nhave been verified to work, though some tests only pass on h5py 2.6. Then:\n``pip install h5netcdf``\n\n.. _conda: http://conda.io/\n\nUsage\n-----\n\nh5netcdf has two APIs, a new API and a legacy API. Both interfaces currently\nreproduce most of the features of the netCDF interface, with the notable\nexception of support for operations the rename or delete existing objects.\nWe simply haven't gotten around to implementing this yet. Patches\nwould be very welcome.\n\nNew API\n~~~~~~~\n\nThe new API supports direct hierarchical access of variables and groups. Its\ndesign is an adaptation of h5py to the netCDF data model. For example:\n\n.. code-block:: python\n\n    import h5netcdf\n    import numpy as np\n\n    with h5netcdf.File('mydata.nc', 'w') as f:\n        # set dimensions with a dictionary\n        f.dimensions = {'x': 5}\n        # and update them with a dict-like interface\n        # f.dimensions['x'] = 5\n        # f.dimensions.update({'x': 5})\n\n        v = f.create_variable('hello', ('x',), float)\n        v[:] = np.ones(5)\n\n        # you don't need to create groups first\n        # you also don't need to create dimensions first if you supply data\n        # with the new variable\n        v = f.create_variable('/grouped/data', ('y',), data=np.arange(10))\n\n        # access and modify attributes with a dict-like interface\n        v.attrs['foo'] = 'bar'\n\n        # you can access variables and groups directly using a hierarchical\n        # keys like h5py\n        print(f['/grouped/data'])\n\n        # add an unlimited dimension\n        f.dimensions['z'] = None\n        # explicitly resize a dimension and all variables using it\n        f.resize_dimension('z', 3)\n\nLegacy API\n~~~~~~~~~~\n\nThe legacy API is designed for compatibility with netCDF4-python_. To use it, import\n``h5netcdf.legacyapi``:\n\n.. _netCDF4-python: https://github.com/Unidata/netcdf4-python\n\n.. code-block:: python\n\n    import h5netcdf.legacyapi as netCDF4\n    # everything here would also work with this instead:\n    # import netCDF4\n    import numpy as np\n\n    with netCDF4.Dataset('mydata.nc', 'w') as ds:\n        ds.createDimension('x', 5)\n        v = ds.createVariable('hello', float, ('x',))\n        v[:] = np.ones(5)\n\n        g = ds.createGroup('grouped')\n        g.createDimension('y', 10)\n        g.createVariable('data', 'i8', ('y',))\n        v = g['data']\n        v[:] = np.arange(10)\n        v.foo = 'bar'\n        print(ds.groups['grouped'].variables['data'])\n\nThe legacy API is designed to be easy to try-out for netCDF4-python users, but it is not an\nexact match. Here is an incomplete list of functionality we don't include:\n\n- Utility functions ``chartostring``, ``num2date``, etc., that are not directly necessary\n  for writing netCDF files.\n- We don't support the ``endian`` argument to ``createVariable`` yet (see `GitHub issue`_).\n- h5netcdf variables do not support automatic masking or scaling (e.g., of values matching\n  the ``_FillValue`` attribute). We prefer to leave this functionality to client libraries\n  (e.g., xarray_), which can implement their exact desired scaling behavior.\n- No support yet for automatic resizing of unlimited dimensions with array\n  indexing. This would be a welcome pull request. For now, dimensions can be\n  manually resized with ``Group.resize_dimension(dimension, size)``.\n\n.. _GitHub issue: https://github.com/h5netcdf/h5netcdf/issues/15\n\nInvalid netCDF files\n~~~~~~~~~~~~~~~~~~~~\n\nh5py implements some features that do not (yet) result in valid netCDF files:\n\n- Data types:\n    - Booleans\n    - Complex values\n    - Non-string variable length types\n    - Enum types\n    - Reference types\n- Arbitrary filters:\n    - Scale-offset filters\n\nBy default [*]_, h5netcdf will not allow writing files using any of these features,\nas files with such features are not readable by other netCDF tools.\n\nHowever, these are still valid HDF5 files. If you don't care about netCDF\ncompatibility, you can use these features by setting ``invalid_netcdf=True``\nwhen creating a file:\n\n.. code-block:: python\n\n  # avoid the .nc extension for non-netcdf files\n  f = h5netcdf.File('mydata.h5', invalid_netcdf=True)\n  ...\n\n  # works with the legacy API, too, though compression options are not exposed\n  ds = h5netcdf.legacyapi.Dataset('mydata.h5', invalid_netcdf=True)\n  ...\n\n.. [*] Currently, we only issue a warning, but in a future version of h5netcdf,\n       we will raise ``h5netcdf.CompatibilityError``. Use\n       ``invalid_netcdf=False`` to switch to the new behavior now.\n\nDecoding variable length strings\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nh5py 3.0 introduced `new behavior`_ for handling variable length string.\nInstead of being automatically decoded with UTF-8 into NumPy arrays of ``str``,\nthey are required as arrays of ``bytes``.\n\nThe legacy API preserves the old behavior of h5py (which matches netCDF4),\nand automatically decodes strings.\n\nThe new API *also* currently preserves the old behavior of h5py, but issues a\nwarning that it will change in the future to match h5py. Explicitly set\n``decode_vlen_strings=False`` in the ``h5netcdf.File`` constructor to opt-in to\nthe new behavior early, or set ``decode_vlen_strings=True`` to opt-in to\nautomatic decoding.\n\n.. _new behavior: https://docs.h5py.org/en/stable/strings.html\n\nDatasets with missing dimension scales\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default [*]_ h5netcdf raises a ``ValueError`` if variables with no dimension\nscale associated with one of their axes are accessed.\nYou can set ``phony_dims='sort'`` when opening a file to let h5netcdf invent\nphony dimensions according to `netCDF`_ behaviour.\n\n.. code-block:: python\n\n  # mimic netCDF-behaviour for non-netcdf files\n  f = h5netcdf.File('mydata.h5', mode='r', phony_dims='sort')\n  ...\n\nNote, that this iterates once over the whole group-hierarchy. This has affects\non performance in case you rely on lazyness of group access.\nYou can set ``phony_dims='access'`` instead to defer phony dimension creation\nto group access time. The created phony dimension naming will differ from\n`netCDF`_ behaviour.\n\n.. code-block:: python\n\n  f = h5netcdf.File('mydata.h5', mode='r', phony_dims='access')\n  ...\n\n.. _netCDF: https://www.unidata.ucar.edu/software/netcdf/docs/interoperability_hdf5.html\n.. [*] Keyword default setting ``phony_dims=None`` for backwards compatibility.\n\nChangelog\n---------\n\n`Changelog`_\n\n.. _Changelog: https://github.com/h5netcdf/h5netcdf/blob/master/CHANGELOG.rst\n\nLicense\n-------\n\n`3-clause BSD`_\n\n.. _3-clause BSD: https://github.com/h5netcdf/h5netcdf/blob/master/LICENSE\n\n\n",
  "requires_dist": [
    "h5py"
  ],
  "requires_python": ">=3.6",
  "current_version": "0.11.0",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.1.2",
    "0.1.3",
    "0.1.dev0",
    "0.10.0",
    "0.11.0",
    "0.2.0",
    "0.2.1",
    "0.2.2",
    "0.3.0",
    "0.3.1",
    "0.4.0",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.5.0",
    "0.5.1",
    "0.6.0",
    "0.6.1",
    "0.6.2",
    "0.7.0",
    "0.7.1",
    "0.7.3",
    "0.7.4",
    "0.8.0",
    "0.8.1",
    "0.9.0"
  ]
}