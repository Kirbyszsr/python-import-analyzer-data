{
  "name": "flake8-comprehensions",
  "description": "=====================\nflake8-comprehensions\n=====================\n\n.. image:: https://img.shields.io/github/workflow/status/adamchainz/flake8-comprehensions/CI/main?style=for-the-badge\n   :target: https://github.com/adamchainz/flake8-comprehensions/actions?workflow=CI\n\n.. image:: https://img.shields.io/pypi/v/flake8-comprehensions.svg?style=for-the-badge\n   :target: https://pypi.org/project/flake8-comprehensions/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n   :target: https://github.com/psf/black\n\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n   :target: https://github.com/pre-commit/pre-commit\n   :alt: pre-commit\n\nA `flake8 <https://flake8.readthedocs.io/en/latest/index.html>`_ plugin that helps you write better list/set/dict comprehensions.\n\nRequirements\n============\n\nPython 3.6 to 3.10 supported.\n\nInstallation\n============\n\nFirst, install with ``pip``:\n\n.. code-block:: sh\n\n     python -m pip install flake8-comprehensions\n\nSecond, check that ``flake8`` lists the plugin in its version line:\n\n.. code-block:: sh\n\n    $ flake8 --version\n    3.7.8 (flake8-comprehensions: 3.0.0, mccabe: 0.6.1, pycodestyle: 2.5.0, pyflakes: 2.1.1) CPython 3.8.0 on Linux\n\nThird, add the ``C4`` prefix to your `select list <https://flake8.pycqa.org/en/latest/user/options.html#cmdoption-flake8-select>`__.\nFor example, if you have your configuration in ``setup.cfg``:\n\n.. code-block:: ini\n\n    [flake8]\n    select = E,F,W,C4\n\n----\n\n**Linting a Django project?**\nCheck out my book `Speed Up Your Django Tests <https://gumroad.com/l/suydt>`__ which covers loads of best practices so you can write faster, more accurate tests.\n\n----\n\nRules\n=====\n\nC400-402: Unnecessary generator - rewrite as a ``<list/set/dict>`` comprehension.\n---------------------------------------------------------------------------------\n\nIt's unnecessary to use ``list``, ``set``, or ``dict`` around a generator expression, since there are equivalent comprehensions for these types.\nFor example:\n\n* Rewrite ``list(f(x) for x in foo)`` as ``[f(x) for x in foo]``\n* Rewrite ``set(f(x) for x in foo)`` as ``{f(x) for x in foo}``\n* Rewrite ``dict((x, f(x)) for x in foo)`` as ``{x: f(x) for x in foo}``\n\nC403-404: Unnecessary list comprehension - rewrite as a ``<set/dict>`` comprehension.\n-------------------------------------------------------------------------------------\n\nIt's unnecessary to use a list comprehension inside a call to ``set`` or ``dict``, since there are equivalent comprehensions for these types.\nFor example:\n\n* Rewrite ``set([f(x) for x in foo])`` as ``{f(x) for x in foo}``\n* Rewrite ``dict([(x, f(x)) for x in foo])`` as ``{x: f(x) for x in foo}``\n\nC405-406: Unnecessary ``<list/tuple>`` literal - rewrite as a ``<set/dict>`` literal.\n-------------------------------------------------------------------------------------\n\nIt's unnecessary to use a list or tuple literal within a call to ``set`` or ``dict``.\nFor example:\n\n* Rewrite ``set([1, 2])`` as ``{1, 2}``\n* Rewrite  ``set((1, 2))`` as ``{1, 2}``\n* Rewrite ``set([])`` as ``set()``\n* Rewrite ``dict([(1, 2)])`` as ``{1: 2}``\n* Rewrite ``dict(((1, 2),))`` as ``{1: 2}``\n* Rewrite ``dict([])`` as ``{}``\n\nC408: Unnecessary ``<dict/list/tuple>`` call - rewrite as a literal.\n--------------------------------------------------------------------\n\nIt's slower to call e.g. ``dict()`` than using the empty literal, because the name ``dict`` must be looked up in the global scope in case it has been rebound.\nSame for the other two basic types here.\nFor example:\n\n* Rewrite ``dict()`` as ``{}``\n* Rewrite ``dict(a=1, b=2)`` as ``{\"a\": 1, \"b\": 2}``\n* Rewrite ``list()`` as ``[]``\n* Rewrite ``tuple()`` as ``()``\n\nC409-410: Unnecessary ``<list/tuple>`` passed to ``<list/tuple>``\\() - (remove the outer call to ``<list/tuple>``()/rewrite as a ``<list/tuple>`` literal).\n-----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIt's unnecessary to use a list or tuple literal within a call to ``list`` or ``tuple``, since there is literal syntax for these types.\nFor example:\n\n* Rewrite ``tuple([1, 2])`` as ``(1, 2)``\n* Rewrite ``tuple((1, 2))`` as ``(1, 2)``\n* Rewrite ``tuple([])`` as ``()``\n* Rewrite ``list([1, 2])`` as ``[1, 2]``\n* Rewrite ``list((1, 2))`` as ``[1, 2]``\n* Rewrite ``list([])`` as ``[]``\n\nC411: Unnecessary list call - remove the outer call to list().\n--------------------------------------------------------------\n\nIt's unnecessary to use a ``list`` around a list comprehension, since it is equivalent without it.\nFor example:\n\n* Rewrite ``list([f(x) for x in foo])`` as ``[f(x) for x in foo]``\n\nC413: Unnecessary ``<list/reversed>`` call around sorted().\n-----------------------------------------------------------\n\nIt's unnecessary to use ``list()`` around ``sorted()`` as it already returns a list.\nIt is also unnecessary to use ``reversed()`` around ``sorted()`` as the latter has a ``reverse`` argument.\nFor example:\n\n* Rewrite ``list(sorted([2, 3, 1]))`` as ``sorted([2, 3, 1])``\n* Rewrite ``reversed(sorted([2, 3, 1]))`` as ``sorted([2, 3, 1], reverse=True)``\n* Rewrite ``reversed(sorted([2, 3, 1], reverse=True))`` as ``sorted([2, 3, 1])``\n\nC414: Unnecessary ``<list/reversed/set/sorted/tuple>`` call within ``<list/set/sorted/tuple>``\\().\n--------------------------------------------------------------------------------------------------\n\nIt's unnecessary to double-cast or double-process iterables by wrapping the listed functions within ``list``/``set``/``sorted``/``tuple``.\nFor example:\n\n* Rewrite ``list(list(iterable))`` as ``list(iterable)``\n* Rewrite ``list(tuple(iterable))`` as ``list(iterable)``\n* Rewrite ``tuple(list(iterable))`` as ``tuple(iterable)``\n* Rewrite ``tuple(tuple(iterable))`` as ``tuple(iterable)``\n* Rewrite ``set(set(iterable))`` as ``set(iterable)``\n* Rewrite ``set(list(iterable))`` as ``set(iterable)``\n* Rewrite ``set(tuple(iterable))`` as ``set(iterable)``\n* Rewrite ``set(sorted(iterable))`` as ``set(iterable)``\n* Rewrite ``set(reversed(iterable))`` as ``set(iterable)``\n* Rewrite ``sorted(list(iterable))`` as ``sorted(iterable)``\n* Rewrite ``sorted(tuple(iterable))`` as ``sorted(iterable)``\n* Rewrite ``sorted(sorted(iterable))`` as ``sorted(iterable)``\n* Rewrite ``sorted(reversed(iterable))`` as ``sorted(iterable)``\n\nC415: Unnecessary subscript reversal of iterable within ``<reversed/set/sorted>``\\().\n-------------------------------------------------------------------------------------\n\nIt's unnecessary to reverse the order of an iterable when passing it into one of the listed functions will change the order again.\nFor example:\n\n* Rewrite ``set(iterable[::-1])`` as ``set(iterable)``\n* Rewrite ``sorted(iterable[::-1])`` as ``sorted(iterable, reverse=True)``\n* Rewrite ``reversed(iterable[::-1])`` as ``iterable``\n\nC416: Unnecessary ``<list/set>`` comprehension - rewrite using ``<list/set>``\\().\n---------------------------------------------------------------------------------\n\nIt's unnecessary to use a list comprehension if the elements are unchanged.\nThe iterable should be wrapped in ``list()`` or ``set()`` instead.\nFor example:\n\n* Rewrite ``[x for x in iterable]`` as ``list(iterable)``\n* Rewrite ``{x for x in iterable}`` as ``set(iterable)``\n\n\n",
  "requires_dist": [
    "flake8 (!=3.2.0,<4,>=3.0)",
    "importlib-metadata ; python_version < \"3.8\""
  ],
  "requires_python": ">=3.6",
  "current_version": "3.5.0",
  "released_versions": [
    "1.0.0",
    "1.1.0",
    "1.1.1",
    "1.2.0",
    "1.2.1",
    "1.3.0",
    "1.4.0",
    "1.4.1",
    "2.0.0",
    "2.1.0",
    "2.2.0",
    "2.3.0",
    "3.0.0",
    "3.0.1",
    "3.1.0",
    "3.1.1",
    "3.1.2",
    "3.1.3",
    "3.1.4",
    "3.2.0",
    "3.2.1",
    "3.2.2",
    "3.2.3",
    "3.3.0",
    "3.3.1",
    "3.4.0",
    "3.5.0"
  ]
}