{
  "name": "radon",
  "description": "Radon\n=====\n\n.. image:: https://img.shields.io/codacy/grade/623b84f5f6e6708c486f371e10da3610.svg?style=for-the-badge\n   :alt: Codacy badge\n   :target: https://www.codacy.com/app/rubik/radon/dashboard\n\n.. image:: https://img.shields.io/travis/rubik/radon/master.svg?style=for-the-badge\n    :alt: Travis-CI badge\n    :target: https://travis-ci.org/rubik/radon\n\n.. image:: https://img.shields.io/coveralls/rubik/radon/master.svg?style=for-the-badge\n    :alt: Coveralls badge\n    :target: https://coveralls.io/r/rubik/radon?branch=master\n\n.. image:: https://img.shields.io/pypi/v/radon.svg?style=for-the-badge\n    :alt: PyPI latest version badge\n    :target: https://pypi.python.org/pypi/radon\n\n.. image:: https://img.shields.io/pypi/l/radon.svg?style=for-the-badge\n    :alt: Radon license\n    :target: https://pypi.python.org/pypi/radon\n\n\n----\n\nRadon is a Python tool that computes various metrics from the source code.\nRadon can compute:\n\n* **McCabe's complexity**, i.e. cyclomatic complexity\n* **raw** metrics (these include SLOC, comment lines, blank lines, &c.)\n* **Halstead** metrics (all of them)\n* **Maintainability Index** (the one used in Visual Studio)\n\nRequirements\n------------\n\nRadon will run from **Python 2.7** to **Python 3.8** (except Python versions\nfrom 3.0 to 3.3) with a single code base and without the need of tools like\n2to3 or six. It can also run on **PyPy** without any problems (currently PyPy\n3.5 v7.3.1 is used in tests).\n\nRadon depends on as few packages as possible. Currently only `mando` is\nstrictly required (for the CLI interface). `colorama` is also listed as a\ndependency but if Radon cannot import it, the output simply will not be\ncolored.\n\n**Note**:\n**Python 2.6** was supported until version 1.5.0. Starting from version 2.0, it\nis not supported anymore.\n\nInstallation\n------------\n\nWith Pip:\n\n.. code-block:: sh\n\n    $ pip install radon\n\nOr download the source and run the setup file:\n\n.. code-block:: sh\n\n    $ python setup.py install\n\nUsage\n-----\n\nRadon can be used either from the command line or programmatically.\nDocumentation is at https://radon.readthedocs.org/.\n\nCyclomatic Complexity Example\n-----------------------------\n\nQuick example:\n\n.. code-block:: sh\n\n    $ radon cc sympy/solvers/solvers.py -a -nc\n    sympy/solvers/solvers.py\n        F 346:0 solve - F\n        F 1093:0 _solve - F\n        F 1434:0 _solve_system - F\n        F 2647:0 unrad - F\n        F 110:0 checksol - F\n        F 2238:0 _tsolve - F\n        F 2482:0 _invert - F\n        F 1862:0 solve_linear_system - E\n        F 1781:0 minsolve_linear_system - D\n        F 1636:0 solve_linear - D\n        F 2382:0 nsolve - C\n\n    11 blocks (classes, functions, methods) analyzed.\n    Average complexity: F (61.0)\n\nExplanation:\n\n* ``cc`` is the radon command to compute Cyclomatic Complexity\n* ``-a`` tells radon to calculate the average complexity at the end. Note that\n  the average is computed among the *shown* blocks. If you want the total\n  average, among all the blocks, regardless of what is being shown, you should\n  use ``--total-average``.\n* ``-nc`` tells radon to print only results with a complexity rank of C or\n  worse. Other examples: ``-na`` (from A to F), or ``-nd`` (from D to F).\n* The letter *in front of* the line numbers represents the type of the block\n  (**F** means function, **M** method and **C** class).\n\nActually it's even better: it's got colors!\n\n.. image:: https://cloud.githubusercontent.com/assets/238549/3707477/5793aeaa-1435-11e4-98fb-00e0bd8137f5.png\n    :alt: A screen of Radon's cc command\n\n\n**Note about file encoding**\n\nOn some systems, such as Windows, the default encoding is not UTF-8. If you are\nusing Unicode characters in your Python file and want to analyze it with Radon,\nyou'll have to set the `RADONFILESENCODING` environment variable to `UTF-8`.\n\n\nOn a Continuous Integration server\n----------------------------------\n\nIf you are looking to use `radon` on a CI server you may be better off with\n`xenon <https://github.com/rubik/xenon>`_. Although still experimental, it will\nfail (that means exiting with a non-zero exit code) when various thresholds are\nsurpassed. `radon` is more of a reporting tool, while `xenon` is a monitoring\none.\n\nIf you are looking for more complete solutions, read the following sections.\n\nCodacy\n++++++++++++\n\n`Codacy <https://www.codacy.com/>`_ uses Radon `by default <https://support.codacy.com/hc/en-us/articles/213632009-Engines#other-tools>`_ to calculate metrics from the source code.\n\nCode Climate\n++++++++++++\n\nRadon is available as a `Code Climate Engine <https://docs.codeclimate.com/docs/list-of-engines>`_.\nTo understand how to add Radon's checks to your Code Climate Platform, head\nover to their documentation:\nhttps://docs.codeclimate.com/v1.0/docs/radon\n\ncoala Analyzer\n++++++++++++++\n\nRadon is also supported in `coala <http://coala.io/>`_. To add Radon's\nchecks to coala, simply add the ``RadonBear`` to one of the sections in\nyour ``.coafile``.\n\nCodeFactor\n++++++++++++\n\n`CodeFactor <https://www.codefactor.io/>`_ uses Radon `out-of-the-box <https://support.codefactor.io/i24-analysis-tools-open-source>`_ to calculate Cyclomatic Complexity.\n\nUsage with Jupyter Notebooks\n----------------------------\n\nRadon can be used with ``.ipynb`` files to inspect code metrics for Python cells. Any ``%`` macros will be ignored in the metrics.\n\n.. note::\n\n   Jupyter Notebook support requires the optional ``nbformat`` package. To install, run ``pip install nbformat``.\n\nTo enable scanning of Jupyter notebooks, add the ``--include-ipynb`` flag.\n\nTo enable reporting of individual cells, add the ``--ipynb-cells`` flag.\n\nQuick example:\n\n.. code-block:: sh\n\n    $ radon raw --include-ipynb --ipynb-cells .\n    example.ipynb\n        LOC: 63\n        LLOC: 37\n        SLOC: 37\n        Comments: 3\n        Single comments: 2\n        Multi: 10\n        Blank: 14\n        - Comment Stats\n            (C % L): 5%\n            (C % S): 8%\n            (C + M % L): 21%\n    example.ipynb:[0]\n        LOC: 0\n        LLOC: 0\n        SLOC: 0\n        Comments: 0\n        Single comments: 0\n        Multi: 0\n        Blank: 0\n        - Comment Stats\n            (C % L): 0%\n            (C % S): 0%\n            (C + M % L): 0%\n    example.ipynb:[1]\n        LOC: 2\n        LLOC: 2\n        SLOC: 2\n        Comments: 0\n        Single comments: 0\n        Multi: 0\n        Blank: 0\n        - Comment Stats\n            (C % L): 0%\n            (C % S): 0%\n            (C + M % L): 0%\n\n\n\nLinks\n-----\n\n* Documentation: https://radon.readthedocs.org\n* PyPI: http://pypi.python.org/pypi/radon\n* Issue Tracker: https://github.com/rubik/radon/issues\n\n\n",
  "requires_dist": [
    "mando (<0.7,>=0.6)",
    "future",
    "colorama (==0.4.1) ; python_version <= \"3.4\"",
    "colorama (>=0.4.1) ; python_version > \"3.4\"",
    "flake8-polyfill ; extra == 'flake8'"
  ],
  "requires_python": "",
  "current_version": "4.5.0",
  "released_versions": [
    "0.1",
    "0.2",
    "0.3",
    "0.3.1",
    "0.4",
    "0.4.1",
    "0.4.2",
    "0.4.3",
    "0.4.4",
    "0.4.5",
    "0.5",
    "0.5.1",
    "0.5.2",
    "0.5.3",
    "1.0",
    "1.1",
    "1.1.1",
    "1.2",
    "1.2.1",
    "1.2.2",
    "1.2.3",
    "1.3.0",
    "1.3.1",
    "1.3.2",
    "1.4.0",
    "1.4.2",
    "1.5.0",
    "2.0.0",
    "2.0.1",
    "2.0.2",
    "2.0.3",
    "2.1.1",
    "2.2.0",
    "2.3.0",
    "2.3.1",
    "2.4.0",
    "3.0.0",
    "3.0.1",
    "3.0.2",
    "3.0.3",
    "4.0.0",
    "4.1.0",
    "4.2.0",
    "4.3.1",
    "4.3.2",
    "4.4.0",
    "4.5.0"
  ]
}