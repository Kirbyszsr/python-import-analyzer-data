{
  "name": "mando",
  "description": "mando: CLI interfaces for Humans!\n=================================\n\n.. image:: https://img.shields.io/travis/rubik/mando\n    :alt: Travis-CI badge\n    :target: https://travis-ci.org/rubik/mando\n\n.. image:: https://img.shields.io/coveralls/rubik/mando\n    :alt: Coveralls badge\n    :target: https://coveralls.io/r/rubik/mando\n\n.. image:: https://img.shields.io/pypi/implementation/mando?label=%20&logo=python&logoColor=white\n    :alt: PyPI - Implementation\n\n.. image:: https://img.shields.io/pypi/v/mando\n    :alt: Latest release\n    :target: https://pypi.python.org/pypi/mando\n\n.. image:: https://img.shields.io/pypi/l/mando\n    :alt: PyPI - License\n    :target: https://pypi.org/project/mando/\n\n.. image:: https://img.shields.io/pypi/pyversions/mando\n    :alt: PyPI - Python Version\n    :target: https://pypi.org/project/mando/\n\n.. image:: https://img.shields.io/pypi/format/mando\n    :alt: Download format\n    :target: http://pythonwheels.com/\n\n\nmando is a wrapper around ``argparse``, and allows you to write complete CLI\napplications in seconds while maintaining all the flexibility.\n\nInstallation\n------------\n\n.. code-block:: console\n\n    $ pip install mando\n\nThe problem\n-----------\n\nWhile ``argparse`` is great for simple command line applications with only\none, default command, when you have to add multiple commands and manage them\nthings get really messy and long. But don't worry, mando comes to help!\n\nQuickstart\n----------\n\n.. code-block:: python\n\n    from mando import command, main\n\n    @command\n    def echo(text, capitalize=False):\n        '''Echo the given text.'''\n        if capitalize:\n            text = text.upper()\n        print(text)\n\n    if __name__ == '__main__':\n        main()\n\nGenerated help:\n\n.. code-block:: console\n\n    $ python example.py -h\n    usage: example.py [-h] {echo} ...\n\n    positional arguments:\n      {echo}\n        echo      Echo the given text.\n\n    optional arguments:\n      -h, --help  show this help message and exit\n\n    $ python example.py echo -h\n    usage: example.py echo [-h] [--capitalize] text\n\n    Echo the given text.\n\n    positional arguments:\n      text\n\n    optional arguments:\n      -h, --help    show this help message and exit\n      --capitalize\n\nActual usage:\n\n.. code-block:: console\n\n    $ python example.py echo spam\n    spam\n    $ python example.py echo --capitalize spam\n    SPAM\n\n\nA *real* example\n----------------\n\nSomething more complex and real-world-*ish*. The code:\n\n.. code-block:: python\n\n    from mando import command, main\n\n\n    @command\n    def push(repository, all=False, dry_run=False, force=False, thin=False):\n        '''Update remote refs along with associated objects.\n\n        :param repository: Repository to push to.\n        :param --all: Push all refs.\n        :param -n, --dry-run: Dry run.\n        :param -f, --force: Force updates.\n        :param --thin: Use thin pack.'''\n\n        print ('Pushing to {0}. All: {1}, dry run: {2}, force: {3}, thin: {4}'\n               .format(repository, all, dry_run, force, thin))\n\n\n    if __name__ == '__main__':\n        main()\n\nmando understands Sphinx-style ``:param:``'s in the docstring, so it creates\nshort options and their help for you.\n\n.. code-block:: console\n\n    $ python git.py push -h\n    usage: git.py push [-h] [--all] [-n] [-f] [--thin] repository\n\n    Update remote refs along with associated objects.\n\n    positional arguments:\n      repository     Repository to push to.\n\n    optional arguments:\n      -h, --help     show this help message and exit\n      --all          Push all refs.\n      -n, --dry-run  Dry run.\n      -f, --force    Force updates.\n      --thin         Use thin pack.\n\nLet's try it!\n\n.. code-block:: console\n\n    $ python git.py push --all myrepo\n    Pushing to myrepo. All: True, dry run: False, force: False, thin: False\n    $ python git.py push --all -f myrepo\n    Pushing to myrepo. All: True, dry run: False, force: True, thin: False\n    $ python git.py push --all -fn myrepo\n    Pushing to myrepo. All: True, dry run: True, force: True, thin: False\n    $ python git.py push --thin -fn myrepo\n    Pushing to myrepo. All: False, dry run: True, force: True, thin: True\n    $ python git.py push --thin\n    usage: git.py push [-h] [--all] [-n] [-f] [--thin] repository\n    git.py push: error: too few arguments\n\nAmazed uh? Yes, mando got the short options and the help from the docstring!\nYou can put much more in the docstring, and if that isn't enough, there's an\n``@arg`` decorator to customize the arguments that get passed to argparse.\n\n\nType annotations\n----------------\n\nmando understands Python 3-style type annotations and will warn the user if the\narguments given to a command are of the wrong type.\n\n.. code-block:: python\n\n    from mando import command, main\n\n\n    @command\n    def duplicate(string, times: int):\n        '''Duplicate text.\n\n        :param string: The text to duplicate.\n        :param times: How many times to duplicate.'''\n\n        print(string * times)\n\n\n    if __name__ == '__main__':\n        main()\n\n.. code-block:: console\n\n    $ python3 test.py duplicate \"test \" 5\n    test test test test test\n    $ python3 test.py duplicate \"test \" foo\n    usage: test.py duplicate [-h] string times\n    test.py duplicate: error: argument times: invalid int value: 'foo'\n\n\nMando has lots of other options. For example, it supports different docstring\nstyles (Sphinx, Google and NumPy), supports shell autocompletion via the\n``argcomplete`` package and supports custom format classes. For a complete\ndocumentation, visit https://mando.readthedocs.org/.\n\n\n",
  "requires_dist": [
    "six",
    "argparse ; python_version <= \"2.6\"",
    "funcsigs ; python_version <= \"3.2\"",
    "rst2ansi ; extra == 'restructuredtext'"
  ],
  "requires_python": "",
  "current_version": "0.7.0",
  "released_versions": [
    "0.1",
    "0.2",
    "0.3",
    "0.3.1",
    "0.3.2",
    "0.3.3",
    "0.4",
    "0.5",
    "0.6.4",
    "0.7.0"
  ]
}