{
  "name": "pyflakes",
  "description": "========\nPyflakes\n========\n\nA simple program which checks Python source files for errors.\n\nPyflakes analyzes programs and detects various errors.  It works by\nparsing the source file, not importing it, so it is safe to use on\nmodules with side effects.  It's also much faster.\n\nIt is `available on PyPI <https://pypi.org/project/pyflakes/>`_\nand it supports all active versions of Python: 2.7 and 3.4 to 3.8.\n\n\n\nInstallation\n------------\n\nIt can be installed with::\n\n  $ pip install --upgrade pyflakes\n\n\nUseful tips:\n\n* Be sure to install it for a version of Python which is compatible\n  with your codebase: for Python 2, ``pip2 install pyflakes`` and for\n  Python3, ``pip3 install pyflakes``.\n\n* You can also invoke Pyflakes with ``python3 -m pyflakes .`` or\n  ``python2 -m pyflakes .`` if you have it installed for both versions.\n\n* If you require more options and more flexibility, you could give a\n  look to Flake8_ too.\n\n\nDesign Principles\n-----------------\nPyflakes makes a simple promise: it will never complain about style,\nand it will try very, very hard to never emit false positives.\n\nPyflakes is also faster than Pylint_\nor Pychecker_. This is\nlargely because Pyflakes only examines the syntax tree of each file\nindividually. As a consequence, Pyflakes is more limited in the\ntypes of things it can check.\n\nIf you like Pyflakes but also want stylistic checks, you want\nflake8_, which combines\nPyflakes with style checks against\n`PEP 8`_ and adds\nper-project configuration ability.\n\n\nMailing-list\n------------\n\nShare your feedback and ideas: `subscribe to the mailing-list\n<https://mail.python.org/mailman/listinfo/code-quality>`_\n\nContributing\n------------\n\nIssues are tracked on `GitHub <https://github.com/PyCQA/pyflakes/issues>`_.\n\nPatches may be submitted via a `GitHub pull request`_ or via the mailing list\nif you prefer. If you are comfortable doing so, please `rebase your changes`_\nso they may be applied to master with a fast-forward merge, and each commit is\na coherent unit of work with a well-written log message.  If you are not\ncomfortable with this rebase workflow, the project maintainers will be happy to\nrebase your commits for you.\n\nAll changes should include tests and pass flake8_.\n\n.. image:: https://github.com/PyCQA/pyflakes/workflows/Test/badge.svg\n   :target: https://github.com/PyCQA/pyflakes/actions\n   :alt: GitHub Actions build status\n\n.. _Pylint: https://www.pylint.org/\n.. _flake8: https://pypi.org/project/flake8/\n.. _`PEP 8`: https://www.python.org/dev/peps/pep-0008/\n.. _Pychecker: http://pychecker.sourceforge.net/\n.. _`rebase your changes`: https://git-scm.com/book/en/v2/Git-Branching-Rebasing\n.. _`GitHub pull request`: https://github.com/PyCQA/pyflakes/pulls\n\nChangelog\n---------\n\nPlease see `NEWS.rst <https://github.com/PyCQA/pyflakes/blob/master/NEWS.rst>`_.\n\n\n",
  "requires_dist": null,
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "current_version": "2.3.1",
  "released_versions": [
    "0.2.0",
    "0.2.1",
    "0.3.0",
    "0.4.0",
    "0.5.0",
    "0.6.0",
    "0.6.1",
    "0.7",
    "0.7.1",
    "0.7.2",
    "0.7.3",
    "0.8",
    "0.8.1",
    "0.9.0",
    "0.9.1",
    "0.9.2",
    "1.0.0",
    "1.1.0",
    "1.2.0",
    "1.2.1",
    "1.2.2",
    "1.2.3",
    "1.3.0",
    "1.4.0",
    "1.5.0",
    "1.6.0",
    "2.0.0",
    "2.1.0",
    "2.1.1",
    "2.2.0",
    "2.3.0",
    "2.3.1"
  ]
}