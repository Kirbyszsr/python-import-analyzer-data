{
  "name": "pyre-check",
  "description": "[![lint](https://github.com/facebook/pyre-check/workflows/lint/badge.svg)](https://github.com/facebook/pyre-check/actions/workflows/lint.yml)\n[![tests](https://github.com/facebook/pyre-check/workflows/tests/badge.svg)](https://github.com/facebook/pyre-check/actions/workflows/tests.yml)\n[![pyre](https://github.com/facebook/pyre-check/workflows/pyre/badge.svg)](https://github.com/facebook/pyre-check/actions/workflows/pyre.yml)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/facebook/pyre-check/master/logo.png\">\n</p>\n\nPyre is a performant type checker for Python compliant with [PEP 484](https://www.python.org/dev/peps/pep-0484/). Pyre can analyze codebases with millions of lines of code incrementally \u2013 providing instantaneous feedback to developers as they write code.\n\nPyre ships with **Pysa**, a security focused static analysis tool we've built on top of Pyre that reasons about data flows in Python applications. Please refer to our [documentation](https://pyre-check.org/docs/pysa-basics.html) to get started with our security analysis.\n\n## Requirements\nTo get started, you need [Python 3.6 or later](https://www.python.org/getit/) and [watchman](https://facebook.github.io/watchman/) working on your system. On *MacOS* you can get everything with [homebrew](https://brew.sh/):\n```bash\n$ brew install python3 watchman\n```\nOn *Ubuntu*, *Mint*, or *Debian*; use `apt-get` and [homebrew](https://brew.sh/):\n```bash\n$ sudo apt-get install python3 python3-pip python3-venv\n$ brew install watchman\n```\nWe tested Pyre on *Ubuntu 18.04.5 LTS*, *CentOS 7*, as well as *OSX 10.11* and later.\n\n## Setting up a Project\nWe start by creating an empty project directory and setting up a virtual environment:\n\n```bash\n$ mkdir my_project && cd my_project\n$ python3 -m venv ~/.venvs/venv\n$ source ~/.venvs/venv/bin/activate\n(venv) $ pip install pyre-check\n```\n\nNext, we teach Pyre about our new project:\n```bash\n(venv) $ pyre init\n```\nThis command will set up a configuration for Pyre (`.pyre_configuration`) as well as watchman (`.watchmanconfig`) in your project's directory. Accept the defaults for now \u2013 you can change them later if necessary.\n\n## Running Pyre\nWe are now ready to run Pyre:\n```bash\n(venv) $ echo \"i: int = 'string'\" > test.py\n(venv) $ pyre\n \u019b Found 1 type error!\ntest.py:1:0 Incompatible variable type [9]: i is declared to have type `int` but is used as type `str`.\n```\nThis first invocation will start a daemon listening for filesystem changes \u2013\u00a0type checking your project incrementally as you make edits to the code. You will notice that subsequent invocations of `pyre` will be faster than the first one.\n\nFor more detailed documentation, see https://pyre-check.org.\n\n## Join the Pyre community\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for how to help out.\n\n## License\n\nPyre is licensed under the MIT license.\n\n\n",
  "requires_dist": [
    "async-generator",
    "click",
    "dataclasses-json",
    "libcst (>=0.3.6)",
    "psutil",
    "pyre-extensions",
    "pywatchman",
    "tabulate",
    "typing-extensions",
    "dataclasses ; python_version == \"3.6\""
  ],
  "requires_python": ">=3.6",
  "current_version": "0.9.1",
  "released_versions": [
    "0.0.10",
    "0.0.11",
    "0.0.12",
    "0.0.14",
    "0.0.15",
    "0.0.16",
    "0.0.17",
    "0.0.18",
    "0.0.19",
    "0.0.20",
    "0.0.21",
    "0.0.22",
    "0.0.23",
    "0.0.24",
    "0.0.25",
    "0.0.26",
    "0.0.27",
    "0.0.28",
    "0.0.29",
    "0.0.30",
    "0.0.31",
    "0.0.32",
    "0.0.33",
    "0.0.36",
    "0.0.37",
    "0.0.38",
    "0.0.39",
    "0.0.40",
    "0.0.41",
    "0.0.44",
    "0.0.45",
    "0.0.46",
    "0.0.48",
    "0.0.49",
    "0.0.50",
    "0.0.51",
    "0.0.52",
    "0.0.53",
    "0.0.54",
    "0.0.55",
    "0.0.56",
    "0.0.57",
    "0.0.58",
    "0.0.59",
    "0.0.6",
    "0.0.60",
    "0.0.62",
    "0.0.63",
    "0.0.7",
    "0.0.8",
    "0.0.9",
    "0.9.0",
    "0.9.1"
  ]
}