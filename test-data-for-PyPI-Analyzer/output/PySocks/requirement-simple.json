{
  "name": "PySocks",
  "description": "PySocks\n=======\n\nPySocks lets you send traffic through SOCKS and HTTP proxy servers. It is a modern fork of [SocksiPy](http://socksipy.sourceforge.net/) with bug fixes and extra features.\n\nActs as a drop-in replacement to the socket module. Seamlessly configure SOCKS proxies for any socket object by calling `socket_object.set_proxy()`.\n\n----------------\n\nFeatures\n========\n\n* SOCKS proxy client for Python 2.7 and 3.4+\n* TCP supported\n* UDP mostly supported (issues may occur in some edge cases)\n* HTTP proxy client included but not supported or recommended (you should use urllib2's or requests' own HTTP proxy interface)\n* urllib2 handler included. `pip install` / `setup.py install` will automatically install the `sockshandler` module.\n\nInstallation\n============\n\n    pip install PySocks\n\nOr download the tarball / `git clone` and...\n\n    python setup.py install\n\nThese will install both the `socks` and `sockshandler` modules.\n\nAlternatively, include just `socks.py` in your project.\n\n--------------------------------------------\n\n*Warning:* PySocks/SocksiPy only supports HTTP proxies that use CONNECT tunneling. Certain HTTP proxies may not work with this library. If you wish to use HTTP (not SOCKS) proxies, it is recommended that you rely on your HTTP client's native proxy support (`proxies` dict for `requests`, or `urllib2.ProxyHandler` for `urllib2`) instead.\n\n--------------------------------------------\n\nUsage\n=====\n\n## socks.socksocket ##\n\n    import socks\n\n    s = socks.socksocket() # Same API as socket.socket in the standard lib\n\n    s.set_proxy(socks.SOCKS5, \"localhost\") # SOCKS4 and SOCKS5 use port 1080 by default\n    # Or\n    s.set_proxy(socks.SOCKS4, \"localhost\", 4444)\n    # Or\n    s.set_proxy(socks.HTTP, \"5.5.5.5\", 8888)\n\n    # Can be treated identical to a regular socket object\n    s.connect((\"www.somesite.com\", 80))\n    s.sendall(\"GET / HTTP/1.1 ...\")\n    print s.recv(4096)\n\n## Monkeypatching ##\n\nTo monkeypatch the entire standard library with a single default proxy:\n\n    import urllib2\n    import socket\n    import socks\n\n    socks.set_default_proxy(socks.SOCKS5, \"localhost\")\n    socket.socket = socks.socksocket\n\n    urllib2.urlopen(\"http://www.somesite.com/\") # All requests will pass through the SOCKS proxy\n\nNote that monkeypatching may not work for all standard modules or for all third party modules, and generally isn't recommended. Monkeypatching is usually an anti-pattern in Python.\n\n## urllib2 Handler ##\n\nExample use case with the `sockshandler` urllib2 handler. Note that you must import both `socks` and `sockshandler`, as the handler is its own module separate from PySocks. The module is included in the PyPI package.\n\n    import urllib2\n    import socks\n    from sockshandler import SocksiPyHandler\n\n    opener = urllib2.build_opener(SocksiPyHandler(socks.SOCKS5, \"127.0.0.1\", 9050))\n    print opener.open(\"http://www.somesite.com/\") # All requests made by the opener will pass through the SOCKS proxy\n\n--------------------------------------------\n\nOriginal SocksiPy README attached below, amended to reflect API changes.\n\n--------------------------------------------\n\nSocksiPy\n\nA Python SOCKS module.\n\n(C) 2006 Dan-Haim. All rights reserved.\n\nSee LICENSE file for details.\n\n\n*WHAT IS A SOCKS PROXY?*\n\nA SOCKS proxy is a proxy server at the TCP level. In other words, it acts as\na tunnel, relaying all traffic going through it without modifying it.\nSOCKS proxies can be used to relay traffic using any network protocol that\nuses TCP.\n\n*WHAT IS SOCKSIPY?*\n\nThis Python module allows you to create TCP connections through a SOCKS\nproxy without any special effort.\nIt also supports relaying UDP packets with a SOCKS5 proxy.\n\n*PROXY COMPATIBILITY*\n\nSocksiPy is compatible with three different types of proxies:\n\n1. SOCKS Version 4 (SOCKS4), including the SOCKS4a extension.\n2. SOCKS Version 5 (SOCKS5).\n3. HTTP Proxies which support tunneling using the CONNECT method.\n\n*SYSTEM REQUIREMENTS*\n\nBeing written in Python, SocksiPy can run on any platform that has a Python\ninterpreter and TCP/IP support.\nThis module has been tested with Python 2.3 and should work with greater versions\njust as well.\n\n\nINSTALLATION\n-------------\n\nSimply copy the file \"socks.py\" to your Python's `lib/site-packages` directory,\nand you're ready to go. [Editor's note: it is better to use `python setup.py install` for PySocks]\n\n\nUSAGE\n------\n\nFirst load the socks module with the command:\n\n    >>> import socks\n    >>>\n\nThe socks module provides a class called `socksocket`, which is the base to all of the module's functionality.\n\nThe `socksocket` object has the same initialization parameters as the normal socket\nobject to ensure maximal compatibility, however it should be noted that `socksocket` will only function with family being `AF_INET` and\ntype being either `SOCK_STREAM` or `SOCK_DGRAM`.\nGenerally, it is best to initialize the `socksocket` object with no parameters\n\n    >>> s = socks.socksocket()\n    >>>\n\nThe `socksocket` object has an interface which is very similiar to socket's (in fact\nthe `socksocket` class is derived from socket) with a few extra methods.\nTo select the proxy server you would like to use, use the `set_proxy` method, whose\nsyntax is:\n\n    set_proxy(proxy_type, addr[, port[, rdns[, username[, password]]]])\n\nExplanation of the parameters:\n\n`proxy_type` - The type of the proxy server. This can be one of three possible\nchoices: `PROXY_TYPE_SOCKS4`, `PROXY_TYPE_SOCKS5` and `PROXY_TYPE_HTTP` for SOCKS4,\nSOCKS5 and HTTP servers respectively. `SOCKS4`, `SOCKS5`, and `HTTP` are all aliases, respectively.\n\n`addr` - The IP address or DNS name of the proxy server.\n\n`port` - The port of the proxy server. Defaults to 1080 for socks and 8080 for http.\n\n`rdns` - This is a boolean flag than modifies the behavior regarding DNS resolving.\nIf it is set to True, DNS resolving will be preformed remotely, on the server.\nIf it is set to False, DNS resolving will be preformed locally. Please note that\nsetting this to True with SOCKS4 servers actually use an extension to the protocol,\ncalled SOCKS4a, which may not be supported on all servers (SOCKS5 and http servers\nalways support DNS). The default is True.\n\n`username` - For SOCKS5 servers, this allows simple username / password authentication\nwith the server. For SOCKS4 servers, this parameter will be sent as the userid.\nThis parameter is ignored if an HTTP server is being used. If it is not provided,\nauthentication will not be used (servers may accept unauthenticated requests).\n\n`password` - This parameter is valid only for SOCKS5 servers and specifies the\nrespective password for the username provided.\n\nExample of usage:\n\n    >>> s.set_proxy(socks.SOCKS5, \"socks.example.com\") # uses default port 1080\n    >>> s.set_proxy(socks.SOCKS4, \"socks.test.com\", 1081)\n\nAfter the set_proxy method has been called, simply call the connect method with the\ntraditional parameters to establish a connection through the proxy:\n\n    >>> s.connect((\"www.sourceforge.net\", 80))\n    >>>\n\nConnection will take a bit longer to allow negotiation with the proxy server.\nPlease note that calling connect without calling `set_proxy` earlier will connect\nwithout a proxy (just like a regular socket).\n\nErrors: Any errors in the connection process will trigger exceptions. The exception\nmay either be generated by the underlying socket layer or may be custom module\nexceptions, whose details follow:\n\nclass `ProxyError` - This is a base exception class. It is not raised directly but\nrather all other exception classes raised by this module are derived from it.\nThis allows an easy way to catch all proxy-related errors. It descends from `IOError`.\n\nAll `ProxyError` exceptions have an attribute `socket_err`, which will contain either a\ncaught `socket.error` exception, or `None` if there wasn't any.\n\nclass `GeneralProxyError` - When thrown, it indicates a problem which does not fall\ninto another category.\n\n* `Sent invalid data` - This error means that unexpected data has been received from\nthe server. The most common reason is that the server specified as the proxy is\nnot really a SOCKS4/SOCKS5/HTTP proxy, or maybe the proxy type specified is wrong.\n\n* `Connection closed unexpectedly` - The proxy server unexpectedly closed the connection.\nThis may indicate that the proxy server is experiencing network or software problems.\n\n* `Bad proxy type` - This will be raised if the type of the proxy supplied to the\nset_proxy function was not one of `SOCKS4`/`SOCKS5`/`HTTP`.\n\n* `Bad input` - This will be raised if the `connect()` method is called with bad input\nparameters.\n\nclass `SOCKS5AuthError` - This indicates that the connection through a SOCKS5 server\nfailed due to an authentication problem.\n\n* `Authentication is required` - This will happen if you use a SOCKS5 server which\nrequires authentication without providing a username / password at all.\n\n* `All offered authentication methods were rejected` - This will happen if the proxy\nrequires a special authentication method which is not supported by this module.\n\n* `Unknown username or invalid password` - Self descriptive.\n\nclass `SOCKS5Error` - This will be raised for SOCKS5 errors which are not related to\nauthentication.\nThe parameter is a tuple containing a code, as given by the server,\nand a description of the\nerror. The possible errors, according to the RFC, are:\n\n* `0x01` - General SOCKS server failure - If for any reason the proxy server is unable to\nfulfill your request (internal server error).\n* `0x02` - connection not allowed by ruleset - If the address you're trying to connect to\nis blacklisted on the server or requires authentication.\n* `0x03` - Network unreachable - The target could not be contacted. A router on the network\nhad replied with a destination net unreachable error.\n* `0x04` - Host unreachable - The target could not be contacted. A router on the network\nhad replied with a destination host unreachable error.\n* `0x05` - Connection refused - The target server has actively refused the connection\n(the requested port is closed).\n* `0x06` - TTL expired - The TTL value of the SYN packet from the proxy to the target server\nhas expired. This usually means that there are network problems causing the packet\nto be caught in a router-to-router \"ping-pong\".\n* `0x07` - Command not supported - For instance if the server does not support UDP.\n* `0x08` - Address type not supported - The client has provided an invalid address type.\nWhen using this module, this error should not occur.\n\nclass `SOCKS4Error` - This will be raised for SOCKS4 errors. The parameter is a tuple\ncontaining a code and a description of the error, as given by the server. The\npossible error, according to the specification are:\n\n* `0x5B` - Request rejected or failed - Will be raised in the event of an failure for any\nreason other then the two mentioned next.\n* `0x5C` - request rejected because SOCKS server cannot connect to identd on the client -\nThe Socks server had tried an ident lookup on your computer and has failed. In this\ncase you should run an identd server and/or configure your firewall to allow incoming\nconnections to local port 113 from the remote server.\n* `0x5D` - request rejected because the client program and identd report different user-ids -\nThe Socks server had performed an ident lookup on your computer and has received a\ndifferent userid than the one you have provided. Change your userid (through the\nusername parameter of the set_proxy method) to match and try again.\n\nclass `HTTPError` - This will be raised for HTTP errors. The message will contain\nthe HTTP status code and provided error message.\n\nAfter establishing the connection, the object behaves like a standard socket.\n\nMethods like `makefile()` and `settimeout()` should behave just like regular sockets.\nCall the `close()` method to close the connection.\n\nIn addition to the `socksocket` class, an additional function worth mentioning is the\n`set_default_proxy` function. The parameters are the same as the `set_proxy` method.\nThis function will set default proxy settings for newly created `socksocket` objects,\nin which the proxy settings haven't been changed via the `set_proxy` method.\nThis is quite useful if you wish to force 3rd party modules to use a SOCKS proxy,\nby overriding the socket object.\nFor example:\n\n    >>> socks.set_default_proxy(socks.SOCKS5, \"socks.example.com\")\n    >>> socket.socket = socks.socksocket\n    >>> urllib.urlopen(\"http://www.sourceforge.net/\")\n\n\nPROBLEMS\n---------\n\nPlease open a GitHub issue at https://github.com/Anorov/PySocks\n\n\n",
  "requires_dist": null,
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
  "current_version": "1.7.1",
  "released_versions": [
    "1.4.2",
    "1.5.0",
    "1.5.2",
    "1.5.3",
    "1.5.4",
    "1.5.5",
    "1.5.6",
    "1.5.7",
    "1.6.0",
    "1.6.1",
    "1.6.2",
    "1.6.3",
    "1.6.4",
    "1.6.5",
    "1.6.6",
    "1.6.7",
    "1.6.8",
    "1.7.0",
    "1.7.1"
  ]
}