{
  "name": "singledispatch",
  "description": ".. image:: https://img.shields.io/pypi/v/singledispatch.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/singledispatch.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/singledispatch\n\n.. image:: https://github.com/jaraco/singledispatch/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/singledispatch/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. .. image:: https://readthedocs.org/projects/skeleton/badge/?version=latest\n..    :target: https://skeleton.readthedocs.io/en/latest/?badge=latest\n\n`PEP 443 <http://www.python.org/dev/peps/pep-0443/>`_ proposed to expose\na mechanism in the ``functools`` standard library module in Python 3.4\nthat provides a simple form of generic programming known as\nsingle-dispatch generic functions.\n\nThis library is a backport of this functionality to Python 2.6 - 3.3.\n\nTo define a generic function, decorate it with the ``@singledispatch``\ndecorator. Note that the dispatch happens on the type of the first\nargument, create your function accordingly::\n\n  >>> from singledispatch import singledispatch\n  >>> @singledispatch\n  ... def fun(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Let me just say,\", end=\" \")\n  ...     print(arg)\n\nTo add overloaded implementations to the function, use the\n``register()`` attribute of the generic function. It is a decorator,\ntaking a type parameter and decorating a function implementing the\noperation for that type::\n\n  >>> @fun.register(int)\n  ... def _(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Strength in numbers, eh?\", end=\" \")\n  ...     print(arg)\n  ...\n  >>> @fun.register(list)\n  ... def _(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Enumerate this:\")\n  ...     for i, elem in enumerate(arg):\n  ...         print(i, elem)\n\nTo enable registering lambdas and pre-existing functions, the\n``register()`` attribute can be used in a functional form::\n\n  >>> def nothing(arg, verbose=False):\n  ...     print(\"Nothing.\")\n  ...\n  >>> fun.register(type(None), nothing)\n\nThe ``register()`` attribute returns the undecorated function which\nenables decorator stacking, pickling, as well as creating unit tests for\neach variant independently::\n\n  >>> @fun.register(float)\n  ... @fun.register(Decimal)\n  ... def fun_num(arg, verbose=False):\n  ...     if verbose:\n  ...         print(\"Half of your number:\", end=\" \")\n  ...     print(arg / 2)\n  ...\n  >>> fun_num is fun\n  False\n\nWhen called, the generic function dispatches on the type of the first\nargument::\n\n  >>> fun(\"Hello, world.\")\n  Hello, world.\n  >>> fun(\"test.\", verbose=True)\n  Let me just say, test.\n  >>> fun(42, verbose=True)\n  Strength in numbers, eh? 42\n  >>> fun(['spam', 'spam', 'eggs', 'spam'], verbose=True)\n  Enumerate this:\n  0 spam\n  1 spam\n  2 eggs\n  3 spam\n  >>> fun(None)\n  Nothing.\n  >>> fun(1.23)\n  0.615\n\nWhere there is no registered implementation for a specific type, its\nmethod resolution order is used to find a more generic implementation.\nThe original function decorated with ``@singledispatch`` is registered\nfor the base ``object`` type, which means it is used if no better\nimplementation is found.\n\nTo check which implementation will the generic function choose for\na given type, use the ``dispatch()`` attribute::\n\n  >>> fun.dispatch(float)\n  <function fun_num at 0x1035a2840>\n  >>> fun.dispatch(dict)    # note: default implementation\n  <function fun at 0x103fe0000>\n\nTo access all registered implementations, use the read-only ``registry``\nattribute::\n\n  >>> fun.registry.keys()\n  dict_keys([<class 'NoneType'>, <class 'int'>, <class 'object'>,\n            <class 'decimal.Decimal'>, <class 'list'>,\n            <class 'float'>])\n  >>> fun.registry[float]\n  <function fun_num at 0x1035a2840>\n  >>> fun.registry[object]\n  <function fun at 0x103fe0000>\n\nThe vanilla documentation is available at\nhttp://docs.python.org/3/library/functools.html#functools.singledispatch.\n\n\nMaintenance\n-----------\n\nThis backport is maintained on Github by Jason R. Coombs, one of the\nmembers of the core CPython team:\n\n* `repository <https://github.com/jaraco/singledispatch>`_\n\n* `issue tracker <https://github.com/jaraco/singledispatch/issues>`_\n\n\nConversion Process\n------------------\n\nThis section is technical and should bother you only if you are\nwondering how this backport is produced. If the implementation details\nof this backport are not important for you, feel free to ignore the\nfollowing content.\n\n``singledispatch`` is converted using `six\n<http://pypi.python.org/pypi/six>`_ so that a single codebase can be\nused for all compatible Python versions.  Because a fully automatic\nconversion was not doable, I took the following branching approach:\n\n* the ``upstream`` branch holds unchanged files synchronized from the\n  upstream CPython repository. The synchronization is currently done by\n  manually copying the required code parts and stating from which\n  CPython changeset they come from. The tests should pass on Python 3.4\n  on this branch.\n\n* the ``default`` branch holds the manually translated version and this\n  is where all tests are run for all supported Python versions using\n  Tox.\n\n\n",
  "requires_dist": [
    "six",
    "ordereddict ; python_version < \"2.7\"",
    "sphinx ; extra == 'docs'",
    "jaraco.packaging (>=8.2) ; extra == 'docs'",
    "rst.linker (>=1.9) ; extra == 'docs'",
    "pytest (>=4.6) ; extra == 'testing'",
    "pytest-checkdocs (>=1.2.3) ; extra == 'testing'",
    "pytest-flake8 ; extra == 'testing'",
    "pytest-cov ; extra == 'testing'",
    "pytest-black (>=0.3.7) ; (platform_python_implementation != \"PyPy\") and extra == 'testing'",
    "unittest2 ; (python_version < \"2.7\") and extra == 'testing'"
  ],
  "requires_python": ">=2.6",
  "current_version": "3.6.1",
  "released_versions": [
    "3.4.0.0",
    "3.4.0.1",
    "3.4.0.2",
    "3.4.0.3",
    "3.4.0.4",
    "3.5.0",
    "3.6.0",
    "3.6.1"
  ]
}