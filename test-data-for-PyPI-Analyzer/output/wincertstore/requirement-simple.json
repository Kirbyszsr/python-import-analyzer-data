{
  "name": "wincertstore",
  "description": "============\nwincertstore\n============\n\nwincertstore provides an interface to access Windows' CA and CRL certificates.\nIt uses ctypes and Windows's sytem cert store API through crypt32.dll.\n\n.. warning:: **Security Fix**\n   \n   wincertstore 0.1 used to return **all** certificates although some are\n   **not** suitable to verify TLS/SSL server certificates. wincertstore 0.2\n   only returns certificates for *SERVER_AUTH* enhanced key usage by default.\n\n\nExample\n=======\n\n::\n\n    import wincertstore\n    for storename in (\"CA\", \"ROOT\"):\n        with wincertstore.CertSystemStore(storename) as store:\n            for cert in store.itercerts(usage=wincertstore.SERVER_AUTH):\n                print(cert.get_pem().decode(\"ascii\"))\n                print(cert.get_name())\n                print(cert.enhanced_keyusage_names())\n\n``SERVER_AUTH`` is the default enhanced key usage. In order to get all\ncertificates for any usage, use ``None``. The module offers more OIDs like\n``CLIENT_AUTH``, too.\n\nFor Python versions without the with statement::\n\n    for storename in (\"CA\", \"ROOT\"):\n        store = wincertstore.CertSystemStore(storename)\n        try:\n            for cert in store.itercerts():\n                print(cert.get_pem().decode(\"ascii\")\n        finally:\n            store.close()\n\nSee `CertOpenSystemStore`_\n\nCertFile helper::\n\n    import wincertstore\n    import atexit\n    import ssl\n\n    certfile = wincertstore.CertFile()\n    certfile.addstore(\"CA\")\n    certfile.addstore(\"ROOT\")\n    atexit.register(certfile.close) # cleanup and remove files on shutdown)\n\n    ssl_sock = ssl.wrap_socket(sock,\n                               ca_certs=certfile.name,\n                               cert_reqs=ssl.CERT_REQUIRED)\n\n\nRequirements\n============\n\n- Python 2.3 to 3.3\n\n- Windows XP, Windows Server 2003 or newer\n\n- ctypes 1.0.2 (Python 2.3 and 2.4)\n  from http://sourceforge.net/projects/ctypes/\n\n  \nLicense\n=======\n\nCopyright (c) 2013, 2014 by Christian Heimes <christian@python.org>\n\nLicensed to PSF under a Contributor Agreement.\n\nSee http://www.python.org/psf/license for licensing details.\n\n\nAcknowledgements\n================\n\nhttp://fixunix.com/openssl/254866-re-can-openssl-use-windows-certificate-store.html\n\nhttp://bugs.python.org/issue17134\n\n\nReferences\n==========\n\n.. _CertOpenSystemStore: http://msdn.microsoft.com/en-us/library/windows/desktop/aa376560%28v=vs.85%29.aspx\n\nChangeLog\n=========\n\nwincertstore 0.2\n----------------\n\n*Release date: 26-Feb-2013*\n\n- By default CertSystemStore.itercerts() is now limited to return only\n  certs that are suitable for SERVER_AUTH -- that is to validate a TLS/SSL's\n  server cert from the perspective of a client.\n\n- Add CERT_CONTEXT.get_name() to get a human readable name of a certificate.\n\n- Add CERT_CONTEXT.enhanced_keyusage() to get enhanced key usage and trust\n  settings from registry. The method returns either ``True`` or a frozenset\n  of OIDs. True means that the certificate is valid for any purpose.\n\n- CERT_CONTEXT.enhanced_keyusage_names() maps OIDs to human readable names.\n\n- Add commin OIDs for enhanced key usages like SERVER_AUTH and CLIENT_AUTH.\n\n- Add support for universal wheels.\n\n- Add tox for testing Python 2.6 to 3.3. Python 2.4 and 2.5 are tested\n  manually.\n\n- Use pypi.python.org:443 for TLS tests.\n\n\nwincertstore 0.1\n----------------\n\n*Release date: 22-Mar-2013*\n\n- Initial release",
  "requires_dist": null,
  "requires_python": null,
  "current_version": "0.2",
  "released_versions": [
    "0.1",
    "0.2"
  ]
}