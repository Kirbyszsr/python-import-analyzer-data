{
  "name": "purl",
  "description": "================================\npurl - A simple Python URL class\n================================\n\nA simple, immutable URL class with a clean API for interrogation and\nmanipulation.  Supports Pythons 2.7, 3.3, 3.4, 3.5, 3.6 and pypy.\n\nAlso supports template URLs as per `RFC 6570`_\n\nContents:\n\n.. contents:: :local:\n    :depth: 1\n\n.. image:: https://secure.travis-ci.org/codeinthehole/purl.png\n    :target: https://travis-ci.org/codeinthehole/purl\n\n.. image:: https://img.shields.io/pypi/v/purl.svg\n    :target: https://crate.io/packages/purl/\n\n.. _`RFC 6570`: http://tools.ietf.org/html/rfc6570\n\nDocs\n----\n\nhttp://purl.readthedocs.org/en/latest/\n\nInstall\n-------\n\nFrom PyPI (stable)::\n\n    $ pip install purl\n\nFrom Github (unstable)::\n\n    $ pip install git+git://github.com/codeinthehole/purl.git#egg=purl\n\nUse\n---\n\nConstruct:\n\n.. code:: python\n\n    >>> from purl import URL\n\n    # String constructor\n    >>> from_str = URL('https://www.google.com/search?q=testing')\n\n    # Keyword constructor\n    >>> from_kwargs = URL(scheme='https', host='www.google.com', path='/search', query='q=testing')\n\n    # Combine\n    >>> from_combo = URL('https://www.google.com').path('search').query_param('q', 'testing')\n\nURL objects are immutable - all mutator methods return a new instance.\n\nInterrogate:\n\n.. code:: python\n\n    >>> u = URL('https://www.google.com/search?q=testing')\n    >>> u.scheme()\n    'https'\n    >>> u.host()\n    'www.google.com'\n    >>> u.domain()\n    'www.google.com'\n    >>> u.username()\n    >>> u.password()\n    >>> u.netloc()\n    'www.google.com'\n    >>> u.port()\n    >>> u.path()\n    '/search'\n    >>> u.query()\n    'q=testing'\n    >>> u.fragment()\n    ''\n    >>> u.path_segment(0)\n    'search'\n    >>> u.path_segments()\n    ('search',)\n    >>> u.query_param('q')\n    'testing'\n    >>> u.query_param('q', as_list=True)\n    ['testing']\n    >>> u.query_param('lang', default='GB')\n    'GB'\n    >>> u.query_params()\n    {'q': ['testing']}\n    >>> u.has_query_param('q')\n    True\n    >>> u.has_query_params(('q', 'r'))\n    False\n    >>> u.subdomains()\n    ['www', 'google', 'com']\n    >>> u.subdomain(0)\n    'www'\n\nNote that each accessor method is overloaded to be a mutator method too, similar\nto the jQuery API.  Eg:\n\n.. code:: python\n\n    >>> u = URL.from_string('https://github.com/codeinthehole')\n\n    # Access\n    >>> u.path_segment(0)\n    'codeinthehole'\n\n    # Mutate (creates a new instance)\n    >>> new_url = u.path_segment(0, 'tangentlabs')\n    >>> new_url is u\n    False\n    >>> new_url.path_segment(0)\n    'tangentlabs'\n\nHence, you can build a URL up in steps:\n\n.. code:: python\n\n    >>> u = URL().scheme('http').domain('www.example.com').path('/some/path').query_param('q', 'search term')\n    >>> u.as_string()\n    'http://www.example.com/some/path?q=search+term'\n\nAlong with the above overloaded methods, there is also a ``add_path_segment``\nmethod for adding a segment at the end of the current path:\n\n.. code:: python\n\n    >>> new_url = u.add_path_segment('here')\n    >>> new_url.as_string()\n    'http://www.example.com/some/path/here?q=search+term'\n\nCouple of other things:\n\n* Since the URL class is immutable it can be used as a key in a dictionary\n* It can be pickled and restored\n* It supports equality operations\n* It supports equality operations\n\nURL templates can be used either via a ``Template`` class:\n\n.. code:: python\n\n    >>> from purl import Template\n    >>> tpl = Template(\"http://example.com{/list*}\")\n    >>> url = tpl.expand({'list': ['red', 'green', 'blue']})\n    >>> url.as_string()\n    'http://example.com/red/green/blue'\n\nor the ``expand`` function:\n\n.. code:: python\n\n    >>> from purl import expand\n    >>> expand(u\"{/list*}\", {'list': ['red', 'green', 'blue']})\n    '/red/green/blue'\n\nA wide variety of expansions are possible - refer to the RFC_ for more details.\n\n.. _RFC: http://tools.ietf.org/html/rfc6570\n\nChangelog\n---------\n\nv1.5 - 2019-03-10\n~~~~~~~~~~~~~~~~~\n\n* Allow `@` in passwords.\n\nv1.4 - 2018-03-11\n~~~~~~~~~~~~~~~~~\n\n* Allow usernames and passwords to be removed from URLs.\n\nv1.3.1\n~~~~~~\n\n* Ensure paths always have a leading slash.\n\nv1.3\n~~~~\n\n* Allow absolute URLs to be converted into relative.\n\nv1.2\n~~~~\n\n* Support password-less URLs.\n* Allow slashes to be passed as path segments.\n\nv1.1\n~~~~\n\n* Support setting username and password via mutator methods\n\nv1.0.3\n~~~~~~\n\n* Handle some unicode compatibility edge-cases\n\nv1.0.2\n~~~~~~\n\n* Fix template expansion bug with no matching variables being passed in. This\n  ensures ``purl.Template`` works correctly with the URLs returned from the\n  Github API.\n\nv1.0.1\n~~~~~~\n\n* Fix bug with special characters in paths not being escaped.\n\nv1.0\n~~~~\n\n* Slight tidy up. Document support for PyPy and Python 3.4.\n\nv0.8\n~~~~\n\n* Support for RFC 6570 URI templates\n\nv0.7\n~~~~\n\n* All internal strings are unicode.\n* Support for unicode chars in path, fragment, query, auth added.\n\nv0.6\n~~~~\n\n* Added ``append_query_param`` method\n* Added ``remove_query_param`` method\n\nv0.5\n~~~~\n\n* Added support for Python 3.2/3.3 (thanks @pmcnr and @mitchellrj)\n\nv0.4.1\n~~~~~~\n\n* Added API docs\n* Added to readthedocs.org\n\nv0.4\n~~~~\n\n* Modified constructor to accept full URL string as first arg\n* Added ``add_path_segment`` method\n\nv0.3.2\n~~~~~~\n\n* Fixed bug port number in string when using from_string constructor\n\nv0.3.1\n~~~~~~\n\n* Fixed bug with passing lists to query param setter methods\n\nv0.3\n~~~~\n\n* Added support for comparison and equality\n* Added support for pickling\n* Added ``__slots__`` so instances can be used as keys within dictionaries\n\nContribute\n----------\n\nClone, create a virtualenv then install purl and the packages required for\ntesting::\n\n    $ git clone git@github.com:codeinthehole/purl.git\n    $ cd purl\n    $ mkvirtualenv purl  # requires virtualenvwrapper\n    (purl) $ make\n\nEnsure tests pass using::\n\n    (purl) $ ./runtests.sh\n\nor::\n\n    $ tox\n",
  "requires_dist": null,
  "requires_python": "",
  "current_version": "1.5",
  "released_versions": [
    "0.1",
    "0.1.1",
    "0.2",
    "0.2.1",
    "0.2.2",
    "0.3",
    "0.3.1",
    "0.3.2",
    "0.4",
    "0.4.1",
    "0.5",
    "0.6",
    "0.7",
    "0.8",
    "1.0",
    "1.0.1",
    "1.0.2",
    "1.0.3",
    "1.1",
    "1.2",
    "1.3",
    "1.3.1",
    "1.4",
    "1.5"
  ]
}