{
  "name": "pyfakefs",
  "description": "# pyfakefs [![PyPI version](https://badge.fury.io/py/pyfakefs.svg)](https://badge.fury.io/py/pyfakefs) [![Python version](https://img.shields.io/pypi/pyversions/pyfakefs.svg)](https://img.shields.io/pypi/pyversions/pyfakefs.svg) ![Testsuite](https://github.com/jmcgeheeiv/pyfakefs/workflows/Testsuite/badge.svg)\n\npyfakefs implements a fake file system that mocks the Python file system modules.\nUsing pyfakefs, your tests operate on a fake file system in memory without\ntouching the real disk.  The software under test requires no modification to\nwork with pyfakefs.\n\npyfakefs works with Linux, Windows and MacOS.\n\n## Documentation\n\nThis file provides general usage instructions for pyfakefs.  There is more:\n\n* The documentation at [GitHub Pages:](http://jmcgeheeiv.github.io/pyfakefs)\n  * The [Release documentation](http://jmcgeheeiv.github.io/pyfakefs/release)\n    contains usage documentation for pyfakefs and a description of the \n    most relevant classes, methods and functions for the last version \n    released on PyPi\n  * The [Development documentation](http://jmcgeheeiv.github.io/pyfakefs/master)\n    contains the same documentation for the current master branch\n  * The [Release 3.7 documentation](http://jmcgeheeiv.github.io/pyfakefs/release37)\n    contains usage documentation for the last version of pyfakefs \n    supporting Python 2.7\n  * The [Release 3.3 documentation](http://jmcgeheeiv.github.io/pyfakefs/release33)\n    contains usage documentation for the last version of pyfakefs \n    supporting Python 2.6, and for the old-style API (which is still \n    supported but not documented in the current release)\n* The [Release Notes](https://github.com/jmcgeheeiv/pyfakefs/blob/master/CHANGES.md) \n  show a list of changes in the latest versions\n\n### Linking to pyfakefs\n\nIn your own documentation, please link to pyfakefs using the canonical URL <http://pyfakefs.org>.\nThis URL always points to the most relevant top page for pyfakefs.\n\n## Usage\n\npyfakefs has support for `unittest` and `pytest`, but can also be used \ndirectly using `fake_filesystem_unittest.Patcher`. Refer to the\n[usage documentation](http://jmcgeheeiv.github.io/pyfakefs/master/usage.html) \nfor more information on test scenarios, test customization and \nusing convenience functions.\n\n\n## Compatibility\npyfakefs works with CPython 3.5 and above, on Linux, Windows and OSX \n(MacOS), and with PyPy3.\n\npyfakefs works with [PyTest](http://doc.pytest.org) version 2.8.6 or above.\n\npyfakefs will not work with Python libraries that use C libraries to access the\nfile system.  This is because pyfakefs cannot patch the underlying C libraries'\nfile access functions--the C libraries will always access the real file system.\nFor example, pyfakefs will not work with [`lxml`](http://lxml.de/).  In this case\n`lxml` must be replaced with a pure Python alternative such as\n[`xml.etree.ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html).\n\n## Development\n\n### Continuous integration\n\npyfakefs is currently automatically tested on Linux, MacOS and Windows, with\nPython 3.6 to 3.9, and with PyPy3 on Linux, using\n[GitHub Actions](https://github.com/jmcgeheeiv/pyfakefs/actions).\n\n### Running pyfakefs unit tests\n\n#### On the command line\npyfakefs unit tests can be run using `unittest` or `pytest`:\n\n```bash\n$ cd pyfakefs/\n$ export PYTHONPATH=$PWD\n\n$ python -m pyfakefs.tests.all_tests\n$ python -m pyfakefs.tests.all_tests_without_extra_packages\n$ python -m pytest pyfakefs/pytest_tests/pytest_plugin_test.py\n```\n\nThese scripts are called by `tox` and Travis-CI. `tox` can be used to run tests\nlocally against supported python versions:\n\n```bash\n$ tox\n```\n\n#### In a Docker container\n\nThe `Dockerfile` at the repository root will run the tests on the latest\nUbuntu version.  Build the container:\n```bash\ncd pyfakefs/\ndocker build -t pyfakefs .\n```\nRun the unit tests in the container:\n```bash\ndocker run -t pyfakefs\n```\n\n### Contributing to pyfakefs\n\nWe always welcome contributions to the library. Check out the\n[Contributing Guide](https://github.com/jmcgeheeiv/pyfakefs/blob/master/CONTRIBUTING.md)\nfor more information.\n\n## History\npyfakefs.py was initially developed at Google by Mike Bland as a modest fake\nimplementation of core Python modules.  It was introduced to all of Google\nin September 2006. Since then, it has been enhanced to extend its\nfunctionality and usefulness.  At last count, pyfakefs is used in over 2,000\nPython tests at Google.\n\nGoogle released pyfakefs to the public in 2011 as Google Code project\n[pyfakefs](http://code.google.com/p/pyfakefs/):\n* Fork\n  [jmcgeheeiv-pyfakefs](http://code.google.com/p/jmcgeheeiv-pyfakefs/) added\n  [direct support for unittest and doctest](../../wiki/Automatically-find-and-patch-file-functions-and-modules)\n* Fork\n  [shiffdane-jmcgeheeiv-pyfakefs](http://code.google.com/p/shiffdane-jmcgeheeiv-pyfakefs/)\n  added further corrections\n\nAfter the [shutdown of Google Code](http://google-opensource.blogspot.com/2015/03/farewell-to-google-code.html)\nwas announced, [John McGehee](https://github.com/jmcgeheeiv) merged all three Google Code projects together\n[here on GitHub](https://github.com/jmcgeheeiv/pyfakefs) where an enthusiastic community actively supports, maintains\nand extends pyfakefs.\n\n\n",
  "requires_dist": null,
  "requires_python": ">=3.5",
  "current_version": "4.4.0",
  "released_versions": [
    "1.0",
    "1.1",
    "1.2",
    "2.0",
    "2.1",
    "2.2",
    "2.3",
    "2.4",
    "2.6",
    "2.7",
    "2.8",
    "2.9",
    "3.0",
    "3.1",
    "3.2",
    "3.3",
    "3.4",
    "3.4.1",
    "3.4.2",
    "3.4.3",
    "3.5",
    "3.5.2",
    "3.5.3",
    "3.5.4",
    "3.5.5",
    "3.5.6",
    "3.5.7",
    "3.5.8",
    "3.6",
    "3.6.1",
    "3.7",
    "3.7.1",
    "3.7.2",
    "4.0.2",
    "4.1.0",
    "4.2.0",
    "4.2.1",
    "4.3.0",
    "4.3.1",
    "4.3.2",
    "4.3.3",
    "4.4.0"
  ]
}