{
  "name": "jsonschema",
  "description": "==========\njsonschema\n==========\n\n|PyPI| |Pythons| |Travis| |AppVeyor| |Codecov| |ReadTheDocs|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Travis| image:: https://travis-ci.com/Julian/jsonschema.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.com/Julian/jsonschema\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn/branch/master?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/jsonschema\n\n.. |Codecov| image:: https://codecov.io/gh/Julian/jsonschema/branch/master/graph/badge.svg\n   :alt: Codecov Code coverage\n   :target: https://codecov.io/gh/Julian/jsonschema\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\n\n``jsonschema`` is an implementation of `JSON Schema <https://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschema -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft7Validator>`_,\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_\n  of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschema`` is available on `PyPI <https://pypi.org/project/jsonschema/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    $ pip install jsonschema\n\n\nDemo\n----\n\nTry ``jsonschema`` interactively in this online demo:\n\n.. image:: https://user-images.githubusercontent.com/1155573/56745335-8b158a00-6750-11e9-8776-83fa675939c4.png\n    :target: https://notebooks.ai/demo/gh/Julian/jsonschema\n    :alt: Open Live Demo\n\n\nOnline demo Notebook will look similar to this:\n\n\n.. image:: https://user-images.githubusercontent.com/1155573/56820861-5c1c1880-6823-11e9-802a-ce01c5ec574f.gif\n    :alt: Open Live Demo\n    :width: 480 px\n\n\nRelease Notes\n-------------\n\nv3.1 brings support for ECMA 262 dialect regular expressions\nthroughout schemas, as recommended by the specification. Big\nthanks to @Zac-HD for authoring support in a new `js-regex\n<https://pypi.org/project/js-regex/>`_ library.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running ``tox`` in the directory of your source\ncheckout will run ``jsonschema``'s test suite on all of the versions\nof Python ``jsonschema`` supports. If you don't have all of the\nversions that ``jsonschema`` is tested under, you'll likely want to run\nusing ``tox``'s ``--skip-missing-interpreters`` option.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschema.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschema``'s benchmarks make use of `pyperf\n<https://pyperf.readthedocs.io>`_.\n\nRunning them can be done via ``tox -e perf``, or by invoking the ``pyperf``\ncommands externally (after ensuring that both it and ``jsonschema`` itself are\ninstalled)::\n\n    $ python -m pyperf jsonschema/benchmarks/test_suite.py --hist --output results.json\n\nTo compare to a previous run, use::\n\n    $ python -m pyperf compare_to --table reference.json results.json\n\nSee the ``pyperf`` documentation for more details.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can also woo me with beer money\nvia Google Pay with the email in my GitHub profile.\n\nAnd for companies who appreciate ``jsonschema`` and its continued support\nand growth, ``jsonschema`` is also now supportable via `TideLift\n<https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-j\nsonschema&utm_medium=referral&utm_campaign=readme>`_.\n\n\n",
  "requires_dist": [
    "attrs (>=17.4.0)",
    "pyrsistent (>=0.14.0)",
    "setuptools",
    "six (>=1.11.0)",
    "functools32 ; python_version < \"3\"",
    "importlib-metadata ; python_version < \"3.8\"",
    "idna ; extra == 'format'",
    "jsonpointer (>1.13) ; extra == 'format'",
    "rfc3987 ; extra == 'format'",
    "strict-rfc3339 ; extra == 'format'",
    "webcolors ; extra == 'format'",
    "idna ; extra == 'format_nongpl'",
    "jsonpointer (>1.13) ; extra == 'format_nongpl'",
    "webcolors ; extra == 'format_nongpl'",
    "rfc3986-validator (>0.1.0) ; extra == 'format_nongpl'",
    "rfc3339-validator ; extra == 'format_nongpl'"
  ],
  "requires_python": "",
  "current_version": "3.2.0",
  "released_versions": [
    "0.1a",
    "0.2",
    "0.3",
    "0.4",
    "0.5",
    "0.6",
    "0.7",
    "0.8.0",
    "1.0.0",
    "1.1.0",
    "1.2.0",
    "1.3.0",
    "2.0.0",
    "2.1.0",
    "2.2.0",
    "2.3.0",
    "2.4.0",
    "2.5.0",
    "2.5.1",
    "2.6.0",
    "3.0.0",
    "3.0.0a1",
    "3.0.0a2",
    "3.0.0a3",
    "3.0.0a4",
    "3.0.0a5",
    "3.0.0a6",
    "3.0.0b1",
    "3.0.0b2",
    "3.0.0b3",
    "3.0.1",
    "3.0.2",
    "3.1.0",
    "3.1.1",
    "3.2.0"
  ]
}