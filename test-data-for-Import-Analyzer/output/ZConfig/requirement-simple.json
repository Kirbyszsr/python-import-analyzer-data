{
  "name": "ZConfig",
  "description": "ZConfig: Schema-driven configuration\n====================================\n\n.. image:: https://img.shields.io/pypi/v/ZConfig.svg\n        :target: https://pypi.python.org/pypi/ZConfig/\n        :alt: Latest release\n\n.. image:: https://img.shields.io/pypi/pyversions/ZConfig.svg\n        :target: https://pypi.org/project/ZConfig/\n        :alt: Supported Python versions\n\n.. image:: https://travis-ci.com/zopefoundation/ZConfig.svg?branch=master\n        :target: https://travis-ci.com/zopefoundation/ZConfig\n\n.. image:: https://coveralls.io/repos/github/zopefoundation/ZConfig/badge.svg?branch=master\n        :target: https://coveralls.io/github/zopefoundation/ZConfig?branch=master\n\n.. image:: https://readthedocs.org/projects/zconfig/badge/?version=latest\n        :target: http://zconfig.readthedocs.org/en/latest/\n        :alt: Documentation Status\n\nZConfig is a configuration library intended for general use.  It\nsupports a hierarchical schema-driven configuration model that allows\na schema to specify data conversion routines written in Python.\nZConfig's model is very different from the model supported by the\nConfigParser module found in Python's standard library, and is more\nsuitable to configuration-intensive applications.\n\nZConfig schema are written in an XML-based language and are able to\n\"import\" schema components provided by Python packages.  Since\ncomponents are able to bind to conversion functions provided by Python\ncode in the package (or elsewhere), configuration objects can be\narbitrarily complex, with values that have been verified against\narbitrary constraints.  This makes it easy for applications to\nseparate configuration support from configuration loading even with\nconfiguration data being defined and consumed by a wide range of\nseparate packages.\n\nZConfig is licensed under the Zope Public License, version 2.1.  See\nthe file LICENSE.txt in the distribution for the full license text.\n\nReference documentation is available at https://zconfig.readthedocs.io.\n\nInformation on the latest released version of the ZConfig package is\navailable at\n\n  https://pypi.org/project/ZConfig/\n\nYou may either create an RPM and install this, or install directly from\nthe source distribution.\n\nThere is a mailing list for discussions and questions about ZConfig;\nmore information on the list is available at\n\n  http://mail.zope.org/mailman/listinfo/zconfig/\n\n\nConfiguring Logging\n-------------------\n\nOne common use of ZConfig is to configure the Python logging\nframework. This is extremely simple to do as the following example\ndemonstrates:\n\n    >>> from ZConfig import configureLoggers\n    >>> configureLoggers('''\n    ... <logger>\n    ...    level INFO\n    ...    <logfile>\n    ...       PATH STDOUT\n    ...       format %(levelname)s %(name)s %(message)s\n    ...    </logfile>\n    ... </logger>\n    ... ''')\n\nThe above configures the root logger to output messages logged at INFO\nor above to the console, as we can see in the following example:\n\n    >>> from logging import getLogger\n    >>> logger = getLogger()\n    >>> logger.info('An info message')\n    INFO root An info message\n    >>> logger.debug('A debug message')\n\nA more common configuration would see STDOUT replaced with a path to\nthe file into which log entries would be written.\n\nFor more information, see the `the documentation <https://zconfig.readthedocs.io>`_.\n\n\nInstalling from the source distribution\n---------------------------------------\n\nFor a simple installation::\n\n  python setup.py install\n\n\nTo install to a user's home-dir::\n\n  python setup.py install --home=<dir>\n\n\nTo install to another prefix (for example, /usr/local)::\n\n  python setup.py install --prefix=/usr/local\n\n\nIf you need to force the python interpreter to (for example) python2::\n\n  python2 setup.py install\n\n\nFor more information on installing packages, please refer to the\n`Python Packaging User Guide <https://packaging.python.org/>`__.\n\n\n============================\n Change History for ZConfig\n============================\n\n3.6.0 (2021-05-19)\n==================\n\n- Added support for Python 3.8, 3.9 and 3.10.  This primarily involves\n  avoiding the new-in-3.8 validation of the format string when using the\n  'safe-template' format style, since that's not supported in the Python\n  standard library.\n\n- Added ``ZConfig.pygments`` module containing a lexer compatible with\n  the ``pygments`` library.  Made discoverable via an entry point; use\n  **zconfig** as the highlight language for ``code-block`` directives in\n  Sphinx documents.\n\n\n3.5.0 (2019-06-24)\n==================\n\n- Add support for documenting schema files contained in packages to\n  the Sphinx extension. See `issue 59\n  <https://github.com/zopefoundation/ZConfig/issues/59>`_.\n\n3.4.0 (2019-01-02)\n==================\n\nMany changes have been made in the support for logging configurations:\n\n- The log handler section types defined by the\n  ``ZConfig.components.logger`` package support additional, optional\n  parameters:\n\n  ``style``\n      Used to configure alternate format styles as found in the Python 3\n      standard library.  Four ``style`` values are supported:\n      ``classic`` (the default), ``format`` (equivalent to ``style='{'``\n      in Python 3), ``template`` (equivalent to ``style='$'``), and\n      ``safe-template`` (similar to ``template``, but using the\n      ``string.Template`` method ``safe_substitute`` method).  A\n      best-effort implementation is provided for Python 2.\n\n  ``arbitrary-fields``\n      A Boolean defauting to ``False`` for backward compatibility,\n      allows arbitrary replacement field names to be accepted in the\n      format string (regardless of the ``style`` setting).  This\n      supports applications where log records are known to be generated\n      with additional string or numeric fields, at least for some\n      loggers.  (An exception is still raised at format time if the\n      additional fields are not provided, unless the ``style`` value\n      ``safe-template`` is used.)\n\n- The ``logfile`` section type defined by the ``ZConfig.components.logger``\n  package supports the optional ``delay`` and ``encoding`` parameters.\n  These can only be used for regular files, not the special ``STDOUT``\n  and ``STDERR`` streams.\n\n- More validation on the parameters to the ``logfile`` and\n  ``email-notifier`` sections is performed early (at the construction of\n  the factory, rather than at creation of the ``logging`` handler).\n  This allows more checking of parameter combinations before any log\n  files are opened.\n\n- The ``ZConfig.components.logger.handlers.log_format`` data type\n  function now supports formats that include numeric formatting for\n  ``levelno``, and accept ``funcName`` as a valid log record field\n  (added in Python 2.6 and 3.1).\n\n\n3.3.0 (2018-10-04)\n==================\n\n- Drop support for Python 3.3.\n\n- Add support for Python 3.7.\n\n- Drop support for 'python setup.py test'. See `issue 38\n  <https://github.com/zopefoundation/ZConfig/issues/38>`_.\n\n- Add support for ``example`` in ``section`` and ``multisection``, and\n  include those examples in generated documentation. See\n  https://github.com/zopefoundation/ZConfig/pull/5.\n\n- Fix configuration loaders to decode byte data using UTF-8 instead of\n  the default encoding (usually ASCII). See `issue 37\n  <https://github.com/zopefoundation/ZConfig/issues/37>`_.\n\n3.2.0 (2017-06-22)\n==================\n\n- Drop support for Python 2.6 and 3.2 and add support for Python 3.6.\n\n- Run tests with pypy and pypy3 as well.\n\n- Host docs at https://zconfig.readthedocs.io\n\n- BaseLoader is now an abstract class that cannot be instantiated.\n\n- Allow ``nan``, ``inf`` and ``-inf`` values for floats in\n  configurations. See\n  https://github.com/zopefoundation/ZConfig/issues/16.\n\n- Scripts ``zconfig`` (for schema validation) and\n  ``zconfig_schema2html`` are ported to Python 3.\n\n- A new ``ZConfig.sphinx`` `Sphinx extension\n  <https://zconfig.readthedocs.io/en/latest/documenting-components.html#documenting-components>`_\n  facilitates automatically documenting ZConfig components using their\n  description and examples in Sphinx documentation. See\n  https://github.com/zopefoundation/ZConfig/pull/25.\n\n- Simplify internal schema processing of max and min occurrence\n  values. See https://github.com/zopefoundation/ZConfig/issues/15.\n\n- Almost all uses of ``type`` as a parameter name have been replaced\n  with ``type_`` to avoid shadowing a builtin. These were typically\n  not public APIs and weren't expected to be called with keyword\n  arguments so there should not be any user-visible changes. See\n  https://github.com/zopefoundation/ZConfig/issues/17\n\n3.1.0 (2015-10-17)\n==================\n\n- Add ability to do variable substitution from environment variables using\n  $() syntax.\n\n3.0.4 (2014-03-20)\n==================\n\n- Added Python 3.4 support.\n\n\n3.0.3 (2013-03-02)\n==================\n\n- Added Python 3.2 support.\n\n\n3.0.2 (2013-02-14)\n==================\n\n- Fixed ResourceWarning in BaseLoader.openResource().\n\n\n3.0.1 (2013-02-13)\n==================\n\n- Removed an accidentally left `pdb` statement from the code.\n\n- Fix a bug in Python 3 with the custom string `repr()` function.\n\n\n3.0.0 (2013-02-13)\n==================\n\n- Added Python 3.3 support.\n\n- Dropped Python 2.4 and 2.5 support.\n\n\n2.9.3 (2012-06-25)\n==================\n\n- Fixed: port values of 0 weren't allowed.  Port 0 is used to request\n  an ephemeral port.\n\n\n2.9.2 (2012-02-11)\n==================\n\n- Adjust test classes to avoid base classes being considered separate\n  test cases by (at least) the \"nose\" test runner.\n\n\n2.9.1 (2012-02-11)\n==================\n\n- Make FileHandler.reopen thread safe.\n\n\n2.9.0 (2011-03-22)\n==================\n\n- Allow identical redefinition of ``%define`` names.\n- Added support for IPv6 addresses.\n\n\n2.8.0 (2010-04-13)\n==================\n\n- Fix relative path recognition.\n  https://bugs.launchpad.net/zconfig/+bug/405687\n\n- Added SMTP authentication support for email logger on Python 2.6.\n\n\n2.7.1 (2009-06-13)\n==================\n\n- Improved documentation\n\n- Fixed tests failures on windows.\n\n\n2.7.0 (2009-06-11)\n==================\n\n- Added a convenience function, ``ZConfig.configureLoggers(text)`` for\n  configuring loggers.\n\n- Relaxed the requirement for a logger name in logger sections,\n  allowing the logger section to be used for both root and non-root\n  loggers.\n\n\n2.6.1 (2008-12-05)\n==================\n\n- Fixed support for schema descriptions that override descriptions from a base\n  schema.  If multiple base schema provide descriptions but the derived schema\n  does not, the first base mentioned that provides a description wins.\n  https://bugs.launchpad.net/zconfig/+bug/259475\n\n- Fixed compatibility bug with Python 2.5.0.\n\n- No longer trigger deprecation warnings under Python 2.6.\n\n\n2.6.0 (2008-09-03)\n==================\n\n- Added support for file rotation by time by specifying when and\n  interval, rather than max-size, for log files.\n\n- Removed dependency on setuptools from the setup.py.\n\n\n2.5.1 (2007-12-24)\n==================\n\n- Made it possible to run unit tests via 'python setup.py test' (requires\n  setuptools on sys.path).\n\n- Added better error messages to test failure assertions.\n\n\n2.5 (2007-08-31)\n================\n\n*A note on the version number:*\n\nInformation discovered in the revision control system suggests that some\npast revision has been called \"2.4\", though it is not clear that any\nactual release was made with that version number.  We're going to skip\nrevision 2.4 entirely to avoid potential issues with anyone using\nsomething claiming to be ZConfig 2.4, and go straight to version 2.5.\n\n- Add support for importing schema components from ZIP archives (including\n  eggs).\n\n- Added a 'formatter' configuration option in the logging handler sections\n  to allow specifying a constructor for the formatter.\n\n- Documented the package: URL scheme that can be used in extending schema.\n\n- Added support for reopening all log files opened via configurations using\n  the ZConfig.components.logger package.  For Zope, this is usable via the\n  ``zc.signalhandler`` package.  ``zc.signalhandler`` is not required for\n  ZConfig.\n\n- Added support for rotating log files internally by size.\n\n- Added a minimal implementation of schema-less parsing; this is mostly\n  intended for applications that want to read several fragments of ZConfig\n  configuration files and assemble a combined configuration.  Used in some\n  ``zc.buildout`` recipes.\n\n- Converted to using ``zc.buildout`` and the standard test runner from\n  ``zope.testing``.\n\n- Added more tests.\n\n\n2.3.1 (2005-08-21)\n==================\n\n- Isolated some of the case-normalization code so it will at least be\n  easier to override.  This remains non-trivial.\n\n\n2.3 (2005-05-18)\n================\n\n- Added \"inet-binding-address\" and \"inet-connection-address\" to the\n  set of standard datatypes.  These are similar to the \"inet-address\"\n  type, but the default hostname is more sensible.  The datatype used\n  should reflect how the value will be used.\n\n- Alternate rotating logfile handler for Windows, to avoid platform\n  limitations on renaming open files.  Contributed by Sidnei da Silva.\n\n- For <section> and <multisection>, if the name attribute is omitted,\n  assume name=\"*\", since this is what is used most often.\n\n\n2.2 (2004-04-21)\n================\n\n- More documentation has been written.\n\n- Added a timedelta datatype function; the input is the same as for\n  the time-interval datatype, but the resulting value is a\n  datetime.timedelta object.\n\n- Make sure keys specified as attributes of the <default> element are\n  converted by the appropriate key type, and are re-checked for\n  derived sections.\n\n- Refactored the ZConfig.components.logger schema components so that a\n  schema can import just one of the \"eventlog\" or \"logger\" sections if\n  desired.  This can be helpful to avoid naming conflicts.\n\n- Added a reopen() method to the logger factories.\n\n- Always use an absolute pathname when opening a FileHandler.\n\n- A fix to the logger 'format' key to allow the %(process)d expansion variable\n  that the logging package supports.\n\n- A new timedelta built-in datatype was added.  Similar to time-interval\n  except that it returns a datetime.timedelta object instead.\n\n\n2.1 (2004-04-12)\n================\n\n- Removed compatibility with Python 2.1 and 2.2.\n\n- Schema components must really be in Python packages; the directory\n  search has been modified to perform an import to locate the package\n  rather than incorrectly implementing the search algorithm.\n\n- The default objects use for section values now provide a method\n  getSectionAttributes(); this returns a list of all the attributes of\n  the section object which store configuration-defined data (including\n  information derived from the schema).\n\n- Default information can now be included in a schema for <key\n  name=\"+\"> and <multikey name=\"+\"> by using <default key=\"...\">.\n\n- More documentation has been added to discuss schema extension.\n\n- Support for a Unicode-free Python has been fixed.\n\n- Derived section types now inherit the datatype of the base type if\n  no datatype is identified explicitly.\n\n- Derived section types can now override the keytype instead of always\n  inheriting from their base type.\n\n- <import package='...'/> makes use of the current prefix if the\n  package name begins witha dot.\n\n- Added two standard datatypes:  dotted-name and dotted-suffix.\n\n- Added two standard schema components: ZConfig.components.basic and\n  ZConfig.components.logger.\n\n\n2.0 (2003-10-27)\n================\n\n- Configurations can import additional schema components using a new\n  \"%import\" directive; this can be used to integrate 3rd-party\n  components into an application.\n\n- Schemas may be extended using a new \"extends\" attribute on the\n  <schema> element.\n\n- Better error messages when elements in a schema definition are\n  improperly nested.\n\n- The \"zconfig\" script can now simply verify that a schema definition\n  is valid, if that's all that's needed.\n\n\n1.0 (2003-03-25)\n================\n\n- Initial release.\n\n\n",
  "requires_dist": [
    "sphinxcontrib-programoutput ; extra == 'docs'",
    "docutils ; extra == 'test'",
    "manuel ; extra == 'test'",
    "zope.exceptions ; extra == 'test'",
    "zope.testrunner ; extra == 'test'"
  ],
  "requires_python": "",
  "current_version": "3.6.0",
  "released_versions": [
    "1.0",
    "2.0",
    "2.1",
    "2.2",
    "2.3",
    "2.3.1",
    "2.5",
    "2.5.1",
    "2.6.0",
    "2.6.1",
    "2.7.0",
    "2.7.1",
    "2.8.0",
    "2.9.0",
    "2.9.1",
    "2.9.2",
    "2.9.3",
    "3.0.0",
    "3.0.1",
    "3.0.2",
    "3.0.3",
    "3.0.4",
    "3.1.0",
    "3.2.0",
    "3.3.0",
    "3.4.0",
    "3.5.0",
    "3.6.0"
  ]
}