{
  "name": "zope.interface",
  "description": "====================\n ``zope.interface``\n====================\n\n.. image:: https://img.shields.io/pypi/v/zope.interface.svg\n    :target: https://pypi.python.org/pypi/zope.interface/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/zope.interface.svg\n        :target: https://pypi.org/project/zope.interface/\n        :alt: Supported Python versions\n\n.. image:: https://github.com/zopefoundation/zope.interface/actions/workflows/tests.yml/badge.svg\n        :target: https://github.com/zopefoundation/zope.interface/actions/workflows/tests.yml\n\n.. image:: https://readthedocs.org/projects/zopeinterface/badge/?version=latest\n        :target: https://zopeinterface.readthedocs.io/en/latest/\n        :alt: Documentation Status\n\nThis package is intended to be independently reusable in any Python\nproject. It is maintained by the `Zope Toolkit project\n<https://zopetoolkit.readthedocs.io/>`_.\n\nThis package provides an implementation of \"object interfaces\" for Python.\nInterfaces are a mechanism for labeling objects as conforming to a given\nAPI or contract. So, this package can be considered as implementation of\nthe `Design By Contract`_ methodology support in Python.\n\n.. _Design By Contract: http://en.wikipedia.org/wiki/Design_by_contract\n\nFor detailed documentation, please see https://zopeinterface.readthedocs.io/en/latest/\n\n=========\n Changes\n=========\n\n5.4.0 (2021-04-15)\n==================\n\n- Make the C implementation of the ``__providedBy__`` descriptor stop\n  ignoring all errors raised when accessing the instance's\n  ``__provides__``. Now it behaves like the Python version and only\n  catches ``AttributeError``. The previous behaviour could lead to\n  crashing the interpreter in cases of recursion and errors. See\n  `issue 239 <https://github.com/zopefoundation/zope.interface/issues>`_.\n\n- Update the ``repr()`` and ``str()`` of various objects to be shorter\n  and more informative. In many cases, the ``repr()`` is now something\n  that can be evaluated to produce an equal object. For example, what\n  was previously printed as ``<implementedBy builtins.list>`` is now\n  shown as ``classImplements(list, IMutableSequence, IIterable)``. See\n  `issue 236 <https://github.com/zopefoundation/zope.interface/issues/236>`_.\n\n- Make ``Declaration.__add__`` (as in ``implementedBy(Cls) +\n  ISomething``) try harder to preserve a consistent resolution order\n  when the two arguments share overlapping pieces of the interface\n  inheritance hierarchy. Previously, the right hand side was always\n  put at the end of the resolution order, which could easily produce\n  invalid orders. See `issue 193\n  <https://github.com/zopefoundation/zope.interface/issues/193>`_.\n\n5.3.0 (2020-03-21)\n==================\n\n- No changes from 5.3.0a1\n\n\n5.3.0a1 (2021-03-18)\n====================\n\n- Improve the repr of ``zope.interface.Provides`` to remove ambiguity\n  about what is being provided. This is especially helpful diagnosing\n  IRO issues.\n\n- Allow subclasses of ``BaseAdapterRegistry`` (including\n  ``AdapterRegistry`` and ``VerifyingAdapterRegistry``) to have\n  control over the data structures. This allows persistent\n  implementations such as those based on ZODB to choose more scalable\n  options (e.g., BTrees instead of dicts). See `issue 224\n  <https://github.com/zopefoundation/zope.interface/issues/224>`_.\n\n- Fix a reference counting issue in ``BaseAdapterRegistry`` that could\n  lead to references to interfaces being kept around even when all\n  utilities/adapters/subscribers providing that interface have been\n  removed. This is mostly an issue for persistent implementations.\n  Note that this only corrects the issue moving forward, it does not\n  solve any already corrupted reference counts. See `issue 227\n  <https://github.com/zopefoundation/zope.interface/issues/227>`_.\n\n- Add the method ``BaseAdapterRegistry.rebuild()``. This can be used\n  to fix the reference counting issue mentioned above, as well as to\n  update the data structures when custom data types have changed.\n\n- Add the interface method ``IAdapterRegistry.subscribed()`` and\n  implementation ``BaseAdapterRegistry.subscribed()`` for querying\n  directly registered subscribers. See `issue 230\n  <https://github.com/zopefoundation/zope.interface/issues/230>`_.\n\n- Add the maintenance method\n  ``Components.rebuildUtilityRegistryFromLocalCache()``. Most users\n  will not need this, but it can be useful if the ``Components.utilities``\n  registry is suspected to be out of sync with the ``Components``\n  object itself (this might happen to persistent ``Components``\n  implementations in the face of bugs).\n\n- Fix the ``Provides`` and ``ClassProvides`` descriptors to stop\n  allowing redundant interfaces (those already implemented by the\n  underlying class or meta class) to produce an inconsistent\n  resolution order. This is similar to the change in ``@implementer``\n  in 5.1.0, and resolves inconsistent resolution orders with\n  ``zope.proxy`` and ``zope.location``. See `issue 207\n  <https://github.com/zopefoundation/zope.interface/issues/207>`_.\n\n5.2.0 (2020-11-05)\n==================\n\n- Add documentation section ``Persistency and Equality``\n  (`#218 <https://github.com/zopefoundation/zope.interface/issues/218>`_).\n\n- Create arm64 wheels.\n\n- Add support for Python 3.9.\n\n\n5.1.2 (2020-10-01)\n==================\n\n- Make sure to call each invariant only once when validating invariants.\n  Previously, invariants could be called multiple times because when an\n  invariant is defined in an interface, it's found by in all interfaces\n  inheriting from that interface.  See `pull request 215\n  <https://github.com/zopefoundation/zope.interface/pull/215/>`_.\n\n5.1.1 (2020-09-30)\n==================\n\n- Fix the method definitions of ``IAdapterRegistry.subscribe``,\n  ``subscriptions`` and ``subscribers``. Previously, they all were\n  defined to accept a ``name`` keyword argument, but subscribers have\n  no names and the implementation of that interface did not accept\n  that argument. See `issue 208\n  <https://github.com/zopefoundation/zope.interface/issues/208>`_.\n\n- Fix a potential reference leak in the C optimizations. Previously,\n  applications that dynamically created unique ``Specification``\n  objects (e.g., used ``@implementer`` on dynamic classes) could\n  notice a growth of small objects over time leading to increased\n  garbage collection times. See `issue 216\n  <https://github.com/zopefoundation/zope.interface/issues/216>`_.\n\n  .. caution::\n\n     This leak could prevent interfaces used as the bases of\n     other interfaces from being garbage collected. Those interfaces\n     will now be collected.\n\n     One way in which this would manifest was that ``weakref.ref``\n     objects (and things built upon them, like\n     ``Weak[Key|Value]Dictionary``) would continue to have access to\n     the original object even if there were no other visible\n     references to Python and the original object *should* have been\n     collected. This could be especially problematic for the\n     ``WeakKeyDictionary`` when combined with dynamic or local\n     (created in the scope of a function) interfaces, since interfaces\n     are hashed based just on their name and module name. See the\n     linked issue for an example of a resulting ``KeyError``.\n\n     Note that such potential errors are not new, they are just once\n     again a possibility.\n\n5.1.0 (2020-04-08)\n==================\n\n- Make ``@implementer(*iface)`` and ``classImplements(cls, *iface)``\n  ignore redundant interfaces. If the class already implements an\n  interface through inheritance, it is no longer redeclared\n  specifically for *cls*. This solves many instances of inconsistent\n  resolution orders, while still allowing the interface to be declared\n  for readability and maintenance purposes. See `issue 199\n  <https://github.com/zopefoundation/zope.interface/issues/199>`_.\n\n- Remove all bare ``except:`` statements. Previously, when accessing\n  special attributes such as ``__provides__``, ``__providedBy__``,\n  ``__class__`` and ``__conform__``, this package wrapped such access\n  in a bare ``except:`` statement, meaning that many errors could pass\n  silently; typically this would result in a fallback path being taken\n  and sometimes (like with ``providedBy()``) the result would be\n  non-sensical. This is especially true when those attributes are\n  implemented with descriptors. Now, only ``AttributeError`` is\n  caught. This makes errors more obvious.\n\n  Obviously, this means that some exceptions will be propagated\n  differently than before. In particular, ``RuntimeError`` raised by\n  Acquisition in the case of circular containment will now be\n  propagated. Previously, when adapting such a broken object, a\n  ``TypeError`` would be the common result, but now it will be a more\n  informative ``RuntimeError``.\n\n  In addition, ZODB errors like ``POSKeyError`` could now be\n  propagated where previously they would ignored by this package.\n\n  See `issue 200 <https://github.com/zopefoundation/zope.interface/issues/200>`_.\n\n- Require that the second argument (*bases*) to ``InterfaceClass`` is\n  a tuple. This only matters when directly using ``InterfaceClass`` to\n  create new interfaces dynamically. Previously, an individual\n  interface was allowed, but did not work correctly. Now it is\n  consistent with ``type`` and requires a tuple.\n\n- Let interfaces define custom ``__adapt__`` methods. This implements\n  the other side of the :pep:`246` adaptation protocol: objects being\n  adapted could already implement ``__conform__`` if they know about\n  the interface, and now interfaces can implement ``__adapt__`` if\n  they know about particular objects. There is no performance penalty\n  for interfaces that do not supply custom ``__adapt__`` methods.\n\n  This includes the ability to add new methods, or override existing\n  interface methods using the new ``@interfacemethod`` decorator.\n\n  See `issue 3 <https://github.com/zopefoundation/zope.interface/issues/3>`_.\n\n- Make the internal singleton object returned by APIs like\n  ``implementedBy`` and ``directlyProvidedBy`` for objects that\n  implement or provide no interfaces more immutable. Previously an\n  internal cache could be mutated. See `issue 204\n  <https://github.com/zopefoundation/zope.interface/issues/204>`_.\n\n5.0.2 (2020-03-30)\n==================\n\n- Ensure that objects that implement no interfaces (such as direct\n  subclasses of ``object``) still include ``Interface`` itself in\n  their ``__iro___`` and ``__sro___``. This fixes adapter registry\n  lookups for such objects when the adapter is registered for\n  ``Interface``. See `issue 197\n  <https://github.com/zopefoundation/zope.interface/issues/197>`_.\n\n\n5.0.1 (2020-03-21)\n==================\n\n- Ensure the resolution order for ``InterfaceClass`` is consistent.\n  See `issue 192 <https://github.com/zopefoundation/zope.interface/issues/192>`_.\n\n- Ensure the resolution order for ``collections.OrderedDict`` is\n  consistent on CPython 2. (It was already consistent on Python 3 and PyPy).\n\n- Fix the handling of the ``ZOPE_INTERFACE_STRICT_IRO`` environment\n  variable. Previously, ``ZOPE_INTERFACE_STRICT_RO`` was read, in\n  contrast with the documentation. See `issue 194\n  <https://github.com/zopefoundation/zope.interface/issues/194>`_.\n\n\n5.0.0 (2020-03-19)\n==================\n\n- Make an internal singleton object returned by APIs like\n  ``implementedBy`` and ``directlyProvidedBy`` immutable. Previously,\n  it was fully mutable and allowed changing its ``__bases___``. That\n  could potentially lead to wrong results in pathological corner\n  cases. See `issue 158\n  <https://github.com/zopefoundation/zope.interface/issues/158>`_.\n\n- Support the ``PURE_PYTHON`` environment variable at runtime instead\n  of just at wheel build time. A value of 0 forces the C extensions to\n  be used (even on PyPy) failing if they aren't present. Any other\n  value forces the Python implementation to be used, ignoring the C\n  extensions. See `PR 151 <https://github.com/zopefoundation/zope.interface/pull/151>`_.\n\n- Cache the result of ``__hash__`` method in ``InterfaceClass`` as a\n  speed optimization. The method is called very often (i.e several\n  hundred thousand times during Plone 5.2 startup). Because the hash value never\n  changes it can be cached. This improves test performance from 0.614s\n  down to 0.575s (1.07x faster). In a real world Plone case a reindex\n  index came down from 402s to 320s (1.26x faster). See `PR 156\n  <https://github.com/zopefoundation/zope.interface/pull/156>`_.\n\n- Change the C classes ``SpecificationBase`` and its subclass\n  ``ClassProvidesBase`` to store implementation attributes in their structures\n  instead of their instance dictionaries. This eliminates the use of\n  an undocumented private C API function, and helps make some\n  instances require less memory. See `PR 154 <https://github.com/zopefoundation/zope.interface/pull/154>`_.\n\n- Reduce memory usage in other ways based on observations of usage\n  patterns in Zope (3) and Plone code bases.\n\n  - Specifications with no dependents are common (more than 50%) so\n    avoid allocating a ``WeakKeyDictionary`` unless we need it.\n  - Likewise, tagged values are relatively rare, so don't allocate a\n    dictionary to hold them until they are used.\n  - Use ``__slots___`` or the C equivalent ``tp_members`` in more\n    common places. Note that this removes the ability to set arbitrary\n    instance variables on certain objects.\n    See `PR 155 <https://github.com/zopefoundation/zope.interface/pull/155>`_.\n\n  The changes in this release resulted in a 7% memory reduction after\n  loading about 6,000 modules that define about 2,200 interfaces.\n\n  .. caution::\n\n     Details of many private attributes have changed, and external use\n     of those private attributes may break. In particular, the\n     lifetime and default value of ``_v_attrs`` has changed.\n\n- Remove support for hashing uninitialized interfaces. This could only\n  be done by subclassing ``InterfaceClass``. This has generated a\n  warning since it was first added in 2011 (3.6.5). Please call the\n  ``InterfaceClass`` constructor or otherwise set the appropriate\n  fields in your subclass before attempting to hash or sort it. See\n  `issue 157 <https://github.com/zopefoundation/zope.interface/issues/157>`_.\n\n- Remove unneeded override of the ``__hash__`` method from\n  ``zope.interface.declarations.Implements``. Watching a reindex index\n  process in ZCatalog with on a Py-Spy after 10k samples the time for\n  ``.adapter._lookup`` was reduced from 27.5s to 18.8s (~1.5x faster).\n  Overall reindex index time shrunk from 369s to 293s (1.26x faster).\n  See `PR 161\n  <https://github.com/zopefoundation/zope.interface/pull/161>`_.\n\n- Make the Python implementation closer to the C implementation by\n  ignoring all exceptions, not just ``AttributeError``, during (parts\n  of) interface adaptation. See `issue 163\n  <https://github.com/zopefoundation/zope.interface/issues/163>`_.\n\n- Micro-optimization in ``.adapter._lookup`` , ``.adapter._lookupAll``\n  and ``.adapter._subscriptions``: By loading ``components.get`` into\n  a local variable before entering the loop a bytcode \"LOAD_FAST 0\n  (components)\" in the loop can be eliminated. In Plone, while running\n  all tests, average speedup of the \"owntime\" of ``_lookup`` is ~5x.\n  See `PR 167\n  <https://github.com/zopefoundation/zope.interface/pull/167>`_.\n\n- Add ``__all__`` declarations to all modules. This helps tools that\n  do auto-completion and documentation and results in less cluttered\n  results. Wildcard (\"*\") are not recommended and may be affected. See\n  `issue 153\n  <https://github.com/zopefoundation/zope.interface/issues/153>`_.\n\n- Fix ``verifyClass`` and ``verifyObject`` for builtin types like\n  ``dict`` that have methods taking an optional, unnamed argument with\n  no default value like ``dict.pop``. On PyPy3, the verification is\n  strict, but on PyPy2 (as on all versions of CPython) those methods\n  cannot be verified and are ignored. See `issue 118\n  <https://github.com/zopefoundation/zope.interface/issues/118>`_.\n\n- Update the common interfaces ``IEnumerableMapping``,\n  ``IExtendedReadMapping``, ``IExtendedWriteMapping``,\n  ``IReadSequence`` and ``IUniqueMemberWriteSequence`` to no longer\n  require methods that were removed from Python 3 on Python 3, such as\n  ``__setslice___``. Now, ``dict``, ``list`` and ``tuple`` properly\n  verify as ``IFullMapping``, ``ISequence`` and ``IReadSequence,``\n  respectively on all versions of Python.\n\n- Add human-readable ``__str___`` and ``__repr___`` to ``Attribute``\n  and ``Method``. These contain the name of the defining interface\n  and the attribute. For methods, it also includes the signature.\n\n- Change the error strings raised by ``verifyObject`` and\n  ``verifyClass``. They now include more human-readable information\n  and exclude extraneous lines and spaces. See `issue 170\n  <https://github.com/zopefoundation/zope.interface/issues/170>`_.\n\n  .. caution:: This will break consumers (such as doctests) that\n               depended on the exact error messages.\n\n- Make ``verifyObject`` and ``verifyClass`` report all errors, if the\n  candidate object has multiple detectable violations. Previously they\n  reported only the first error. See `issue\n  <https://github.com/zopefoundation/zope.interface/issues/171>`_.\n\n  Like the above, this will break consumers depending on the exact\n  output of error messages if more than one error is present.\n\n- Add ``zope.interface.common.collections``,\n  ``zope.interface.common.numbers``, and ``zope.interface.common.io``.\n  These modules define interfaces based on the ABCs defined in the\n  standard library ``collections.abc``, ``numbers`` and ``io``\n  modules, respectively. Importing these modules will make the\n  standard library concrete classes that are registered with those\n  ABCs declare the appropriate interface. See `issue 138\n  <https://github.com/zopefoundation/zope.interface/issues/138>`_.\n\n- Add ``zope.interface.common.builtins``. This module defines\n  interfaces of common builtin types, such as ``ITextString`` and\n  ``IByteString``, ``IDict``, etc. These interfaces extend the\n  appropriate interfaces from ``collections`` and ``numbers``, and the\n  standard library classes implement them after importing this module.\n  This is intended as a replacement for third-party packages like\n  `dolmen.builtins <https://pypi.org/project/dolmen.builtins/>`_.\n  See `issue 138 <https://github.com/zopefoundation/zope.interface/issues/138>`_.\n\n- Make ``providedBy()`` and ``implementedBy()`` respect ``super``\n  objects. For instance, if class ``Derived`` implements ``IDerived``\n  and extends ``Base`` which in turn implements ``IBase``, then\n  ``providedBy(super(Derived, derived))`` will return ``[IBase]``.\n  Previously it would have returned ``[IDerived]`` (in general, it\n  would previously have returned whatever would have been returned\n  without ``super``).\n\n  Along with this change, adapter registries will unpack ``super``\n  objects into their ``__self___`` before passing it to the factory.\n  Together, this means that ``component.getAdapter(super(Derived,\n  self), ITarget)`` is now meaningful.\n\n  See `issue 11 <https://github.com/zopefoundation/zope.interface/issues/11>`_.\n\n- Fix a potential interpreter crash in the low-level adapter\n  registry lookup functions. See issue 11.\n\n- Adopt Python's standard `C3 resolution order\n  <https://www.python.org/download/releases/2.3/mro/>`_ to compute the\n  ``__iro__`` and ``__sro__`` of interfaces, with tweaks to support\n  additional cases that are common in interfaces but disallowed for\n  Python classes. Previously, an ad-hoc ordering that made no\n  particular guarantees was used.\n\n  This has many beneficial properties, including the fact that base\n  interface and base classes tend to appear near the end of the\n  resolution order instead of the beginning. The resolution order in\n  general should be more predictable and consistent.\n\n  .. caution::\n     In some cases, especially with complex interface inheritance\n     trees or when manually providing or implementing interfaces, the\n     resulting IRO may be quite different. This may affect adapter\n     lookup.\n\n  The C3 order enforces some constraints in order to be able to\n  guarantee a sensible ordering. Older versions of zope.interface did\n  not impose similar constraints, so it was possible to create\n  interfaces and declarations that are inconsistent with the C3\n  constraints. In that event, zope.interface will still produce a\n  resolution order equal to the old order, but it won't be guaranteed\n  to be fully C3 compliant. In the future, strict enforcement of C3\n  order may be the default.\n\n  A set of environment variables and module constants allows\n  controlling several aspects of this new behaviour. It is possible to\n  request warnings about inconsistent resolution orders encountered,\n  and even to forbid them. Differences between the C3 resolution order\n  and the previous order can be logged, and, in extreme cases, the\n  previous order can still be used (this ability will be removed in\n  the future). For details, see the documentation for\n  ``zope.interface.ro``.\n\n- Make inherited tagged values in interfaces respect the resolution\n  order (``__iro__``), as method and attribute lookup does. Previously\n  tagged values could give inconsistent results. See `issue 190\n  <https://github.com/zopefoundation/zope.interface/issues/190>`_.\n\n- Add ``getDirectTaggedValue`` (and related methods) to interfaces to\n  allow accessing tagged values irrespective of inheritance. See\n  `issue 190\n  <https://github.com/zopefoundation/zope.interface/issues/190>`_.\n\n- Ensure that ``Interface`` is always the last item in the ``__iro__``\n  and ``__sro__``. This is usually the case, but if classes that do\n  not implement any interfaces are part of a class inheritance\n  hierarchy, ``Interface`` could be assigned too high a priority.\n  See `issue 8 <https://github.com/zopefoundation/zope.interface/issues/8>`_.\n\n- Implement sorting, equality, and hashing in C for ``Interface``\n  objects. In micro benchmarks, this makes those operations 40% to 80%\n  faster. This translates to a 20% speed up in querying adapters.\n\n  Note that this changes certain implementation details. In\n  particular, ``InterfaceClass`` now has a non-default metaclass, and\n  it is enforced that ``__module__`` in instances of\n  ``InterfaceClass`` is read-only.\n\n  See `PR 183 <https://github.com/zopefoundation/zope.interface/pull/183>`_.\n\n\n4.7.2 (2020-03-10)\n==================\n\n- Remove deprecated use of setuptools features.  See `issue 30\n  <https://github.com/zopefoundation/zope.interface/issues/30>`_.\n\n\n4.7.1 (2019-11-11)\n==================\n\n- Use Python 3 syntax in the documentation.  See `issue 119\n  <https://github.com/zopefoundation/zope.interface/issues/119>`_.\n\n\n4.7.0 (2019-11-11)\n==================\n\n- Drop support for Python 3.4.\n\n- Change ``queryTaggedValue``, ``getTaggedValue``,\n  ``getTaggedValueTags`` in interfaces. They now include inherited\n  values by following ``__bases__``. See `PR 144\n  <https://github.com/zopefoundation/zope.interface/pull/144>`_.\n\n  .. caution:: This may be a breaking change.\n\n- Add support for Python 3.8.\n\n\n4.6.0 (2018-10-23)\n==================\n\n- Add support for Python 3.7\n\n- Fix ``verifyObject`` for class objects with staticmethods on\n  Python 3. See `issue 126\n  <https://github.com/zopefoundation/zope.interface/issues/126>`_.\n\n\n4.5.0 (2018-04-19)\n==================\n\n- Drop support for 3.3, avoid accidental dependence breakage via setup.py.\n  See `PR 110 <https://github.com/zopefoundation/zope.interface/pull/110>`_.\n- Allow registering and unregistering instance methods as listeners.\n  See `issue 12 <https://github.com/zopefoundation/zope.interface/issues/12>`_\n  and `PR 102 <https://github.com/zopefoundation/zope.interface/pull/102>`_.\n- Synchronize and simplify zope/__init__.py. See `issue 114\n  <https://github.com/zopefoundation/zope.interface/issues/114>`_\n\n\n4.4.3 (2017-09-22)\n==================\n\n- Avoid exceptions when the ``__annotations__`` attribute is added to\n  interface definitions with Python 3.x type hints. See `issue 98\n  <https://github.com/zopefoundation/zope.interface/issues/98>`_.\n- Fix the possibility of a rare crash in the C extension when\n  deallocating items. See `issue 100\n  <https://github.com/zopefoundation/zope.interface/issues/100>`_.\n\n\n4.4.2 (2017-06-14)\n==================\n\n- Fix a regression storing\n  ``zope.component.persistentregistry.PersistentRegistry`` instances.\n  See `issue 85 <https://github.com/zopefoundation/zope.interface/issues/85>`_.\n\n- Fix a regression that could lead to the utility registration cache\n  of ``Components`` getting out of sync. See `issue 93\n  <https://github.com/zopefoundation/zope.interface/issues/93>`_.\n\n4.4.1 (2017-05-13)\n==================\n\n- Simplify the caching of utility-registration data. In addition to\n  simplification, avoids spurious test failures when checking for\n  leaks in tests with persistent registries. See `pull 84\n  <https://github.com/zopefoundation/zope.interface/pull/84>`_.\n\n- Raise ``ValueError`` when non-text names are passed to adapter registry\n  methods:  prevents corruption of lookup caches.\n\n4.4.0 (2017-04-21)\n==================\n\n- Avoid a warning from the C compiler.\n  (https://github.com/zopefoundation/zope.interface/issues/71)\n\n- Add support for Python 3.6.\n\n4.3.3 (2016-12-13)\n==================\n\n- Correct typos and ReST formatting errors in documentation.\n\n- Add API documentation for the adapter registry.\n\n- Ensure that the ``LICENSE.txt`` file is included in built wheels.\n\n- Fix C optimizations broken on Py3k.  See the Python bug at:\n  http://bugs.python.org/issue15657\n  (https://github.com/zopefoundation/zope.interface/issues/60)\n\n\n4.3.2 (2016-09-05)\n==================\n\n- Fix equality testing of ``implementedBy`` objects and proxies.\n  (https://github.com/zopefoundation/zope.interface/issues/55)\n\n\n4.3.1 (2016-08-31)\n==================\n\n- Support Components subclasses that are not hashable.\n  (https://github.com/zopefoundation/zope.interface/issues/53)\n\n\n4.3.0 (2016-08-31)\n==================\n\n- Add the ability to sort the objects returned by ``implementedBy``.\n  This is compatible with the way interface classes sort so they can\n  be used together in ordered containers like BTrees.\n  (https://github.com/zopefoundation/zope.interface/issues/42)\n\n- Make ``setuptools`` a hard dependency of ``setup.py``.\n  (https://github.com/zopefoundation/zope.interface/issues/13)\n\n- Change a linear algorithm (O(n)) in ``Components.registerUtility`` and\n  ``Components.unregisterUtility`` into a dictionary lookup (O(1)) for\n  hashable components. This substantially improves the time taken to\n  manipulate utilities in large registries at the cost of some\n  additional memory usage. (https://github.com/zopefoundation/zope.interface/issues/46)\n\n\n4.2.0 (2016-06-10)\n==================\n\n- Add support for Python 3.5\n\n- Drop support for Python 2.6 and 3.2.\n\n\n4.1.3 (2015-10-05)\n==================\n\n- Fix installation without a C compiler on Python 3.5\n  (https://github.com/zopefoundation/zope.interface/issues/24).\n\n\n4.1.2 (2014-12-27)\n==================\n\n- Add support for PyPy3.\n\n- Remove unittest assertions deprecated in Python3.x.\n\n- Add ``zope.interface.document.asReStructuredText``, which formats the\n  generated text for an interface using ReST double-backtick markers.\n\n\n4.1.1 (2014-03-19)\n==================\n\n- Add support for Python 3.4.\n\n\n4.1.0 (2014-02-05)\n==================\n\n- Update ``boostrap.py`` to version 2.2.\n\n- Add ``@named(name)`` declaration, that specifies the component name, so it\n  does not have to be passed in during registration.\n\n\n4.0.5 (2013-02-28)\n==================\n\n- Fix a bug where a decorated method caused false positive failures on\n  ``verifyClass()``.\n\n\n4.0.4 (2013-02-21)\n==================\n\n- Fix a bug that was revealed by porting zope.traversing. During a loop, the\n  loop body modified a weakref dict causing a ``RuntimeError`` error.\n\n4.0.3 (2012-12-31)\n==================\n\n- Fleshed out PyPI Trove classifiers.\n\n4.0.2 (2012-11-21)\n==================\n\n- Add support for Python 3.3.\n\n- Restored ability to install the package in the absence of ``setuptools``.\n\n- LP #1055223:  Fix test which depended on dictionary order and failed randomly\n  in Python 3.3.\n\n4.0.1 (2012-05-22)\n==================\n\n- Drop explicit ``DeprecationWarnings`` for \"class advice\" APIS (these\n  APIs are still deprecated under Python 2.x, and still raise an exception\n  under Python 3.x, but no longer cause a warning to be emitted under\n  Python 2.x).\n\n4.0.0 (2012-05-16)\n==================\n\n- Automated build of Sphinx HTML docs and running doctest snippets via tox.\n\n- Deprecate the \"class advice\" APIs from ``zope.interface.declarations``:\n  ``implements``, ``implementsOnly``, and ``classProvides``.  In their place,\n  prefer the equivalent class decorators: ``@implementer``,\n  ``@implementer_only``, and ``@provider``.  Code which uses the deprecated\n  APIs will not work as expected under Py3k.\n\n- Remove use of '2to3' and associated fixers when installing under Py3k.\n  The code is now in a \"compatible subset\" which supports Python 2.6, 2.7,\n  and 3.2, including PyPy 1.8 (the version compatible with the 2.7 language\n  spec).\n\n- Drop explicit support for Python 2.4 / 2.5 / 3.1.\n\n- Add support for PyPy.\n\n- Add support for continuous integration using ``tox`` and ``jenkins``.\n\n- Add 'setup.py dev' alias (runs ``setup.py develop`` plus installs\n  ``nose`` and ``coverage``).\n\n- Add 'setup.py docs' alias (installs ``Sphinx`` and dependencies).\n\n- Replace all unittest coverage previously accomplished via doctests with\n  unittests.  The doctests have been moved into a ``docs`` section, managed\n  as a Sphinx collection.\n\n- LP #910987:  Ensure that the semantics of the ``lookup`` method of\n  ``zope.interface.adapter.LookupBase`` are the same in both the C and\n  Python implementations.\n\n- LP #900906:  Avoid exceptions due to tne new ``__qualname__`` attribute\n  added in Python 3.3 (see PEP 3155 for rationale).  Thanks to Antoine\n  Pitrou for the patch.\n\n3.8.0 (2011-09-22)\n==================\n\n- New module ``zope.interface.registry``.  This is code moved from\n  ``zope.component.registry`` which implements a basic nonperistent component\n  registry as ``zope.interface.registry.Components``.  This class was moved\n  from ``zope.component`` to make porting systems (such as Pyramid) that rely\n  only on a basic component registry to Python 3 possible without needing to\n  port the entirety of the ``zope.component`` package.  Backwards\n  compatibility import shims have been left behind in ``zope.component``, so\n  this change will not break any existing code.\n\n- New ``tests_require`` dependency: ``zope.event`` to test events sent by\n  Components implementation.  The ``zope.interface`` package does not have a\n  hard dependency on ``zope.event``, but if ``zope.event`` is importable, it\n  will send component registration events when methods of an instance of\n  ``zope.interface.registry.Components`` are called.\n\n- New interfaces added to support ``zope.interface.registry.Components``\n  addition: ``ComponentLookupError``, ``Invalid``, ``IObjectEvent``,\n  ``ObjectEvent``, ``IComponentLookup``, ``IRegistration``,\n  ``IUtilityRegistration``, ``IAdapterRegistration``,\n  ``ISubscriptionAdapterRegistration``, ``IHandlerRegistration``,\n  ``IRegistrationEvent``, ``RegistrationEvent``, ``IRegistered``,\n  ``Registered``, ``IUnregistered``, ``Unregistered``,\n  ``IComponentRegistry``, and ``IComponents``.\n\n- No longer Python 2.4 compatible (tested under 2.5, 2.6, 2.7, and 3.2).\n\n3.7.0 (2011-08-13)\n==================\n\n- Move changes from 3.6.2 - 3.6.5 to a new 3.7.x release line.\n\n3.6.7 (2011-08-20)\n==================\n\n- Fix sporadic failures on x86-64 platforms in tests of rich comparisons\n  of interfaces.\n\n3.6.6 (2011-08-13)\n==================\n\n- LP #570942:  Now correctly compare interfaces  from different modules but\n  with the same names.\n\n  N.B.: This is a less intrusive / destabilizing fix than the one applied in\n  3.6.3:  we only fix the underlying cmp-alike function, rather than adding\n  the other \"rich comparison\" functions.\n\n- Revert to software as released with 3.6.1 for \"stable\" 3.6 release branch.\n\n3.6.5 (2011-08-11)\n==================\n\n- LP #811792:  work around buggy behavior in some subclasses of\n  ``zope.interface.interface.InterfaceClass``, which invoke ``__hash__``\n  before initializing ``__module__`` and ``__name__``.  The workaround\n  returns a fixed constant hash in such cases, and issues a ``UserWarning``.\n\n- LP #804832:  Under PyPy, ``zope.interface`` should not build its C\n  extension.  Also, prevent attempting to build it under Jython.\n\n- Add a tox.ini for easier xplatform testing.\n\n- Fix testing deprecation warnings issued when tested under Py3K.\n\n3.6.4 (2011-07-04)\n==================\n\n- LP 804951:  InterfaceClass instances were unhashable under Python 3.x.\n\n3.6.3 (2011-05-26)\n==================\n\n- LP #570942:  Now correctly compare interfaces  from different modules but\n  with the same names.\n\n3.6.2 (2011-05-17)\n==================\n\n- Moved detailed documentation out-of-line from PyPI page, linking instead to\n  http://docs.zope.org/zope.interface .\n\n- Fixes for small issues when running tests under Python 3.2 using\n  ``zope.testrunner``.\n\n- LP # 675064:  Specify return value type for C optimizations module init\n  under Python 3:  undeclared value caused warnings, and segfaults on some\n  64 bit architectures.\n\n- setup.py now raises RuntimeError if you don't have Distutils installed when\n  running under Python 3.\n\n3.6.1 (2010-05-03)\n==================\n\n- A non-ASCII character in the changelog made 3.6.0 uninstallable on\n  Python 3 systems with another default encoding than UTF-8.\n\n- Fix compiler warnings under GCC 4.3.3.\n\n3.6.0 (2010-04-29)\n==================\n\n- LP #185974:  Clear the cache used by ``Specificaton.get`` inside\n  ``Specification.changed``.  Thanks to Jacob Holm for the patch.\n\n- Add support for Python 3.1. Contributors:\n\n    Lennart Regebro\n    Martin v Loewis\n    Thomas Lotze\n    Wolfgang Schnerring\n\n  The 3.1 support is completely backwards compatible. However, the implements\n  syntax used under Python 2.X does not work under 3.X, since it depends on\n  how metaclasses are implemented and this has changed. Instead it now supports\n  a decorator syntax (also under Python 2.X)::\n\n    class Foo:\n        implements(IFoo)\n        ...\n\n  can now also be written::\n\n    @implementer(IFoo):\n    class Foo:\n        ...\n\n  There are 2to3 fixers available to do this change automatically in the\n  zope.fixers package.\n\n- Python 2.3 is no longer supported.\n\n\n3.5.4 (2009-12-23)\n==================\n\n- Use the standard Python doctest module instead of zope.testing.doctest, which\n  has been deprecated.\n\n\n3.5.3 (2009-12-08)\n==================\n\n- Fix an edge case: make providedBy() work when a class has '__provides__' in\n  its __slots__ (see http://thread.gmane.org/gmane.comp.web.zope.devel/22490)\n\n\n3.5.2 (2009-07-01)\n==================\n\n- BaseAdapterRegistry.unregister, unsubscribe: Remove empty portions of\n  the data structures when something is removed.  This avoids leaving\n  references to global objects (interfaces) that may be slated for\n  removal from the calling application.\n\n\n3.5.1 (2009-03-18)\n==================\n\n- verifyObject: use getattr instead of hasattr to test for object attributes\n  in order to let exceptions other than AttributeError raised by properties\n  propagate to the caller\n\n- Add Sphinx-based documentation building to the package buildout\n  configuration. Use the ``bin/docs`` command after buildout.\n\n- Improve package description a bit. Unify changelog entries formatting.\n\n- Change package's mailing list address to zope-dev at zope.org as\n  zope3-dev at zope.org is now retired.\n\n\n3.5.0 (2008-10-26)\n==================\n\n- Fix declaration of _zope_interface_coptimizations, it's not a top level\n  package.\n\n- Add a DocTestSuite for odd.py module, so their tests are run.\n\n- Allow to bootstrap on Jython.\n\n- Fix https://bugs.launchpad.net/zope3/3.3/+bug/98388: ISpecification\n  was missing a declaration for __iro__.\n\n- Add optional code optimizations support, which allows the building\n  of C code optimizations to fail (Jython).\n\n- Replace `_flatten` with a non-recursive implementation, effectively making\n  it 3x faster.\n\n\n3.4.1 (2007-10-02)\n==================\n\n- Fix a setup bug that prevented installation from source on systems\n  without setuptools.\n\n\n3.4.0 (2007-07-19)\n==================\n\n- Final release for 3.4.0.\n\n\n3.4.0b3 (2007-05-22)\n====================\n\n\n- When checking whether an object is already registered, use identity\n  comparison, to allow adding registering with picky custom comparison methods.\n\n\n3.3.0.1 (2007-01-03)\n====================\n\n- Made a reference to OverflowWarning, which disappeared in Python\n  2.5, conditional.\n\n\n3.3.0 (2007/01/03)\n==================\n\nNew Features\n------------\n\n- Refactor the adapter-lookup algorithim to make it much simpler and faster.\n\n  Also, implement more of the adapter-lookup logic in C, making\n  debugging of application code easier, since there is less\n  infrastructre code to step through.\n\n- Treat objects without interface declarations as if they\n  declared that they provide ``zope.interface.Interface``.\n\n- Add a number of richer new adapter-registration interfaces\n  that provide greater control and introspection.\n\n- Add a new interface decorator to zope.interface that allows the\n  setting of tagged values on an interface at definition time (see\n  zope.interface.taggedValue).\n\nBug Fixes\n---------\n\n- A bug in multi-adapter lookup sometimes caused incorrect adapters to\n  be returned.\n\n\n3.2.0.2 (2006-04-15)\n====================\n\n- Fix packaging bug:  'package_dir' must be a *relative* path.\n\n\n3.2.0.1 (2006-04-14)\n====================\n\n- Packaging change:  suppress inclusion of 'setup.cfg' in 'sdist' builds.\n\n\n3.2.0 (2006-01-05)\n==================\n\n- Corresponds to the verison of the zope.interface package shipped as part of\n  the Zope 3.2.0 release.\n\n\n3.1.0 (2005-10-03)\n==================\n\n- Corresponds to the verison of the zope.interface package shipped as part of\n  the Zope 3.1.0 release.\n\n- Made attribute resolution order consistent with component lookup order,\n  i.e. new-style class MRO semantics.\n\n- Deprecate 'isImplementedBy' and 'isImplementedByInstancesOf' APIs in\n  favor of 'implementedBy' and 'providedBy'.\n\n\n3.0.1 (2005-07-27)\n==================\n\n- Corresponds to the verison of the zope.interface package shipped as part of\n  the Zope X3.0.1 release.\n\n- Fix a bug reported by James Knight, which caused adapter registries\n  to fail occasionally to reflect declaration changes.\n\n\n3.0.0 (2004-11-07)\n==================\n\n- Corresponds to the verison of the zope.interface package shipped as part of\n  the Zope X3.0.0 release.",
  "requires_dist": null,
  "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*",
  "current_version": "5.4.0",
  "released_versions": [
    "3.0.0b1",
    "3.3.0",
    "3.3.0.1",
    "3.3.0b1",
    "3.3.0b2",
    "3.4.0",
    "3.4.0b1",
    "3.4.1",
    "3.5.0",
    "3.5.1",
    "3.5.2",
    "3.5.3",
    "3.6.0",
    "3.6.1",
    "3.6.2",
    "3.6.3",
    "3.6.4",
    "3.6.5",
    "3.6.6",
    "3.6.7",
    "3.6.8",
    "3.7.0",
    "3.8.0",
    "4.0.0",
    "4.0.1",
    "4.0.2",
    "4.0.3",
    "4.0.4",
    "4.0.5",
    "4.1.0",
    "4.1.1",
    "4.1.2",
    "4.1.3",
    "4.2.0",
    "4.3.0",
    "4.3.1",
    "4.3.2",
    "4.3.3",
    "4.4.0",
    "4.4.1",
    "4.4.2",
    "4.4.3",
    "4.5.0",
    "4.6.0",
    "4.7.0",
    "4.7.1",
    "4.7.2",
    "5.0.0",
    "5.0.1",
    "5.0.2",
    "5.1.0",
    "5.1.1",
    "5.1.2",
    "5.2.0",
    "5.3.0",
    "5.3.0a1",
    "5.4.0"
  ]
}